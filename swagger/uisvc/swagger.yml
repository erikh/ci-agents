swagger: "2.0"
info:
  title: uisvc
  description: >
    API for the user interface service; the service that is directly
    responsible for presenting data to users.

    This service typically runs at the border, and leverages session cookies or
    authentication tokens that we generate for users. It also is responsible
    for handling the act of oauth and user creation through its login hooks.

    uisvc typically talks to the datasvc and other services to accomplish its
    goal, it does not save anything locally or carry state.
  version: 1.0.0
securityDefinitions:
  token:
    type: apiKey
    in: header
    name: Authorization
  session:
    type: apiKey
    in: header
    name: Cookie
paths:
  /token:
    delete:
      security:
        - token: []
      summary: Remove and reset your tinyCI access token
      description: >
        The next GET /token will create a new one. This will just
        remove it.
      responses:
        200:
          description: OK
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
    get:
      security:
        - session: []
      summary: Get a tinyCI access token
      description: >
        This will allow you unfettered access to the system as your
        user that you request the token with.
      responses:
        200:
          schema:
            type: string
          description: >
            Returns the token which you can pass as a bearer token in headers for
            further requests as this user.
        500:
          description: An error occurred.
          schema:
            $ref: '../models.yml#/definitions/Error'
  /login:
    get:
      summary: Log into the system
      description: >
        Handle the server side of the oauth challenge. It is
        important to preserve the cookie jar after this call is made, as
        session cookies are used to manage many of the calls in this API.
      parameters:
        - in: query
          name: code
          required: true
          type: string
          description: >
            The code github sent back to us with the callback, we use it in the
            OAuth2 exchange to validate the request.
        - in: query
          name: state
          required: true
          type: string
          description: >
            The state (randomized string) we sent with the original link; this
            is echoed back to us so we can further identify the user.
      responses:
        302:
          description: >
            Redirection to another page indicates success of the login
            function. Follow the redirection to complete the login process. If
            the location is "/", that means login was successful.
        500:
          description: An error occurred. Body has error result.
          schema:
            $ref: '../models.yml#/definitions/Error'
  /logout:
    get:
      security:
        - session: []
      summary: Log out of the system
      description: >
        Conveniently clears session cookies. You will need to login
        again. Does not clear oauth tokens.
      responses:
        302:
          description: Redirection to another page indicates success.
        500:
          description: An error occurred. Body has error result.
          schema:
            $ref: '../models.yml#/definitions/Error'
  /capabilities/{username}/{capability}:
    delete:
      security:
        - session: []
        - token: []
      x-capability: "modify:user"
      summary: Remove a named capability
      parameters:
        - in: path
          name: username
          required: true
          type: string
          description: >
            The user ID to remove the capability from.
        - in: path
          name: capability
          required: true
          type: string
          description: >
            The name of the capability to remove.
      description: Remove a named capability from a provided user ID. Requires the user have the 'modify:user' capability.
      responses:
        200:
          description: The capability was successfully removed
        500:
          description: An error occurred adding. Body has error result. 
          schema:
            $ref: '../models.yml#/definitions/Error'        
    post:
      security:
        - session: []
        - token: []
      x-capability: "modify:user"
      summary: Add a named capability
      parameters:
        - in: path
          name: username
          required: true
          type: string
          description: >
            The user ID to add the capability to.
        - in: path
          name: capability
          required: true
          type: string
          description: >
            The name of the capability to add.
      description: Add a named capability for a provided user ID. Requires the user have the 'modify:user' capability.
      responses:
        200:
          description: The capability was successfully added
        500:
          description: An error occurred adding. Body has error result. 
          schema:
            $ref: '../models.yml#/definitions/Error'        
  /user/properties:
    get:
      security:
       - session: []
       - token: []
      summary: Get information about the current user
      description: >
        Get information about the current user, such as the username.
      responses:
        200:
          description: >
            An object containing user properties
        500:
          description: An error occurred. Body has error result.
          schema:
            $ref: '../models.yml#/definitions/Error'        
  /errors:
    get:
      security:
        - session: []
      summary: Retrieve errors
      description:
        Server retrieves any errors the last call(s) have set for you.
      responses:
        500:
          description: An error occurred. Body has error result.
          schema:
            $ref: '../models.yml#/definitions/Error'
        200:
          description: Any errors returned
          schema:
            type: array
            items:
              $ref: '../models.yml#/definitions/UserError'
  /loggedin:
    get:
      summary: Check logged in state
      description: >
        Validate the logged-in status of the user. Validates the
        session cookie against the internal database.

        If the user is logged in, a JSON string of "true" will be sent;
        otherwise an oauth redirect url will be passed for calling out to by
        the client.
      responses:
        500:
          description: An error occurred. Body has error result.
          schema:
            $ref: '../models.yml#/definitions/Error'
        200:
          description: Either "true" or the URL to the oauth challenge.
          schema:
            type: string
  /submit:
    get:
      security:
        - session: []
        - token: []
      summary: Perform a manual submission to tinyCI
      x-capability: submit
      description: >
        This allows a user to push a job instead of pushing to git or filing a
        pull request to trigger a job. It is available on the tinyCI UI and CLI
        client.
      parameters:
        - in: query
          name: repository
          required: true
          description: the repository owner/repo to be tested.
          type: string
        - in: query
          name: sha
          required: true
          description: the sha or branch to be tested
          type: string
        - in: query
          name: all
          type: boolean
          required: false
          description: Run all tests instead of relying on diff selection to pick them.
      responses:
        200:
          description: OK
        500:
          description: An error occurred. Body has error result.
          schema:
            $ref: '../models.yml#/definitions/Error'
  /log/attach/{id}:
    get:
      security:
        - token: []
        - session: []
      summary: Attach to a running log
      description: >
        For a given ID, find the log and if it is running, attach to it and
        start receiving the latest content from it.
      parameters:
        - in: path
          name: id 
          required: true
          type: integer 
          description: The ID of the run to retrieve the log for.
      x-websocket: "read"
      responses:
        101:
          description: Established websocket
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /repositories/subscribed:
    get:
      security:
        - token: []
        - session: []
      summary: List all subscribed repositories
      description: Returns a types.RepositoryList of all the repos the user is subscribed to.
      parameters:
        - in: query
          name: search
          required: false
          type: string
          description: search string by which to filter results
      responses:
        200:
          description: OK
          schema:
            $ref: "../models.yml#/definitions/RepositoryList"
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /repositories/my:
    get:
      security:
        - token: []
        - session: []
      summary: Fetch all the writable repositories for the user.
      description: Returns a types.RepositoryList for all the repos a user has write access to.
      parameters:
        - in: query
          name: search
          required: false
          type: string
          description: search string by which to filter results
      responses:
        200:
          description: OK
          schema:
            $ref: "../models.yml#/definitions/RepositoryList"
        500:
          description: Internal Server Error
          schema:
            type: string
  /repositories/visible:
    get:
      security:
        - token: []
        - session: []
      summary: Fetch all the repositories the user can view.
      description: Returns a types.RepositoryList for all the repos a user has view access to.
      parameters:
        - in: query
          name: search
          required: false
          type: string
          description: search string by which to filter results
      responses:
        200:
          description: OK
          schema:
            $ref: "../models.yml#/definitions/RepositoryList"
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /repositories/ci/add/{owner}/{repo}:
    get:
      security:
        - token: []
        - session: []
      x-capability: "modify:ci"
      parameters:
        - in: path
          name: owner 
          required: true
          type: string
          description: >
            owner of the repository, first part of github repository name such
            as 'erikh' in 'erikh/foo'
        - in: path
          name: repo 
          required: true
          type: string
          description: >
            name of the repository, the second half of the github repository
            name such as 'foo' in 'erikh/foo'.
      summary: Add a specific repository to CI.
      description: >
        Generates a hook secret and populates the user's repository with it and
        the hook URL. Returns 200 on success, 500 + error message on failure,
        or if the repository has already been added to CI.
      responses:
        200:
          description: OK
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /repositories/ci/del/{owner}/{repo}:
    get:
      security:
        - token: []
        - session: []
      x-capability: "modify:ci"
      parameters:
        - in: path
          name: owner 
          required: true
          type: string
          description: >
            owner of the repository, first part of github repository name such
            as 'erikh' in 'erikh/foo'
        - in: path
          name: repo 
          required: true
          type: string
          description: >
            name of the repository, the second half of the github repository
            name such as 'foo' in 'erikh/foo'.
      summary: Removes a specific repository from CI.
      description: >
        Will fail if not added to CI already; does not currently clear the hook.
      responses:
        200:
          description: OK
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /repositories/sub/add/{owner}/{repo}:
    get:
      security:
        - token: []
        - session: []
      parameters:
        - in: path
          name: owner 
          required: true
          type: string
          description: >
            owner of the repository, first part of github repository name such
            as 'erikh' in 'erikh/foo'
        - in: path
          name: repo 
          required: true
          type: string
          description: >
            owner of the repository, first part of github repository name such
            as 'erikh' in 'erikh/foo'
      summary: Subscribe to a repository running CI
      description: >
        Subscribing makes that repo's queue items appear in your home view.
        Returns 200 on success, 500 + error on failure.
      responses:
        200:
          description: OK
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /repositories/sub/del/{owner}/{repo}:
    get:
      security:
        - token: []
        - session: []
      parameters:
        - in: path
          name: owner 
          required: true
          type: string
          description: >
            owner of the repository, first part of github repository name such
            as 'erikh' in 'erikh/foo'
        - in: path
          name: repo 
          required: true
          type: string
          description: >
            owner of the repository, first part of github repository name such
            as 'erikh' in 'erikh/foo'
      summary: Unsubscribe from a repository
      description: >
        Unsubscribing removes any existing subscription. Either way, if nothing
        broke, it returns 200. Otherwise it returns 500 and the error.
      responses:
        200:
          description: OK
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /tasks:
    get:
      security:
        - token: []
        - session: []
      summary: Obtain the task list optionally filtering by repository and sha.
      parameters: 
        - in: query
          name: page
          type: integer
          default: 0
          description: "pagination control: what page to retrieve in the query."
        - in: query
          name: perPage
          type: integer
          default: 100
          description: "pagination control: how many items counts as a page."
        - in: query
          name: repository 
          type: string
          required: false
          description: optional; the repository name to get the tasks for.
        - in: query
          name: sha 
          type: string
          required: false
          description: optional; the sha to get the tasks for.
      description: >
        The tasks list returns a list of Task objects that correspond to the
        query. Each query may contain pagination or filtering rules to limit
        its contents. It is strongly recommended to look at the "count"
        equivalents for these endpoints so that you can implement pagination
        more simply.
      responses:
        200:
          description: OK
          schema:
            $ref: '../models.yml#/definitions/TaskList'
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /tasks/subscribed:
    get:
      security:
        - token: []
        - session: []
      summary: Obtain the list of tasks that belong to repositories you are subscribed to.
      parameters: 
        - in: query
          name: page
          type: integer
          default: 0
          description: "pagination control: what page to retrieve in the query."
        - in: query
          name: perPage
          type: integer
          default: 100
          description: "pagination control: how many items counts as a page."
      description: >
        This call implements basic pagination over the entire task corpus that
        intersects with your subscription list. It returns a list of tasks.
      responses:
        200:
          description: OK
          schema:
            $ref: '../models.yml#/definitions/TaskList'
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /tasks/count:
    get:
      security:
        - token: []
        - session: []
      summary: Count the Tasks
      parameters:
        - in: query
          name: repository 
          type: string
          required: false
          description: optional; repository for filtering
        - in: query
          name: sha 
          type: string
          required: false
          description: optional; sha for filtering
      description: >
        Perform a full count of tasks that meet the filter criteria (which can
        be no filter) and return it as integer.
      responses:
        200:
          description: OK
          schema:
            type: integer
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /tasks/runs/{id}:
    get:
      security:
        - token: []
        - session: []
      summary: Obtain the run list based on the task ID.
      parameters: 
        - in: path
          name: id
          type: integer
          required: true
          description: the ID of the Task
        - in: query
          name: page
          type: integer
          default: 0
          description: "pagination control: what page to retrieve in the query."
        - in: query
          name: perPage
          type: integer
          default: 100
          description: "pagination control: how many items counts as a page."
      description: >
        The queue list only contains:
        * stuff
        * other junk
      responses:
        200:
          description: OK
          schema:
            $ref: '../models.yml#/definitions/RunList'
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /tasks/runs/{id}/count:
    get:
      security:
        - token: []
        - session: []
      summary: Count the runs corresponding to the task ID.
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: the ID of the Task.
      description: >
        Get the count of runs that correspond to the task ID. Returns an integer.
      responses:
        200:
          description: OK
          schema:
            type: integer
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /runs:
    get:
      security:
        - token: []
        - session: []
      summary: Obtain the run list for the user
      parameters: 
        - in: query
          name: page
          type: integer
          default: 0
          description: "pagination control: what page to retrieve in the query."
        - in: query
          name: perPage
          type: integer
          default: 100
          description: "pagination control: how many items counts as a page."
        - in: query
          name: repository 
          type: string
          required: false
          description: optional; the repository name to get the tasks for.
        - in: query
          name: sha 
          type: string
          required: false
          description: optional; the sha to get the tasks for.
      description: >
        List all the runs, optionally filtering by repository or
        repository+SHA. Pagination controls are available.
      responses:
        200:
          description: OK
          schema:
            $ref: '../models.yml#/definitions/RunList'
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /runs/count:
    get:
      security:
        - token: []
        - session: []
      summary: Count the runs
      parameters:
        - in: query
          name: repository 
          type: string
          required: false
        - in: query
          name: sha 
          type: string
          required: false
      description: >
        Count the runs, optionally filtering by repository or repository+SHA.
      responses:
        200:
          description: OK
          schema:
            type: integer
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  /run/{run_id}:
    get:
      security:
        - token: []
        - session: []
      summary: Get a run by ID
      parameters:
        - in: path
          name: run_id
          description: The ID of the run to retrieve
          type: integer
          required: true
      description:
        Retrieve a Run by ID; this will return the full Run object including all relationships.
      responses:
        200:
          description: OK
          schema: 
            $ref: '../models.yml#/definitions/Run'
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
  "/cancel/{run_id}":
    post:
      security:
        - token: []
        - session: []
      summary: Cancel by Run ID
      x-capability: cancel
      parameters:
        - in: path
          name: run_id
          description: The ID of the run to retrieve
          type: integer
          required: true
      description: >
        Cancel the run by ID; this will actually trickle back and cancel the
        whole task, since it can no longer succeed in any way.

        Please keep in mind to stop runs, runners must implement a cancel poller.
      responses:
        200:
          description: OK
        500:
          description: Internal Server Error
          schema:
            $ref: '../models.yml#/definitions/Error'
