// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskList task list
// swagger:model taskList
type TaskList []*TaskListItems0

// Validate validates this task list
func (m TaskList) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// TaskListItems0 task list items0
// swagger:model TaskListItems0
type TaskListItems0 struct {

	// canceled
	Canceled bool `json:"canceled,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// finished at
	// Format: date-time
	FinishedAt *strfmt.DateTime `json:"finished_at,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// runs
	Runs int64 `json:"runs,omitempty"`

	// settings
	Settings *TaskListItems0Settings `json:"settings,omitempty"`

	// started at
	// Format: date-time
	StartedAt *strfmt.DateTime `json:"started_at,omitempty"`

	// status
	Status *bool `json:"status,omitempty"`

	// submission
	Submission *TaskListItems0Submission `json:"submission,omitempty"`
}

// Validate validates this task list items0
func (m *TaskListItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskListItems0) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskListItems0) validateFinishedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("finished_at", "body", "date-time", m.FinishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskListItems0) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *TaskListItems0) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("started_at", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskListItems0) validateSubmission(formats strfmt.Registry) error {

	if swag.IsZero(m.Submission) { // not required
		return nil
	}

	if m.Submission != nil {
		if err := m.Submission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("submission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListItems0) UnmarshalBinary(b []byte) error {
	var res TaskListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TaskListItems0Settings task list items0 settings
// swagger:model TaskListItems0Settings
type TaskListItems0Settings struct {

	// config
	Config *TaskListItems0SettingsConfig `json:"config,omitempty"`

	// default image
	DefaultImage string `json:"default_image,omitempty"`

	// default queue
	DefaultQueue string `json:"default_queue,omitempty"`

	// the default timeout; in nanoseconds
	DefaultTimeout int64 `json:"default_timeout,omitempty"`

	// env
	Env []string `json:"env"`

	// metadata
	Metadata interface{} `json:"metadata,omitempty"`

	// mountpoint
	Mountpoint string `json:"mountpoint,omitempty"`

	// runs
	Runs map[string]TaskListItems0SettingsRunsAnon `json:"runs,omitempty"`

	// workdir
	Workdir string `json:"workdir,omitempty"`
}

// Validate validates this task list items0 settings
func (m *TaskListItems0Settings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuns(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskListItems0Settings) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings" + "." + "config")
			}
			return err
		}
	}

	return nil
}

func (m *TaskListItems0Settings) validateRuns(formats strfmt.Registry) error {

	if swag.IsZero(m.Runs) { // not required
		return nil
	}

	for k := range m.Runs {

		if swag.IsZero(m.Runs[k]) { // not required
			continue
		}
		if val, ok := m.Runs[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskListItems0Settings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListItems0Settings) UnmarshalBinary(b []byte) error {
	var res TaskListItems0Settings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TaskListItems0SettingsConfig task list items0 settings config
// swagger:model TaskListItems0SettingsConfig
type TaskListItems0SettingsConfig struct {

	// global timeout
	GlobalTimeout int64 `json:"global_timeout,omitempty"`

	// override queue
	OverrideQueue bool `json:"override_queue,omitempty"`

	// override timeout
	OverrideTimeout bool `json:"override_timeout,omitempty"`

	// queue
	Queue string `json:"queue,omitempty"`

	// workdir
	Workdir string `json:"workdir,omitempty"`
}

// Validate validates this task list items0 settings config
func (m *TaskListItems0SettingsConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskListItems0SettingsConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListItems0SettingsConfig) UnmarshalBinary(b []byte) error {
	var res TaskListItems0SettingsConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TaskListItems0SettingsRunsAnon task list items0 settings runs anon
// swagger:model TaskListItems0SettingsRunsAnon
type TaskListItems0SettingsRunsAnon struct {

	// command
	Command []string `json:"command"`

	// image
	Image string `json:"image,omitempty"`

	// metadata
	Metadata interface{} `json:"metadata,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// queue
	Queue string `json:"queue,omitempty"`

	// timeout
	Timeout int64 `json:"timeout,omitempty"`
}

// Validate validates this task list items0 settings runs anon
func (m *TaskListItems0SettingsRunsAnon) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskListItems0SettingsRunsAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListItems0SettingsRunsAnon) UnmarshalBinary(b []byte) error {
	var res TaskListItems0SettingsRunsAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TaskListItems0Submission task list items0 submission
// swagger:model TaskListItems0Submission
type TaskListItems0Submission struct {

	// base ref
	BaseRef *TaskListItems0SubmissionBaseRef `json:"base_ref,omitempty"`

	// canceled
	Canceled bool `json:"canceled,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// finished at
	// Format: date-time
	FinishedAt *strfmt.DateTime `json:"finished_at,omitempty"`

	// head ref
	HeadRef *TaskListItems0SubmissionHeadRef `json:"head_ref,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// runs count
	RunsCount int64 `json:"runs_count,omitempty"`

	// started at
	// Format: date-time
	StartedAt *strfmt.DateTime `json:"started_at,omitempty"`

	// status
	Status *bool `json:"status,omitempty"`

	// tasks count
	TasksCount int64 `json:"tasks_count,omitempty"`

	// ticket id
	TicketID int64 `json:"ticket_id,omitempty"`

	// user
	User *TaskListItems0SubmissionUser `json:"user,omitempty"`
}

// Validate validates this task list items0 submission
func (m *TaskListItems0Submission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskListItems0Submission) validateBaseRef(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseRef) { // not required
		return nil
	}

	if m.BaseRef != nil {
		if err := m.BaseRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("submission" + "." + "base_ref")
			}
			return err
		}
	}

	return nil
}

func (m *TaskListItems0Submission) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submission"+"."+"created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskListItems0Submission) validateFinishedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submission"+"."+"finished_at", "body", "date-time", m.FinishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskListItems0Submission) validateHeadRef(formats strfmt.Registry) error {

	if swag.IsZero(m.HeadRef) { // not required
		return nil
	}

	if m.HeadRef != nil {
		if err := m.HeadRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("submission" + "." + "head_ref")
			}
			return err
		}
	}

	return nil
}

func (m *TaskListItems0Submission) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submission"+"."+"started_at", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskListItems0Submission) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("submission" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskListItems0Submission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListItems0Submission) UnmarshalBinary(b []byte) error {
	var res TaskListItems0Submission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TaskListItems0SubmissionBaseRef task list items0 submission base ref
// swagger:model TaskListItems0SubmissionBaseRef
type TaskListItems0SubmissionBaseRef struct {

	// id
	ID int64 `json:"id,omitempty"`

	// ref name
	RefName string `json:"ref_name,omitempty"`

	// repository
	Repository *TaskListItems0SubmissionBaseRefRepository `json:"repository,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`
}

// Validate validates this task list items0 submission base ref
func (m *TaskListItems0SubmissionBaseRef) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskListItems0SubmissionBaseRef) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("submission" + "." + "base_ref" + "." + "repository")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskListItems0SubmissionBaseRef) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListItems0SubmissionBaseRef) UnmarshalBinary(b []byte) error {
	var res TaskListItems0SubmissionBaseRef
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TaskListItems0SubmissionBaseRefRepository task list items0 submission base ref repository
// swagger:model TaskListItems0SubmissionBaseRefRepository
type TaskListItems0SubmissionBaseRefRepository struct {

	// auto created
	AutoCreated bool `json:"auto_created,omitempty"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// github
	Github interface{} `json:"github,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// private
	Private bool `json:"private,omitempty"`
}

// Validate validates this task list items0 submission base ref repository
func (m *TaskListItems0SubmissionBaseRefRepository) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskListItems0SubmissionBaseRefRepository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListItems0SubmissionBaseRefRepository) UnmarshalBinary(b []byte) error {
	var res TaskListItems0SubmissionBaseRefRepository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TaskListItems0SubmissionHeadRef task list items0 submission head ref
// swagger:model TaskListItems0SubmissionHeadRef
type TaskListItems0SubmissionHeadRef struct {

	// id
	ID int64 `json:"id,omitempty"`

	// ref name
	RefName string `json:"ref_name,omitempty"`

	// repository
	Repository *TaskListItems0SubmissionHeadRefRepository `json:"repository,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`
}

// Validate validates this task list items0 submission head ref
func (m *TaskListItems0SubmissionHeadRef) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskListItems0SubmissionHeadRef) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("submission" + "." + "head_ref" + "." + "repository")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskListItems0SubmissionHeadRef) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListItems0SubmissionHeadRef) UnmarshalBinary(b []byte) error {
	var res TaskListItems0SubmissionHeadRef
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TaskListItems0SubmissionHeadRefRepository task list items0 submission head ref repository
// swagger:model TaskListItems0SubmissionHeadRefRepository
type TaskListItems0SubmissionHeadRefRepository struct {

	// auto created
	AutoCreated bool `json:"auto_created,omitempty"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// github
	Github interface{} `json:"github,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// private
	Private bool `json:"private,omitempty"`
}

// Validate validates this task list items0 submission head ref repository
func (m *TaskListItems0SubmissionHeadRefRepository) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskListItems0SubmissionHeadRefRepository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListItems0SubmissionHeadRefRepository) UnmarshalBinary(b []byte) error {
	var res TaskListItems0SubmissionHeadRefRepository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TaskListItems0SubmissionUser task list items0 submission user
// swagger:model TaskListItems0SubmissionUser
type TaskListItems0SubmissionUser struct {

	// errors
	Errors []*TaskListItems0SubmissionUserErrorsItems0 `json:"errors"`

	// id
	ID int64 `json:"id,omitempty"`

	// last scanned repos
	// Format: date-time
	LastScannedRepos *strfmt.DateTime `json:"last_scanned_repos,omitempty"`

	// token
	Token interface{} `json:"token,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this task list items0 submission user
func (m *TaskListItems0SubmissionUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastScannedRepos(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskListItems0SubmissionUser) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("submission" + "." + "user" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskListItems0SubmissionUser) validateLastScannedRepos(formats strfmt.Registry) error {

	if swag.IsZero(m.LastScannedRepos) { // not required
		return nil
	}

	if err := validate.FormatOf("submission"+"."+"user"+"."+"last_scanned_repos", "body", "date-time", m.LastScannedRepos.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskListItems0SubmissionUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListItems0SubmissionUser) UnmarshalBinary(b []byte) error {
	var res TaskListItems0SubmissionUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TaskListItems0SubmissionUserErrorsItems0 task list items0 submission user errors items0
// swagger:model TaskListItems0SubmissionUserErrorsItems0
type TaskListItems0SubmissionUserErrorsItems0 struct {

	// error
	Error string `json:"error,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`
}

// Validate validates this task list items0 submission user errors items0
func (m *TaskListItems0SubmissionUserErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskListItems0SubmissionUserErrorsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListItems0SubmissionUserErrorsItems0) UnmarshalBinary(b []byte) error {
	var res TaskListItems0SubmissionUserErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
