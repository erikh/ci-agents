// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRuns(t *testing.T) {
	t.Parallel()

	query := Runs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRunsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Runs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRunsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Runs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Runs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRunsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RunSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Runs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRunsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RunExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Run exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RunExists to return true, but got false.")
	}
}

func testRunsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	runFound, err := FindRun(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if runFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRunsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Runs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRunsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Runs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRunsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	runOne := &Run{}
	runTwo := &Run{}
	if err = randomize.Struct(seed, runOne, runDBTypes, false, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}
	if err = randomize.Struct(seed, runTwo, runDBTypes, false, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = runOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = runTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Runs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRunsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	runOne := &Run{}
	runTwo := &Run{}
	if err = randomize.Struct(seed, runOne, runDBTypes, false, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}
	if err = randomize.Struct(seed, runTwo, runDBTypes, false, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = runOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = runTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Runs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func runBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Run) error {
	*o = Run{}
	return nil
}

func runAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Run) error {
	*o = Run{}
	return nil
}

func runAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Run) error {
	*o = Run{}
	return nil
}

func runBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Run) error {
	*o = Run{}
	return nil
}

func runAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Run) error {
	*o = Run{}
	return nil
}

func runBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Run) error {
	*o = Run{}
	return nil
}

func runAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Run) error {
	*o = Run{}
	return nil
}

func runBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Run) error {
	*o = Run{}
	return nil
}

func runAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Run) error {
	*o = Run{}
	return nil
}

func testRunsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Run{}
	o := &Run{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, runDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Run object: %s", err)
	}

	AddRunHook(boil.BeforeInsertHook, runBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	runBeforeInsertHooks = []RunHook{}

	AddRunHook(boil.AfterInsertHook, runAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	runAfterInsertHooks = []RunHook{}

	AddRunHook(boil.AfterSelectHook, runAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	runAfterSelectHooks = []RunHook{}

	AddRunHook(boil.BeforeUpdateHook, runBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	runBeforeUpdateHooks = []RunHook{}

	AddRunHook(boil.AfterUpdateHook, runAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	runAfterUpdateHooks = []RunHook{}

	AddRunHook(boil.BeforeDeleteHook, runBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	runBeforeDeleteHooks = []RunHook{}

	AddRunHook(boil.AfterDeleteHook, runAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	runAfterDeleteHooks = []RunHook{}

	AddRunHook(boil.BeforeUpsertHook, runBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	runBeforeUpsertHooks = []RunHook{}

	AddRunHook(boil.AfterUpsertHook, runAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	runAfterUpsertHooks = []RunHook{}
}

func testRunsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Runs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRunsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(runColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Runs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRunOneToOneQueueItemUsingQueueItem(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign QueueItem
	var local Run

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.RunID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.QueueItem().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.RunID != foreign.RunID {
		t.Errorf("want: %v, got %v", foreign.RunID, check.RunID)
	}

	slice := RunSlice{&local}
	if err = local.L.LoadQueueItem(ctx, tx, false, (*[]*Run)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.QueueItem == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.QueueItem = nil
	if err = local.L.LoadQueueItem(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.QueueItem == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRunOneToOneSetOpQueueItemUsingQueueItem(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Run
	var b, c QueueItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, runDBTypes, false, strmangle.SetComplement(runPrimaryKeyColumns, runColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, queueItemDBTypes, false, strmangle.SetComplement(queueItemPrimaryKeyColumns, queueItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, queueItemDBTypes, false, strmangle.SetComplement(queueItemPrimaryKeyColumns, queueItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*QueueItem{&b, &c} {
		err = a.SetQueueItem(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.QueueItem != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Run != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.RunID {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.RunID))
		reflect.Indirect(reflect.ValueOf(&x.RunID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.RunID {
			t.Error("foreign key was wrong value", a.ID, x.RunID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testRunToOneTaskUsingTask(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Run
	var foreign Task

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, runDBTypes, false, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TaskID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Task().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RunSlice{&local}
	if err = local.L.LoadTask(ctx, tx, false, (*[]*Run)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Task == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Task = nil
	if err = local.L.LoadTask(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Task == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRunToOneSetOpTaskUsingTask(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Run
	var b, c Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, runDBTypes, false, strmangle.SetComplement(runPrimaryKeyColumns, runColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Task{&b, &c} {
		err = a.SetTask(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Task != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Runs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TaskID != x.ID {
			t.Error("foreign key was wrong value", a.TaskID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TaskID))
		reflect.Indirect(reflect.ValueOf(&a.TaskID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TaskID != x.ID {
			t.Error("foreign key was wrong value", a.TaskID, x.ID)
		}
	}
}

func testRunsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRunsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RunSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRunsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Runs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	runDBTypes = map[string]string{`ID`: `bigint`, `TaskID`: `bigint`, `Name`: `character varying`, `RunSettings`: `jsonb`, `Status`: `boolean`, `CreatedAt`: `timestamp with time zone`, `StartedAt`: `timestamp with time zone`, `FinishedAt`: `timestamp with time zone`, `RanOn`: `character varying`}
	_          = bytes.MinRead
)

func testRunsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(runPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(runAllColumns) == len(runPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Runs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, runDBTypes, true, runPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRunsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(runAllColumns) == len(runPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Run{}
	if err = randomize.Struct(seed, o, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Runs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, runDBTypes, true, runPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(runAllColumns, runPrimaryKeyColumns) {
		fields = runAllColumns
	} else {
		fields = strmangle.SetComplement(
			runAllColumns,
			runPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RunSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRunsUpsert(t *testing.T) {
	t.Parallel()

	if len(runAllColumns) == len(runPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Run{}
	if err = randomize.Struct(seed, &o, runDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Run: %s", err)
	}

	count, err := Runs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, runDBTypes, false, runPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Run: %s", err)
	}

	count, err = Runs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
