// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("OAuths", testOAuths)
	t.Run("QueueItems", testQueueItems)
	t.Run("Refs", testRefs)
	t.Run("Repositories", testRepositories)
	t.Run("Runs", testRuns)
	t.Run("Sessions", testSessions)
	t.Run("Submissions", testSubmissions)
	t.Run("Subscriptions", testSubscriptions)
	t.Run("Tasks", testTasks)
	t.Run("UserCapabilities", testUserCapabilities)
	t.Run("UserErrors", testUserErrors)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("OAuths", testOAuthsDelete)
	t.Run("QueueItems", testQueueItemsDelete)
	t.Run("Refs", testRefsDelete)
	t.Run("Repositories", testRepositoriesDelete)
	t.Run("Runs", testRunsDelete)
	t.Run("Sessions", testSessionsDelete)
	t.Run("Submissions", testSubmissionsDelete)
	t.Run("Subscriptions", testSubscriptionsDelete)
	t.Run("Tasks", testTasksDelete)
	t.Run("UserCapabilities", testUserCapabilitiesDelete)
	t.Run("UserErrors", testUserErrorsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("OAuths", testOAuthsQueryDeleteAll)
	t.Run("QueueItems", testQueueItemsQueryDeleteAll)
	t.Run("Refs", testRefsQueryDeleteAll)
	t.Run("Repositories", testRepositoriesQueryDeleteAll)
	t.Run("Runs", testRunsQueryDeleteAll)
	t.Run("Sessions", testSessionsQueryDeleteAll)
	t.Run("Submissions", testSubmissionsQueryDeleteAll)
	t.Run("Subscriptions", testSubscriptionsQueryDeleteAll)
	t.Run("Tasks", testTasksQueryDeleteAll)
	t.Run("UserCapabilities", testUserCapabilitiesQueryDeleteAll)
	t.Run("UserErrors", testUserErrorsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("OAuths", testOAuthsSliceDeleteAll)
	t.Run("QueueItems", testQueueItemsSliceDeleteAll)
	t.Run("Refs", testRefsSliceDeleteAll)
	t.Run("Repositories", testRepositoriesSliceDeleteAll)
	t.Run("Runs", testRunsSliceDeleteAll)
	t.Run("Sessions", testSessionsSliceDeleteAll)
	t.Run("Submissions", testSubmissionsSliceDeleteAll)
	t.Run("Subscriptions", testSubscriptionsSliceDeleteAll)
	t.Run("Tasks", testTasksSliceDeleteAll)
	t.Run("UserCapabilities", testUserCapabilitiesSliceDeleteAll)
	t.Run("UserErrors", testUserErrorsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("OAuths", testOAuthsExists)
	t.Run("QueueItems", testQueueItemsExists)
	t.Run("Refs", testRefsExists)
	t.Run("Repositories", testRepositoriesExists)
	t.Run("Runs", testRunsExists)
	t.Run("Sessions", testSessionsExists)
	t.Run("Submissions", testSubmissionsExists)
	t.Run("Subscriptions", testSubscriptionsExists)
	t.Run("Tasks", testTasksExists)
	t.Run("UserCapabilities", testUserCapabilitiesExists)
	t.Run("UserErrors", testUserErrorsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("OAuths", testOAuthsFind)
	t.Run("QueueItems", testQueueItemsFind)
	t.Run("Refs", testRefsFind)
	t.Run("Repositories", testRepositoriesFind)
	t.Run("Runs", testRunsFind)
	t.Run("Sessions", testSessionsFind)
	t.Run("Submissions", testSubmissionsFind)
	t.Run("Subscriptions", testSubscriptionsFind)
	t.Run("Tasks", testTasksFind)
	t.Run("UserCapabilities", testUserCapabilitiesFind)
	t.Run("UserErrors", testUserErrorsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("OAuths", testOAuthsBind)
	t.Run("QueueItems", testQueueItemsBind)
	t.Run("Refs", testRefsBind)
	t.Run("Repositories", testRepositoriesBind)
	t.Run("Runs", testRunsBind)
	t.Run("Sessions", testSessionsBind)
	t.Run("Submissions", testSubmissionsBind)
	t.Run("Subscriptions", testSubscriptionsBind)
	t.Run("Tasks", testTasksBind)
	t.Run("UserCapabilities", testUserCapabilitiesBind)
	t.Run("UserErrors", testUserErrorsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("OAuths", testOAuthsOne)
	t.Run("QueueItems", testQueueItemsOne)
	t.Run("Refs", testRefsOne)
	t.Run("Repositories", testRepositoriesOne)
	t.Run("Runs", testRunsOne)
	t.Run("Sessions", testSessionsOne)
	t.Run("Submissions", testSubmissionsOne)
	t.Run("Subscriptions", testSubscriptionsOne)
	t.Run("Tasks", testTasksOne)
	t.Run("UserCapabilities", testUserCapabilitiesOne)
	t.Run("UserErrors", testUserErrorsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("OAuths", testOAuthsAll)
	t.Run("QueueItems", testQueueItemsAll)
	t.Run("Refs", testRefsAll)
	t.Run("Repositories", testRepositoriesAll)
	t.Run("Runs", testRunsAll)
	t.Run("Sessions", testSessionsAll)
	t.Run("Submissions", testSubmissionsAll)
	t.Run("Subscriptions", testSubscriptionsAll)
	t.Run("Tasks", testTasksAll)
	t.Run("UserCapabilities", testUserCapabilitiesAll)
	t.Run("UserErrors", testUserErrorsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("OAuths", testOAuthsCount)
	t.Run("QueueItems", testQueueItemsCount)
	t.Run("Refs", testRefsCount)
	t.Run("Repositories", testRepositoriesCount)
	t.Run("Runs", testRunsCount)
	t.Run("Sessions", testSessionsCount)
	t.Run("Submissions", testSubmissionsCount)
	t.Run("Subscriptions", testSubscriptionsCount)
	t.Run("Tasks", testTasksCount)
	t.Run("UserCapabilities", testUserCapabilitiesCount)
	t.Run("UserErrors", testUserErrorsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("OAuths", testOAuthsHooks)
	t.Run("QueueItems", testQueueItemsHooks)
	t.Run("Refs", testRefsHooks)
	t.Run("Repositories", testRepositoriesHooks)
	t.Run("Runs", testRunsHooks)
	t.Run("Sessions", testSessionsHooks)
	t.Run("Submissions", testSubmissionsHooks)
	t.Run("Subscriptions", testSubscriptionsHooks)
	t.Run("Tasks", testTasksHooks)
	t.Run("UserCapabilities", testUserCapabilitiesHooks)
	t.Run("UserErrors", testUserErrorsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("OAuths", testOAuthsInsert)
	t.Run("OAuths", testOAuthsInsertWhitelist)
	t.Run("QueueItems", testQueueItemsInsert)
	t.Run("QueueItems", testQueueItemsInsertWhitelist)
	t.Run("Refs", testRefsInsert)
	t.Run("Refs", testRefsInsertWhitelist)
	t.Run("Repositories", testRepositoriesInsert)
	t.Run("Repositories", testRepositoriesInsertWhitelist)
	t.Run("Runs", testRunsInsert)
	t.Run("Runs", testRunsInsertWhitelist)
	t.Run("Sessions", testSessionsInsert)
	t.Run("Sessions", testSessionsInsertWhitelist)
	t.Run("Submissions", testSubmissionsInsert)
	t.Run("Submissions", testSubmissionsInsertWhitelist)
	t.Run("Subscriptions", testSubscriptionsInsert)
	t.Run("Subscriptions", testSubscriptionsInsertWhitelist)
	t.Run("Tasks", testTasksInsert)
	t.Run("Tasks", testTasksInsertWhitelist)
	t.Run("UserCapabilities", testUserCapabilitiesInsert)
	t.Run("UserCapabilities", testUserCapabilitiesInsertWhitelist)
	t.Run("UserErrors", testUserErrorsInsert)
	t.Run("UserErrors", testUserErrorsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("QueueItemToRunUsingRun", testQueueItemToOneRunUsingRun)
	t.Run("RefToRepositoryUsingRepository", testRefToOneRepositoryUsingRepository)
	t.Run("RepositoryToUserUsingOwner", testRepositoryToOneUserUsingOwner)
	t.Run("RunToTaskUsingTask", testRunToOneTaskUsingTask)
	t.Run("SubmissionToRefUsingBaseRef", testSubmissionToOneRefUsingBaseRef)
	t.Run("SubmissionToRefUsingHeadRef", testSubmissionToOneRefUsingHeadRef)
	t.Run("SubmissionToUserUsingUser", testSubmissionToOneUserUsingUser)
	t.Run("SubscriptionToUserUsingUser", testSubscriptionToOneUserUsingUser)
	t.Run("TaskToSubmissionUsingSubmission", testTaskToOneSubmissionUsingSubmission)
	t.Run("UserCapabilityToUserUsingUser", testUserCapabilityToOneUserUsingUser)
	t.Run("UserErrorToUserUsingUser", testUserErrorToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("RunToQueueItemUsingQueueItem", testRunOneToOneQueueItemUsingQueueItem)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("RefToBaseRefSubmissions", testRefToManyBaseRefSubmissions)
	t.Run("RefToHeadRefSubmissions", testRefToManyHeadRefSubmissions)
	t.Run("RepositoryToRefs", testRepositoryToManyRefs)
	t.Run("SubmissionToTasks", testSubmissionToManyTasks)
	t.Run("TaskToRuns", testTaskToManyRuns)
	t.Run("UserToOwnerRepositories", testUserToManyOwnerRepositories)
	t.Run("UserToSubmissions", testUserToManySubmissions)
	t.Run("UserToSubscriptions", testUserToManySubscriptions)
	t.Run("UserToUserCapabilities", testUserToManyUserCapabilities)
	t.Run("UserToUserErrors", testUserToManyUserErrors)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("QueueItemToRunUsingQueueItem", testQueueItemToOneSetOpRunUsingRun)
	t.Run("RefToRepositoryUsingRefs", testRefToOneSetOpRepositoryUsingRepository)
	t.Run("RepositoryToUserUsingOwnerRepositories", testRepositoryToOneSetOpUserUsingOwner)
	t.Run("RunToTaskUsingRuns", testRunToOneSetOpTaskUsingTask)
	t.Run("SubmissionToRefUsingBaseRefSubmissions", testSubmissionToOneSetOpRefUsingBaseRef)
	t.Run("SubmissionToRefUsingHeadRefSubmissions", testSubmissionToOneSetOpRefUsingHeadRef)
	t.Run("SubmissionToUserUsingSubmissions", testSubmissionToOneSetOpUserUsingUser)
	t.Run("SubscriptionToUserUsingSubscriptions", testSubscriptionToOneSetOpUserUsingUser)
	t.Run("TaskToSubmissionUsingTasks", testTaskToOneSetOpSubmissionUsingSubmission)
	t.Run("UserCapabilityToUserUsingUserCapabilities", testUserCapabilityToOneSetOpUserUsingUser)
	t.Run("UserErrorToUserUsingUserErrors", testUserErrorToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("SubmissionToRefUsingHeadRefSubmissions", testSubmissionToOneRemoveOpRefUsingHeadRef)
	t.Run("SubmissionToUserUsingSubmissions", testSubmissionToOneRemoveOpUserUsingUser)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("RunToQueueItemUsingQueueItem", testRunOneToOneSetOpQueueItemUsingQueueItem)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("RefToBaseRefSubmissions", testRefToManyAddOpBaseRefSubmissions)
	t.Run("RefToHeadRefSubmissions", testRefToManyAddOpHeadRefSubmissions)
	t.Run("RepositoryToRefs", testRepositoryToManyAddOpRefs)
	t.Run("SubmissionToTasks", testSubmissionToManyAddOpTasks)
	t.Run("TaskToRuns", testTaskToManyAddOpRuns)
	t.Run("UserToOwnerRepositories", testUserToManyAddOpOwnerRepositories)
	t.Run("UserToSubmissions", testUserToManyAddOpSubmissions)
	t.Run("UserToSubscriptions", testUserToManyAddOpSubscriptions)
	t.Run("UserToUserCapabilities", testUserToManyAddOpUserCapabilities)
	t.Run("UserToUserErrors", testUserToManyAddOpUserErrors)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("RefToHeadRefSubmissions", testRefToManySetOpHeadRefSubmissions)
	t.Run("UserToSubmissions", testUserToManySetOpSubmissions)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("RefToHeadRefSubmissions", testRefToManyRemoveOpHeadRefSubmissions)
	t.Run("UserToSubmissions", testUserToManyRemoveOpSubmissions)
}

func TestReload(t *testing.T) {
	t.Run("OAuths", testOAuthsReload)
	t.Run("QueueItems", testQueueItemsReload)
	t.Run("Refs", testRefsReload)
	t.Run("Repositories", testRepositoriesReload)
	t.Run("Runs", testRunsReload)
	t.Run("Sessions", testSessionsReload)
	t.Run("Submissions", testSubmissionsReload)
	t.Run("Subscriptions", testSubscriptionsReload)
	t.Run("Tasks", testTasksReload)
	t.Run("UserCapabilities", testUserCapabilitiesReload)
	t.Run("UserErrors", testUserErrorsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("OAuths", testOAuthsReloadAll)
	t.Run("QueueItems", testQueueItemsReloadAll)
	t.Run("Refs", testRefsReloadAll)
	t.Run("Repositories", testRepositoriesReloadAll)
	t.Run("Runs", testRunsReloadAll)
	t.Run("Sessions", testSessionsReloadAll)
	t.Run("Submissions", testSubmissionsReloadAll)
	t.Run("Subscriptions", testSubscriptionsReloadAll)
	t.Run("Tasks", testTasksReloadAll)
	t.Run("UserCapabilities", testUserCapabilitiesReloadAll)
	t.Run("UserErrors", testUserErrorsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("OAuths", testOAuthsSelect)
	t.Run("QueueItems", testQueueItemsSelect)
	t.Run("Refs", testRefsSelect)
	t.Run("Repositories", testRepositoriesSelect)
	t.Run("Runs", testRunsSelect)
	t.Run("Sessions", testSessionsSelect)
	t.Run("Submissions", testSubmissionsSelect)
	t.Run("Subscriptions", testSubscriptionsSelect)
	t.Run("Tasks", testTasksSelect)
	t.Run("UserCapabilities", testUserCapabilitiesSelect)
	t.Run("UserErrors", testUserErrorsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("OAuths", testOAuthsUpdate)
	t.Run("QueueItems", testQueueItemsUpdate)
	t.Run("Refs", testRefsUpdate)
	t.Run("Repositories", testRepositoriesUpdate)
	t.Run("Runs", testRunsUpdate)
	t.Run("Sessions", testSessionsUpdate)
	t.Run("Submissions", testSubmissionsUpdate)
	t.Run("Subscriptions", testSubscriptionsUpdate)
	t.Run("Tasks", testTasksUpdate)
	t.Run("UserCapabilities", testUserCapabilitiesUpdate)
	t.Run("UserErrors", testUserErrorsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("OAuths", testOAuthsSliceUpdateAll)
	t.Run("QueueItems", testQueueItemsSliceUpdateAll)
	t.Run("Refs", testRefsSliceUpdateAll)
	t.Run("Repositories", testRepositoriesSliceUpdateAll)
	t.Run("Runs", testRunsSliceUpdateAll)
	t.Run("Sessions", testSessionsSliceUpdateAll)
	t.Run("Submissions", testSubmissionsSliceUpdateAll)
	t.Run("Subscriptions", testSubscriptionsSliceUpdateAll)
	t.Run("Tasks", testTasksSliceUpdateAll)
	t.Run("UserCapabilities", testUserCapabilitiesSliceUpdateAll)
	t.Run("UserErrors", testUserErrorsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
