// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRefs(t *testing.T) {
	t.Parallel()

	query := Refs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRefsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Refs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRefsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Refs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Refs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRefsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RefSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Refs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRefsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RefExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Ref exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RefExists to return true, but got false.")
	}
}

func testRefsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	refFound, err := FindRef(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if refFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRefsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Refs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRefsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Refs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRefsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	refOne := &Ref{}
	refTwo := &Ref{}
	if err = randomize.Struct(seed, refOne, refDBTypes, false, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}
	if err = randomize.Struct(seed, refTwo, refDBTypes, false, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = refOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = refTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Refs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRefsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	refOne := &Ref{}
	refTwo := &Ref{}
	if err = randomize.Struct(seed, refOne, refDBTypes, false, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}
	if err = randomize.Struct(seed, refTwo, refDBTypes, false, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = refOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = refTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Refs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func refBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ref) error {
	*o = Ref{}
	return nil
}

func refAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ref) error {
	*o = Ref{}
	return nil
}

func refAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Ref) error {
	*o = Ref{}
	return nil
}

func refBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ref) error {
	*o = Ref{}
	return nil
}

func refAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ref) error {
	*o = Ref{}
	return nil
}

func refBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ref) error {
	*o = Ref{}
	return nil
}

func refAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ref) error {
	*o = Ref{}
	return nil
}

func refBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ref) error {
	*o = Ref{}
	return nil
}

func refAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ref) error {
	*o = Ref{}
	return nil
}

func testRefsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Ref{}
	o := &Ref{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, refDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ref object: %s", err)
	}

	AddRefHook(boil.BeforeInsertHook, refBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	refBeforeInsertHooks = []RefHook{}

	AddRefHook(boil.AfterInsertHook, refAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	refAfterInsertHooks = []RefHook{}

	AddRefHook(boil.AfterSelectHook, refAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	refAfterSelectHooks = []RefHook{}

	AddRefHook(boil.BeforeUpdateHook, refBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	refBeforeUpdateHooks = []RefHook{}

	AddRefHook(boil.AfterUpdateHook, refAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	refAfterUpdateHooks = []RefHook{}

	AddRefHook(boil.BeforeDeleteHook, refBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	refBeforeDeleteHooks = []RefHook{}

	AddRefHook(boil.AfterDeleteHook, refAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	refAfterDeleteHooks = []RefHook{}

	AddRefHook(boil.BeforeUpsertHook, refBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	refBeforeUpsertHooks = []RefHook{}

	AddRefHook(boil.AfterUpsertHook, refAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	refAfterUpsertHooks = []RefHook{}
}

func testRefsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Refs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRefsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(refColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Refs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRefToManyBaseRefSubmissions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ref
	var b, c Submission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, submissionDBTypes, false, submissionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, submissionDBTypes, false, submissionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.BaseRefID = a.ID
	c.BaseRefID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BaseRefSubmissions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.BaseRefID == b.BaseRefID {
			bFound = true
		}
		if v.BaseRefID == c.BaseRefID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RefSlice{&a}
	if err = a.L.LoadBaseRefSubmissions(ctx, tx, false, (*[]*Ref)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BaseRefSubmissions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BaseRefSubmissions = nil
	if err = a.L.LoadBaseRefSubmissions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BaseRefSubmissions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRefToManyHeadRefSubmissions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ref
	var b, c Submission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, submissionDBTypes, false, submissionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, submissionDBTypes, false, submissionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.HeadRefID, a.ID)
	queries.Assign(&c.HeadRefID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.HeadRefSubmissions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.HeadRefID, b.HeadRefID) {
			bFound = true
		}
		if queries.Equal(v.HeadRefID, c.HeadRefID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RefSlice{&a}
	if err = a.L.LoadHeadRefSubmissions(ctx, tx, false, (*[]*Ref)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.HeadRefSubmissions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.HeadRefSubmissions = nil
	if err = a.L.LoadHeadRefSubmissions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.HeadRefSubmissions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRefToManyAddOpBaseRefSubmissions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ref
	var b, c, d, e Submission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, refDBTypes, false, strmangle.SetComplement(refPrimaryKeyColumns, refColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Submission{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, submissionDBTypes, false, strmangle.SetComplement(submissionPrimaryKeyColumns, submissionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Submission{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBaseRefSubmissions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BaseRefID {
			t.Error("foreign key was wrong value", a.ID, first.BaseRefID)
		}
		if a.ID != second.BaseRefID {
			t.Error("foreign key was wrong value", a.ID, second.BaseRefID)
		}

		if first.R.BaseRef != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BaseRef != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BaseRefSubmissions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BaseRefSubmissions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BaseRefSubmissions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRefToManyAddOpHeadRefSubmissions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ref
	var b, c, d, e Submission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, refDBTypes, false, strmangle.SetComplement(refPrimaryKeyColumns, refColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Submission{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, submissionDBTypes, false, strmangle.SetComplement(submissionPrimaryKeyColumns, submissionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Submission{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddHeadRefSubmissions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.HeadRefID) {
			t.Error("foreign key was wrong value", a.ID, first.HeadRefID)
		}
		if !queries.Equal(a.ID, second.HeadRefID) {
			t.Error("foreign key was wrong value", a.ID, second.HeadRefID)
		}

		if first.R.HeadRef != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.HeadRef != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.HeadRefSubmissions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.HeadRefSubmissions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.HeadRefSubmissions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRefToManySetOpHeadRefSubmissions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ref
	var b, c, d, e Submission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, refDBTypes, false, strmangle.SetComplement(refPrimaryKeyColumns, refColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Submission{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, submissionDBTypes, false, strmangle.SetComplement(submissionPrimaryKeyColumns, submissionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetHeadRefSubmissions(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.HeadRefSubmissions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetHeadRefSubmissions(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.HeadRefSubmissions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.HeadRefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.HeadRefID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.HeadRefID) {
		t.Error("foreign key was wrong value", a.ID, d.HeadRefID)
	}
	if !queries.Equal(a.ID, e.HeadRefID) {
		t.Error("foreign key was wrong value", a.ID, e.HeadRefID)
	}

	if b.R.HeadRef != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.HeadRef != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.HeadRef != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.HeadRef != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.HeadRefSubmissions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.HeadRefSubmissions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRefToManyRemoveOpHeadRefSubmissions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ref
	var b, c, d, e Submission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, refDBTypes, false, strmangle.SetComplement(refPrimaryKeyColumns, refColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Submission{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, submissionDBTypes, false, strmangle.SetComplement(submissionPrimaryKeyColumns, submissionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddHeadRefSubmissions(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.HeadRefSubmissions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveHeadRefSubmissions(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.HeadRefSubmissions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.HeadRefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.HeadRefID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.HeadRef != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.HeadRef != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.HeadRef != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.HeadRef != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.HeadRefSubmissions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.HeadRefSubmissions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.HeadRefSubmissions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRefToOneRepositoryUsingRepository(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Ref
	var foreign Repository

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, refDBTypes, false, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, repositoryDBTypes, false, repositoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Repository struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RepositoryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Repository().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RefSlice{&local}
	if err = local.L.LoadRepository(ctx, tx, false, (*[]*Ref)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Repository == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Repository = nil
	if err = local.L.LoadRepository(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Repository == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRefToOneSetOpRepositoryUsingRepository(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ref
	var b, c Repository

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, refDBTypes, false, strmangle.SetComplement(refPrimaryKeyColumns, refColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, repositoryDBTypes, false, strmangle.SetComplement(repositoryPrimaryKeyColumns, repositoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, repositoryDBTypes, false, strmangle.SetComplement(repositoryPrimaryKeyColumns, repositoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Repository{&b, &c} {
		err = a.SetRepository(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Repository != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Refs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RepositoryID != x.ID {
			t.Error("foreign key was wrong value", a.RepositoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RepositoryID))
		reflect.Indirect(reflect.ValueOf(&a.RepositoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RepositoryID != x.ID {
			t.Error("foreign key was wrong value", a.RepositoryID, x.ID)
		}
	}
}

func testRefsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRefsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RefSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRefsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Refs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	refDBTypes = map[string]string{`ID`: `bigint`, `RepositoryID`: `bigint`, `Ref`: `character varying`, `Sha`: `character varying`}
	_          = bytes.MinRead
)

func testRefsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(refPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(refAllColumns) == len(refPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Refs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, refDBTypes, true, refPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRefsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(refAllColumns) == len(refPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ref{}
	if err = randomize.Struct(seed, o, refDBTypes, true, refColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Refs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, refDBTypes, true, refPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(refAllColumns, refPrimaryKeyColumns) {
		fields = refAllColumns
	} else {
		fields = strmangle.SetComplement(
			refAllColumns,
			refPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RefSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRefsUpsert(t *testing.T) {
	t.Parallel()

	if len(refAllColumns) == len(refPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Ref{}
	if err = randomize.Struct(seed, &o, refDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ref: %s", err)
	}

	count, err := Refs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, refDBTypes, false, refPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ref struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ref: %s", err)
	}

	count, err = Refs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
