// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOAuths(t *testing.T) {
	t.Parallel()

	query := OAuths()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOAuthsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OAuths().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOAuthsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OAuths().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OAuths().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOAuthsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OAuthSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OAuths().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOAuthsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OAuthExists(ctx, tx, o.State)
	if err != nil {
		t.Errorf("Unable to check if OAuth exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OAuthExists to return true, but got false.")
	}
}

func testOAuthsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	oAuthFound, err := FindOAuth(ctx, tx, o.State)
	if err != nil {
		t.Error(err)
	}

	if oAuthFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOAuthsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OAuths().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOAuthsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OAuths().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOAuthsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	oAuthOne := &OAuth{}
	oAuthTwo := &OAuth{}
	if err = randomize.Struct(seed, oAuthOne, oAuthDBTypes, false, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}
	if err = randomize.Struct(seed, oAuthTwo, oAuthDBTypes, false, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = oAuthOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = oAuthTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OAuths().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOAuthsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	oAuthOne := &OAuth{}
	oAuthTwo := &OAuth{}
	if err = randomize.Struct(seed, oAuthOne, oAuthDBTypes, false, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}
	if err = randomize.Struct(seed, oAuthTwo, oAuthDBTypes, false, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = oAuthOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = oAuthTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OAuths().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func oAuthBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OAuth) error {
	*o = OAuth{}
	return nil
}

func oAuthAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OAuth) error {
	*o = OAuth{}
	return nil
}

func oAuthAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OAuth) error {
	*o = OAuth{}
	return nil
}

func oAuthBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OAuth) error {
	*o = OAuth{}
	return nil
}

func oAuthAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OAuth) error {
	*o = OAuth{}
	return nil
}

func oAuthBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OAuth) error {
	*o = OAuth{}
	return nil
}

func oAuthAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OAuth) error {
	*o = OAuth{}
	return nil
}

func oAuthBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OAuth) error {
	*o = OAuth{}
	return nil
}

func oAuthAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OAuth) error {
	*o = OAuth{}
	return nil
}

func testOAuthsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OAuth{}
	o := &OAuth{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, oAuthDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OAuth object: %s", err)
	}

	AddOAuthHook(boil.BeforeInsertHook, oAuthBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	oAuthBeforeInsertHooks = []OAuthHook{}

	AddOAuthHook(boil.AfterInsertHook, oAuthAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	oAuthAfterInsertHooks = []OAuthHook{}

	AddOAuthHook(boil.AfterSelectHook, oAuthAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	oAuthAfterSelectHooks = []OAuthHook{}

	AddOAuthHook(boil.BeforeUpdateHook, oAuthBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	oAuthBeforeUpdateHooks = []OAuthHook{}

	AddOAuthHook(boil.AfterUpdateHook, oAuthAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	oAuthAfterUpdateHooks = []OAuthHook{}

	AddOAuthHook(boil.BeforeDeleteHook, oAuthBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	oAuthBeforeDeleteHooks = []OAuthHook{}

	AddOAuthHook(boil.AfterDeleteHook, oAuthAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	oAuthAfterDeleteHooks = []OAuthHook{}

	AddOAuthHook(boil.BeforeUpsertHook, oAuthBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	oAuthBeforeUpsertHooks = []OAuthHook{}

	AddOAuthHook(boil.AfterUpsertHook, oAuthAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	oAuthAfterUpsertHooks = []OAuthHook{}
}

func testOAuthsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OAuths().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOAuthsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(oAuthColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OAuths().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOAuthsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOAuthsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OAuthSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOAuthsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OAuths().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	oAuthDBTypes = map[string]string{`State`: `character varying`, `ExpiresOn`: `timestamp with time zone`, `Scopes`: `character varying`}
	_            = bytes.MinRead
)

func testOAuthsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(oAuthPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(oAuthAllColumns) == len(oAuthPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OAuths().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOAuthsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(oAuthAllColumns) == len(oAuthPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OAuth{}
	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OAuths().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, oAuthDBTypes, true, oAuthPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(oAuthAllColumns, oAuthPrimaryKeyColumns) {
		fields = oAuthAllColumns
	} else {
		fields = strmangle.SetComplement(
			oAuthAllColumns,
			oAuthPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OAuthSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOAuthsUpsert(t *testing.T) {
	t.Parallel()

	if len(oAuthAllColumns) == len(oAuthPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OAuth{}
	if err = randomize.Struct(seed, &o, oAuthDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OAuth: %s", err)
	}

	count, err := OAuths().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, oAuthDBTypes, false, oAuthPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OAuth struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OAuth: %s", err)
	}

	count, err = OAuths().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
