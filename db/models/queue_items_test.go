// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testQueueItems(t *testing.T) {
	t.Parallel()

	query := QueueItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testQueueItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueueItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueueItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := QueueItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueueItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueueItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QueueItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueueItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueueItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := QueueItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if QueueItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected QueueItemExists to return true, but got false.")
	}
}

func testQueueItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	queueItemFound, err := FindQueueItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if queueItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testQueueItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = QueueItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testQueueItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := QueueItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testQueueItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	queueItemOne := &QueueItem{}
	queueItemTwo := &QueueItem{}
	if err = randomize.Struct(seed, queueItemOne, queueItemDBTypes, false, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}
	if err = randomize.Struct(seed, queueItemTwo, queueItemDBTypes, false, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = queueItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = queueItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QueueItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testQueueItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	queueItemOne := &QueueItem{}
	queueItemTwo := &QueueItem{}
	if err = randomize.Struct(seed, queueItemOne, queueItemDBTypes, false, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}
	if err = randomize.Struct(seed, queueItemTwo, queueItemDBTypes, false, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = queueItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = queueItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueueItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func queueItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *QueueItem) error {
	*o = QueueItem{}
	return nil
}

func queueItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *QueueItem) error {
	*o = QueueItem{}
	return nil
}

func queueItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *QueueItem) error {
	*o = QueueItem{}
	return nil
}

func queueItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QueueItem) error {
	*o = QueueItem{}
	return nil
}

func queueItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QueueItem) error {
	*o = QueueItem{}
	return nil
}

func queueItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QueueItem) error {
	*o = QueueItem{}
	return nil
}

func queueItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QueueItem) error {
	*o = QueueItem{}
	return nil
}

func queueItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QueueItem) error {
	*o = QueueItem{}
	return nil
}

func queueItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QueueItem) error {
	*o = QueueItem{}
	return nil
}

func testQueueItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &QueueItem{}
	o := &QueueItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, queueItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize QueueItem object: %s", err)
	}

	AddQueueItemHook(boil.BeforeInsertHook, queueItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	queueItemBeforeInsertHooks = []QueueItemHook{}

	AddQueueItemHook(boil.AfterInsertHook, queueItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	queueItemAfterInsertHooks = []QueueItemHook{}

	AddQueueItemHook(boil.AfterSelectHook, queueItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	queueItemAfterSelectHooks = []QueueItemHook{}

	AddQueueItemHook(boil.BeforeUpdateHook, queueItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	queueItemBeforeUpdateHooks = []QueueItemHook{}

	AddQueueItemHook(boil.AfterUpdateHook, queueItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	queueItemAfterUpdateHooks = []QueueItemHook{}

	AddQueueItemHook(boil.BeforeDeleteHook, queueItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	queueItemBeforeDeleteHooks = []QueueItemHook{}

	AddQueueItemHook(boil.AfterDeleteHook, queueItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	queueItemAfterDeleteHooks = []QueueItemHook{}

	AddQueueItemHook(boil.BeforeUpsertHook, queueItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	queueItemBeforeUpsertHooks = []QueueItemHook{}

	AddQueueItemHook(boil.AfterUpsertHook, queueItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	queueItemAfterUpsertHooks = []QueueItemHook{}
}

func testQueueItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueueItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQueueItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(queueItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := QueueItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQueueItemToOneRunUsingRun(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local QueueItem
	var foreign Run

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, queueItemDBTypes, false, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, runDBTypes, false, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RunID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Run().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := QueueItemSlice{&local}
	if err = local.L.LoadRun(ctx, tx, false, (*[]*QueueItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Run == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Run = nil
	if err = local.L.LoadRun(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Run == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testQueueItemToOneSetOpRunUsingRun(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueueItem
	var b, c Run

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queueItemDBTypes, false, strmangle.SetComplement(queueItemPrimaryKeyColumns, queueItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, runDBTypes, false, strmangle.SetComplement(runPrimaryKeyColumns, runColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, runDBTypes, false, strmangle.SetComplement(runPrimaryKeyColumns, runColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Run{&b, &c} {
		err = a.SetRun(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Run != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.QueueItem != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RunID != x.ID {
			t.Error("foreign key was wrong value", a.RunID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RunID))
		reflect.Indirect(reflect.ValueOf(&a.RunID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RunID != x.ID {
			t.Error("foreign key was wrong value", a.RunID, x.ID)
		}
	}
}

func testQueueItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQueueItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QueueItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQueueItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QueueItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	queueItemDBTypes = map[string]string{`ID`: `bigint`, `RunID`: `bigint`, `Running`: `boolean`, `RunningOn`: `character varying`, `QueueName`: `character varying`, `StartedAt`: `timestamp with time zone`}
	_                = bytes.MinRead
)

func testQueueItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(queueItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(queueItemAllColumns) == len(queueItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueueItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testQueueItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(queueItemAllColumns) == len(queueItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QueueItem{}
	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueueItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, queueItemDBTypes, true, queueItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(queueItemAllColumns, queueItemPrimaryKeyColumns) {
		fields = queueItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			queueItemAllColumns,
			queueItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := QueueItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testQueueItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(queueItemAllColumns) == len(queueItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := QueueItem{}
	if err = randomize.Struct(seed, &o, queueItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QueueItem: %s", err)
	}

	count, err := QueueItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, queueItemDBTypes, false, queueItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueueItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QueueItem: %s", err)
	}

	count, err = QueueItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
