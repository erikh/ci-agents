// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Submission is an object representing the database table.
type Submission struct {
	ID        int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    null.Int64 `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	HeadRefID null.Int64 `boil:"head_ref_id" json:"head_ref_id,omitempty" toml:"head_ref_id" yaml:"head_ref_id,omitempty"`
	BaseRefID int64      `boil:"base_ref_id" json:"base_ref_id" toml:"base_ref_id" yaml:"base_ref_id"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	TicketID  null.Int64 `boil:"ticket_id" json:"ticket_id,omitempty" toml:"ticket_id" yaml:"ticket_id,omitempty"`

	R *submissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L submissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubmissionColumns = struct {
	ID        string
	UserID    string
	HeadRefID string
	BaseRefID string
	CreatedAt string
	TicketID  string
}{
	ID:        "id",
	UserID:    "user_id",
	HeadRefID: "head_ref_id",
	BaseRefID: "base_ref_id",
	CreatedAt: "created_at",
	TicketID:  "ticket_id",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var SubmissionWhere = struct {
	ID        whereHelperint64
	UserID    whereHelpernull_Int64
	HeadRefID whereHelpernull_Int64
	BaseRefID whereHelperint64
	CreatedAt whereHelpertime_Time
	TicketID  whereHelpernull_Int64
}{
	ID:        whereHelperint64{field: "\"submissions\".\"id\""},
	UserID:    whereHelpernull_Int64{field: "\"submissions\".\"user_id\""},
	HeadRefID: whereHelpernull_Int64{field: "\"submissions\".\"head_ref_id\""},
	BaseRefID: whereHelperint64{field: "\"submissions\".\"base_ref_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"submissions\".\"created_at\""},
	TicketID:  whereHelpernull_Int64{field: "\"submissions\".\"ticket_id\""},
}

// SubmissionRels is where relationship names are stored.
var SubmissionRels = struct {
	BaseRef string
	HeadRef string
	User    string
	Tasks   string
}{
	BaseRef: "BaseRef",
	HeadRef: "HeadRef",
	User:    "User",
	Tasks:   "Tasks",
}

// submissionR is where relationships are stored.
type submissionR struct {
	BaseRef *Ref      `boil:"BaseRef" json:"BaseRef" toml:"BaseRef" yaml:"BaseRef"`
	HeadRef *Ref      `boil:"HeadRef" json:"HeadRef" toml:"HeadRef" yaml:"HeadRef"`
	User    *User     `boil:"User" json:"User" toml:"User" yaml:"User"`
	Tasks   TaskSlice `boil:"Tasks" json:"Tasks" toml:"Tasks" yaml:"Tasks"`
}

// NewStruct creates a new relationship struct
func (*submissionR) NewStruct() *submissionR {
	return &submissionR{}
}

// submissionL is where Load methods for each relationship are stored.
type submissionL struct{}

var (
	submissionAllColumns            = []string{"id", "user_id", "head_ref_id", "base_ref_id", "created_at", "ticket_id"}
	submissionColumnsWithoutDefault = []string{"user_id", "head_ref_id", "base_ref_id", "ticket_id"}
	submissionColumnsWithDefault    = []string{"id", "created_at"}
	submissionPrimaryKeyColumns     = []string{"id"}
)

type (
	// SubmissionSlice is an alias for a slice of pointers to Submission.
	// This should generally be used opposed to []Submission.
	SubmissionSlice []*Submission
	// SubmissionHook is the signature for custom Submission hook methods
	SubmissionHook func(context.Context, boil.ContextExecutor, *Submission) error

	submissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	submissionType                 = reflect.TypeOf(&Submission{})
	submissionMapping              = queries.MakeStructMapping(submissionType)
	submissionPrimaryKeyMapping, _ = queries.BindMapping(submissionType, submissionMapping, submissionPrimaryKeyColumns)
	submissionInsertCacheMut       sync.RWMutex
	submissionInsertCache          = make(map[string]insertCache)
	submissionUpdateCacheMut       sync.RWMutex
	submissionUpdateCache          = make(map[string]updateCache)
	submissionUpsertCacheMut       sync.RWMutex
	submissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var submissionBeforeInsertHooks []SubmissionHook
var submissionBeforeUpdateHooks []SubmissionHook
var submissionBeforeDeleteHooks []SubmissionHook
var submissionBeforeUpsertHooks []SubmissionHook

var submissionAfterInsertHooks []SubmissionHook
var submissionAfterSelectHooks []SubmissionHook
var submissionAfterUpdateHooks []SubmissionHook
var submissionAfterDeleteHooks []SubmissionHook
var submissionAfterUpsertHooks []SubmissionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Submission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range submissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Submission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range submissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Submission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range submissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Submission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range submissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Submission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range submissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Submission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range submissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Submission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range submissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Submission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range submissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Submission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range submissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSubmissionHook registers your hook function for all future operations.
func AddSubmissionHook(hookPoint boil.HookPoint, submissionHook SubmissionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		submissionBeforeInsertHooks = append(submissionBeforeInsertHooks, submissionHook)
	case boil.BeforeUpdateHook:
		submissionBeforeUpdateHooks = append(submissionBeforeUpdateHooks, submissionHook)
	case boil.BeforeDeleteHook:
		submissionBeforeDeleteHooks = append(submissionBeforeDeleteHooks, submissionHook)
	case boil.BeforeUpsertHook:
		submissionBeforeUpsertHooks = append(submissionBeforeUpsertHooks, submissionHook)
	case boil.AfterInsertHook:
		submissionAfterInsertHooks = append(submissionAfterInsertHooks, submissionHook)
	case boil.AfterSelectHook:
		submissionAfterSelectHooks = append(submissionAfterSelectHooks, submissionHook)
	case boil.AfterUpdateHook:
		submissionAfterUpdateHooks = append(submissionAfterUpdateHooks, submissionHook)
	case boil.AfterDeleteHook:
		submissionAfterDeleteHooks = append(submissionAfterDeleteHooks, submissionHook)
	case boil.AfterUpsertHook:
		submissionAfterUpsertHooks = append(submissionAfterUpsertHooks, submissionHook)
	}
}

// One returns a single submission record from the query.
func (q submissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Submission, error) {
	o := &Submission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for submissions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Submission records from the query.
func (q submissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubmissionSlice, error) {
	var o []*Submission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Submission slice")
	}

	if len(submissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Submission records in the query.
func (q submissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count submissions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q submissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if submissions exists")
	}

	return count > 0, nil
}

// BaseRef pointed to by the foreign key.
func (o *Submission) BaseRef(mods ...qm.QueryMod) refQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BaseRefID),
	}

	queryMods = append(queryMods, mods...)

	query := Refs(queryMods...)
	queries.SetFrom(query.Query, "\"refs\"")

	return query
}

// HeadRef pointed to by the foreign key.
func (o *Submission) HeadRef(mods ...qm.QueryMod) refQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HeadRefID),
	}

	queryMods = append(queryMods, mods...)

	query := Refs(queryMods...)
	queries.SetFrom(query.Query, "\"refs\"")

	return query
}

// User pointed to by the foreign key.
func (o *Submission) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Tasks retrieves all the task's Tasks with an executor.
func (o *Submission) Tasks(mods ...qm.QueryMod) taskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tasks\".\"submission_id\"=?", o.ID),
	)

	query := Tasks(queryMods...)
	queries.SetFrom(query.Query, "\"tasks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tasks\".*"})
	}

	return query
}

// LoadBaseRef allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (submissionL) LoadBaseRef(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubmission interface{}, mods queries.Applicator) error {
	var slice []*Submission
	var object *Submission

	if singular {
		object = maybeSubmission.(*Submission)
	} else {
		slice = *maybeSubmission.(*[]*Submission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &submissionR{}
		}
		args = append(args, object.BaseRefID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &submissionR{}
			}

			for _, a := range args {
				if a == obj.BaseRefID {
					continue Outer
				}
			}

			args = append(args, obj.BaseRefID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`refs`),
		qm.WhereIn(`refs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ref")
	}

	var resultSlice []*Ref
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ref")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for refs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for refs")
	}

	if len(submissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BaseRef = foreign
		if foreign.R == nil {
			foreign.R = &refR{}
		}
		foreign.R.BaseRefSubmissions = append(foreign.R.BaseRefSubmissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BaseRefID == foreign.ID {
				local.R.BaseRef = foreign
				if foreign.R == nil {
					foreign.R = &refR{}
				}
				foreign.R.BaseRefSubmissions = append(foreign.R.BaseRefSubmissions, local)
				break
			}
		}
	}

	return nil
}

// LoadHeadRef allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (submissionL) LoadHeadRef(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubmission interface{}, mods queries.Applicator) error {
	var slice []*Submission
	var object *Submission

	if singular {
		object = maybeSubmission.(*Submission)
	} else {
		slice = *maybeSubmission.(*[]*Submission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &submissionR{}
		}
		if !queries.IsNil(object.HeadRefID) {
			args = append(args, object.HeadRefID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &submissionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.HeadRefID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.HeadRefID) {
				args = append(args, obj.HeadRefID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`refs`),
		qm.WhereIn(`refs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ref")
	}

	var resultSlice []*Ref
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ref")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for refs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for refs")
	}

	if len(submissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HeadRef = foreign
		if foreign.R == nil {
			foreign.R = &refR{}
		}
		foreign.R.HeadRefSubmissions = append(foreign.R.HeadRefSubmissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HeadRefID, foreign.ID) {
				local.R.HeadRef = foreign
				if foreign.R == nil {
					foreign.R = &refR{}
				}
				foreign.R.HeadRefSubmissions = append(foreign.R.HeadRefSubmissions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (submissionL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubmission interface{}, mods queries.Applicator) error {
	var slice []*Submission
	var object *Submission

	if singular {
		object = maybeSubmission.(*Submission)
	} else {
		slice = *maybeSubmission.(*[]*Submission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &submissionR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &submissionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(submissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Submissions = append(foreign.R.Submissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Submissions = append(foreign.R.Submissions, local)
				break
			}
		}
	}

	return nil
}

// LoadTasks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (submissionL) LoadTasks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubmission interface{}, mods queries.Applicator) error {
	var slice []*Submission
	var object *Submission

	if singular {
		object = maybeSubmission.(*Submission)
	} else {
		slice = *maybeSubmission.(*[]*Submission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &submissionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &submissionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tasks`),
		qm.WhereIn(`tasks.submission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tasks")
	}

	var resultSlice []*Task
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tasks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tasks")
	}

	if len(taskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tasks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taskR{}
			}
			foreign.R.Submission = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SubmissionID {
				local.R.Tasks = append(local.R.Tasks, foreign)
				if foreign.R == nil {
					foreign.R = &taskR{}
				}
				foreign.R.Submission = local
				break
			}
		}
	}

	return nil
}

// SetBaseRef of the submission to the related item.
// Sets o.R.BaseRef to related.
// Adds o to related.R.BaseRefSubmissions.
func (o *Submission) SetBaseRef(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ref) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"submissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"base_ref_id"}),
		strmangle.WhereClause("\"", "\"", 2, submissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BaseRefID = related.ID
	if o.R == nil {
		o.R = &submissionR{
			BaseRef: related,
		}
	} else {
		o.R.BaseRef = related
	}

	if related.R == nil {
		related.R = &refR{
			BaseRefSubmissions: SubmissionSlice{o},
		}
	} else {
		related.R.BaseRefSubmissions = append(related.R.BaseRefSubmissions, o)
	}

	return nil
}

// SetHeadRef of the submission to the related item.
// Sets o.R.HeadRef to related.
// Adds o to related.R.HeadRefSubmissions.
func (o *Submission) SetHeadRef(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ref) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"submissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"head_ref_id"}),
		strmangle.WhereClause("\"", "\"", 2, submissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HeadRefID, related.ID)
	if o.R == nil {
		o.R = &submissionR{
			HeadRef: related,
		}
	} else {
		o.R.HeadRef = related
	}

	if related.R == nil {
		related.R = &refR{
			HeadRefSubmissions: SubmissionSlice{o},
		}
	} else {
		related.R.HeadRefSubmissions = append(related.R.HeadRefSubmissions, o)
	}

	return nil
}

// RemoveHeadRef relationship.
// Sets o.R.HeadRef to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Submission) RemoveHeadRef(ctx context.Context, exec boil.ContextExecutor, related *Ref) error {
	var err error

	queries.SetScanner(&o.HeadRefID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("head_ref_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.HeadRef = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.HeadRefSubmissions {
		if queries.Equal(o.HeadRefID, ri.HeadRefID) {
			continue
		}

		ln := len(related.R.HeadRefSubmissions)
		if ln > 1 && i < ln-1 {
			related.R.HeadRefSubmissions[i] = related.R.HeadRefSubmissions[ln-1]
		}
		related.R.HeadRefSubmissions = related.R.HeadRefSubmissions[:ln-1]
		break
	}
	return nil
}

// SetUser of the submission to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Submissions.
func (o *Submission) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"submissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, submissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &submissionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Submissions: SubmissionSlice{o},
		}
	} else {
		related.R.Submissions = append(related.R.Submissions, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Submission) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Submissions {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.Submissions)
		if ln > 1 && i < ln-1 {
			related.R.Submissions[i] = related.R.Submissions[ln-1]
		}
		related.R.Submissions = related.R.Submissions[:ln-1]
		break
	}
	return nil
}

// AddTasks adds the given related objects to the existing relationships
// of the submission, optionally inserting them as new records.
// Appends related to o.R.Tasks.
// Sets related.R.Submission appropriately.
func (o *Submission) AddTasks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Task) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SubmissionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tasks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"submission_id"}),
				strmangle.WhereClause("\"", "\"", 2, taskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SubmissionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &submissionR{
			Tasks: related,
		}
	} else {
		o.R.Tasks = append(o.R.Tasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taskR{
				Submission: o,
			}
		} else {
			rel.R.Submission = o
		}
	}
	return nil
}

// Submissions retrieves all the records using an executor.
func Submissions(mods ...qm.QueryMod) submissionQuery {
	mods = append(mods, qm.From("\"submissions\""))
	return submissionQuery{NewQuery(mods...)}
}

// FindSubmission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubmission(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Submission, error) {
	submissionObj := &Submission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"submissions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, submissionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from submissions")
	}

	return submissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Submission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no submissions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(submissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	submissionInsertCacheMut.RLock()
	cache, cached := submissionInsertCache[key]
	submissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			submissionAllColumns,
			submissionColumnsWithDefault,
			submissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(submissionType, submissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(submissionType, submissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"submissions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"submissions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into submissions")
	}

	if !cached {
		submissionInsertCacheMut.Lock()
		submissionInsertCache[key] = cache
		submissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Submission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Submission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	submissionUpdateCacheMut.RLock()
	cache, cached := submissionUpdateCache[key]
	submissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			submissionAllColumns,
			submissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update submissions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"submissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, submissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(submissionType, submissionMapping, append(wl, submissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update submissions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for submissions")
	}

	if !cached {
		submissionUpdateCacheMut.Lock()
		submissionUpdateCache[key] = cache
		submissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q submissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for submissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for submissions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubmissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), submissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"submissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, submissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in submission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all submission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Submission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no submissions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(submissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	submissionUpsertCacheMut.RLock()
	cache, cached := submissionUpsertCache[key]
	submissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			submissionAllColumns,
			submissionColumnsWithDefault,
			submissionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			submissionAllColumns,
			submissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert submissions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(submissionPrimaryKeyColumns))
			copy(conflict, submissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"submissions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(submissionType, submissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(submissionType, submissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert submissions")
	}

	if !cached {
		submissionUpsertCacheMut.Lock()
		submissionUpsertCache[key] = cache
		submissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Submission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Submission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Submission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), submissionPrimaryKeyMapping)
	sql := "DELETE FROM \"submissions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from submissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for submissions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q submissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no submissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from submissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for submissions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubmissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(submissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), submissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"submissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, submissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from submission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for submissions")
	}

	if len(submissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Submission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubmission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubmissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubmissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), submissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"submissions\".* FROM \"submissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, submissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SubmissionSlice")
	}

	*o = slice

	return nil
}

// SubmissionExists checks if the Submission row exists.
func SubmissionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"submissions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if submissions exists")
	}

	return exists, nil
}
