// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"reflect"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSubmitParams creates a new GetSubmitParams object
// with the default values initialized.
func NewGetSubmitParams() *GetSubmitParams {
	var ()
	return &GetSubmitParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSubmitParamsWithTimeout creates a new GetSubmitParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSubmitParamsWithTimeout(timeout time.Duration) *GetSubmitParams {
	var ()
	return &GetSubmitParams{

		timeout: timeout,
	}
}

// NewGetSubmitParamsWithContext creates a new GetSubmitParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSubmitParamsWithContext(ctx context.Context) *GetSubmitParams {
	var ()
	return &GetSubmitParams{

		Context: ctx,
	}
}

// NewGetSubmitParamsWithHTTPClient creates a new GetSubmitParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSubmitParamsWithHTTPClient(client *http.Client) *GetSubmitParams {
	var ()
	return &GetSubmitParams{
		HTTPClient: client,
	}
}

/*GetSubmitParams contains all the parameters to send to the API endpoint
for the get submit operation typically these are written to a http.Request
*/
type GetSubmitParams struct {

	/*All
	  Run all tests instead of relying on diff selection to pick them.

	*/
	All *bool
	/*Repository
	  the repository owner/repo to be tested.

	*/
	Repository string
	/*Sha
	  the sha or branch to be tested

	*/
	Sha string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get submit params
func (o *GetSubmitParams) WithTimeout(timeout time.Duration) *GetSubmitParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get submit params
func (o *GetSubmitParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get submit params
func (o *GetSubmitParams) WithContext(ctx context.Context) *GetSubmitParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get submit params
func (o *GetSubmitParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get submit params
func (o *GetSubmitParams) WithHTTPClient(client *http.Client) *GetSubmitParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get submit params
func (o *GetSubmitParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAll adds the all to the get submit params
func (o *GetSubmitParams) WithAll(all *bool) *GetSubmitParams {
	o.SetAll(all)
	return o
}

// SetAll adds the all to the get submit params
func (o *GetSubmitParams) SetAll(all *bool) {
	o.All = all
}

// WithRepository adds the repository to the get submit params
func (o *GetSubmitParams) WithRepository(repository string) *GetSubmitParams {
	o.SetRepository(repository)
	return o
}

// SetRepository adds the repository to the get submit params
func (o *GetSubmitParams) SetRepository(repository string) {
	o.Repository = repository
}

// WithSha adds the sha to the get submit params
func (o *GetSubmitParams) WithSha(sha string) *GetSubmitParams {
	o.SetSha(sha)
	return o
}

// SetSha adds the sha to the get submit params
func (o *GetSubmitParams) SetSha(sha string) {
	o.Sha = sha
}

// WriteToRequest writes these params to a swagger request
func (o *GetSubmitParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.All != nil {

		o.HandleQueryParam(r, reg, "all", o.All, func(i interface{}) string { return swag.FormatBool(i.(bool)) })

	}

	o.HandleQueryParam(r, reg, "repository", o.Repository, nil)

	o.HandleQueryParam(r, reg, "sha", o.Sha, nil)

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubmitParams) HandleQueryParam(r runtime.ClientRequest, reg strfmt.Registry, name string, param interface{}, formatter func(interface{}) string) error {
	if (reflect.TypeOf(param).Kind() == reflect.Ptr) && param == nil {
		return nil
	}

	if formatter == nil {
		formatter = func(i interface{}) string { return i.(string) }
	}

	return r.SetQueryParam(name, formatter(param))
}
