// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"reflect"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostCancelRunIDParams creates a new PostCancelRunIDParams object
// with the default values initialized.
func NewPostCancelRunIDParams() *PostCancelRunIDParams {
	var ()
	return &PostCancelRunIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostCancelRunIDParamsWithTimeout creates a new PostCancelRunIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostCancelRunIDParamsWithTimeout(timeout time.Duration) *PostCancelRunIDParams {
	var ()
	return &PostCancelRunIDParams{

		timeout: timeout,
	}
}

// NewPostCancelRunIDParamsWithContext creates a new PostCancelRunIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostCancelRunIDParamsWithContext(ctx context.Context) *PostCancelRunIDParams {
	var ()
	return &PostCancelRunIDParams{

		Context: ctx,
	}
}

// NewPostCancelRunIDParamsWithHTTPClient creates a new PostCancelRunIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostCancelRunIDParamsWithHTTPClient(client *http.Client) *PostCancelRunIDParams {
	var ()
	return &PostCancelRunIDParams{
		HTTPClient: client,
	}
}

/*PostCancelRunIDParams contains all the parameters to send to the API endpoint
for the post cancel run ID operation typically these are written to a http.Request
*/
type PostCancelRunIDParams struct {

	/*RunID
	  The ID of the run to retrieve

	*/
	RunID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post cancel run ID params
func (o *PostCancelRunIDParams) WithTimeout(timeout time.Duration) *PostCancelRunIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post cancel run ID params
func (o *PostCancelRunIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post cancel run ID params
func (o *PostCancelRunIDParams) WithContext(ctx context.Context) *PostCancelRunIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post cancel run ID params
func (o *PostCancelRunIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post cancel run ID params
func (o *PostCancelRunIDParams) WithHTTPClient(client *http.Client) *PostCancelRunIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post cancel run ID params
func (o *PostCancelRunIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRunID adds the runID to the post cancel run ID params
func (o *PostCancelRunIDParams) WithRunID(runID int64) *PostCancelRunIDParams {
	o.SetRunID(runID)
	return o
}

// SetRunID adds the runId to the post cancel run ID params
func (o *PostCancelRunIDParams) SetRunID(runID int64) {
	o.RunID = runID
}

// WriteToRequest writes these params to a swagger request
func (o *PostCancelRunIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param run_id
	if err := r.SetPathParam("run_id", swag.FormatInt64(o.RunID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCancelRunIDParams) HandleQueryParam(r runtime.ClientRequest, reg strfmt.Registry, name string, param interface{}, formatter func(interface{}) string) error {
	if (reflect.TypeOf(param).Kind() == reflect.Ptr) && param == nil {
		return nil
	}

	if formatter == nil {
		formatter = func(i interface{}) string { return i.(string) }
	}

	return r.SetQueryParam(name, formatter(param))
}
