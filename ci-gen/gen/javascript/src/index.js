/**
 * uisvc
 * API for the user interface service; the service that is directly responsible for presenting data to users. This service typically runs at the border, and leverages session cookies or authentication tokens that we generate for users. It also is responsible for handling the act of oauth and user creation through its login hooks. uisvc typically talks to the datasvc and other services to accomplish its goal, it does not save anything locally or carry state. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Ref', 'model/RepoConfig', 'model/Repository', 'model/RepositoryList', 'model/Run', 'model/RunList', 'model/RunSettings', 'model/Task', 'model/TaskList', 'model/TaskSettings', 'model/UserError', 'api/DefaultApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Error'), require('./model/Ref'), require('./model/RepoConfig'), require('./model/Repository'), require('./model/RepositoryList'), require('./model/Run'), require('./model/RunList'), require('./model/RunSettings'), require('./model/Task'), require('./model/TaskList'), require('./model/TaskSettings'), require('./model/UserError'), require('./api/DefaultApi'));
  }
}(function(ApiClient, Error, Ref, RepoConfig, Repository, RepositoryList, Run, RunList, RunSettings, Task, TaskList, TaskSettings, UserError, DefaultApi) {
  'use strict';

  /**
   * API_for_the_user_interface_service_the_service_that_is_directly_responsible_for_presenting_data_to_users_This_service_typically_runs_at_the_border_and_leverages_session_cookies_or_authentication_tokens_that_we_generate_for_users__It_also_is_responsible_for_handling_the_act_of_oauth_and_user_creation_through_its_login_hooks_uisvc_typically_talks_to_the_datasvc_and_other_services_to_accomplish_its_goal_it_does_not_save_anything_locally_or_carry_state_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Uisvc = require('index'); // See note below*.
   * var xxxSvc = new Uisvc.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Uisvc.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Uisvc.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Uisvc.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The Ref model constructor.
     * @property {module:model/Ref}
     */
    Ref: Ref,
    /**
     * The RepoConfig model constructor.
     * @property {module:model/RepoConfig}
     */
    RepoConfig: RepoConfig,
    /**
     * The Repository model constructor.
     * @property {module:model/Repository}
     */
    Repository: Repository,
    /**
     * The RepositoryList model constructor.
     * @property {module:model/RepositoryList}
     */
    RepositoryList: RepositoryList,
    /**
     * The Run model constructor.
     * @property {module:model/Run}
     */
    Run: Run,
    /**
     * The RunList model constructor.
     * @property {module:model/RunList}
     */
    RunList: RunList,
    /**
     * The RunSettings model constructor.
     * @property {module:model/RunSettings}
     */
    RunSettings: RunSettings,
    /**
     * The Task model constructor.
     * @property {module:model/Task}
     */
    Task: Task,
    /**
     * The TaskList model constructor.
     * @property {module:model/TaskList}
     */
    TaskList: TaskList,
    /**
     * The TaskSettings model constructor.
     * @property {module:model/TaskSettings}
     */
    TaskSettings: TaskSettings,
    /**
     * The UserError model constructor.
     * @property {module:model/UserError}
     */
    UserError: UserError,
    /**
     * The DefaultApi service constructor.
     * @property {module:api/DefaultApi}
     */
    DefaultApi: DefaultApi
  };

  return exports;
}));
