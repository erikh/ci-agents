/**
 * uisvc
 * API for the user interface service; the service that is directly responsible for presenting data to users. This service typically runs at the border, and leverages session cookies or authentication tokens that we generate for users. It also is responsible for handling the act of oauth and user creation through its login hooks. uisvc typically talks to the datasvc and other services to accomplish its goal, it does not save anything locally or carry state. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ModelSubmission from '../model/ModelSubmission';
import Repository from '../model/Repository';
import Run from '../model/Run';
import Task from '../model/Task';
import UserError from '../model/UserError';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelRunIdPost operation.
     * @callback module:api/DefaultApi~cancelRunIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel by Run ID
     * Cancel the run by ID; this will actually trickle back and cancel the whole task, since it can no longer succeed in any way. Please keep in mind to stop runs, runners must implement a cancel poller. 
     * @param {Number} runId The ID of the run to retrieve
     * @param {module:api/DefaultApi~cancelRunIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelRunIdPost(runId, callback) {
      let postBody = null;
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling cancelRunIdPost");
      }

      let pathParams = {
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cancel/{run_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the capabilitiesUsernameCapabilityDelete operation.
     * @callback module:api/DefaultApi~capabilitiesUsernameCapabilityDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a named capability
     * Remove a named capability from a provided user ID. Requires the user have the 'modify:user' capability.
     * @param {String} username The user ID to remove the capability from. 
     * @param {String} capability The name of the capability to remove. 
     * @param {module:api/DefaultApi~capabilitiesUsernameCapabilityDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    capabilitiesUsernameCapabilityDelete(username, capability, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling capabilitiesUsernameCapabilityDelete");
      }
      // verify the required parameter 'capability' is set
      if (capability === undefined || capability === null) {
        throw new Error("Missing the required parameter 'capability' when calling capabilitiesUsernameCapabilityDelete");
      }

      let pathParams = {
        'username': username,
        'capability': capability
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/capabilities/{username}/{capability}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the capabilitiesUsernameCapabilityPost operation.
     * @callback module:api/DefaultApi~capabilitiesUsernameCapabilityPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a named capability
     * Add a named capability for a provided user ID. Requires the user have the 'modify:user' capability.
     * @param {String} username The user ID to add the capability to. 
     * @param {String} capability The name of the capability to add. 
     * @param {module:api/DefaultApi~capabilitiesUsernameCapabilityPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    capabilitiesUsernameCapabilityPost(username, capability, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling capabilitiesUsernameCapabilityPost");
      }
      // verify the required parameter 'capability' is set
      if (capability === undefined || capability === null) {
        throw new Error("Missing the required parameter 'capability' when calling capabilitiesUsernameCapabilityPost");
      }

      let pathParams = {
        'username': username,
        'capability': capability
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/capabilities/{username}/{capability}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsGet operation.
     * @callback module:api/DefaultApi~errorsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserError>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve errors
     * Server retrieves any errors the last call(s) have set for you.
     * @param {module:api/DefaultApi~errorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserError>}
     */
    errorsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserError];
      return this.apiClient.callApi(
        '/errors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logAttachIdGet operation.
     * @callback module:api/DefaultApi~logAttachIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach to a running log
     * For a given ID, find the log and if it is running, attach to it and start receiving the latest content from it. 
     * @param {Number} id The ID of the run to retrieve the log for.
     * @param {module:api/DefaultApi~logAttachIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logAttachIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logAttachIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/log/attach/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loggedinGet operation.
     * @callback module:api/DefaultApi~loggedinGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check logged in state
     * Validate the logged-in status of the user. Validates the session cookie against the internal database. If the user is logged in, a JSON string of \"true\" will be sent; otherwise an oauth redirect url will be passed for calling out to by the client. 
     * @param {module:api/DefaultApi~loggedinGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    loggedinGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/loggedin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginGet operation.
     * @callback module:api/DefaultApi~loginGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log into the system
     * Handle the server side of the oauth challenge. It is important to preserve the cookie jar after this call is made, as session cookies are used to manage many of the calls in this API. 
     * @param {String} code The code github sent back to us with the callback, we use it in the OAuth2 exchange to validate the request. 
     * @param {String} state The state (randomized string) we sent with the original link; this is echoed back to us so we can further identify the user. 
     * @param {module:api/DefaultApi~loginGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginGet(code, state, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling loginGet");
      }
      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling loginGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code,
        'state': state
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUpgradeGet operation.
     * @callback module:api/DefaultApi~loginUpgradeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log into the system with upgraded permissions
     * This upgrades the permissions of the user (which requires confirmation from the OAuthing site) to allow repository access, so that additional permission to manipulate repositories and scan additional ones is available. 
     * @param {module:api/DefaultApi~loginUpgradeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginUpgradeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/login/upgrade', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutGet operation.
     * @callback module:api/DefaultApi~logoutGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log out of the system
     * Conveniently clears session cookies. You will need to login again. Does not clear oauth tokens. 
     * @param {module:api/DefaultApi~logoutGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logoutGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesCiAddOwnerRepoGet operation.
     * @callback module:api/DefaultApi~repositoriesCiAddOwnerRepoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a specific repository to CI.
     * Generates a hook secret and populates the user's repository with it and the hook URL. Returns 200 on success, 500 + error message on failure, or if the repository has already been added to CI. 
     * @param {String} owner owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo' 
     * @param {String} repo name of the repository, the second half of the github repository name such as 'foo' in 'erikh/foo'. 
     * @param {module:api/DefaultApi~repositoriesCiAddOwnerRepoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesCiAddOwnerRepoGet(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repositoriesCiAddOwnerRepoGet");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repositoriesCiAddOwnerRepoGet");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/ci/add/{owner}/{repo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesCiDelOwnerRepoGet operation.
     * @callback module:api/DefaultApi~repositoriesCiDelOwnerRepoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a specific repository from CI.
     * Will fail if not added to CI already; does not currently clear the hook. 
     * @param {String} owner owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo' 
     * @param {String} repo name of the repository, the second half of the github repository name such as 'foo' in 'erikh/foo'. 
     * @param {module:api/DefaultApi~repositoriesCiDelOwnerRepoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesCiDelOwnerRepoGet(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repositoriesCiDelOwnerRepoGet");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repositoriesCiDelOwnerRepoGet");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/ci/del/{owner}/{repo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesMyGet operation.
     * @callback module:api/DefaultApi~repositoriesMyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all the writable repositories for the user.
     * Returns a types.RepositoryList for all the repos a user has write access to.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search search string by which to filter results
     * @param {module:api/DefaultApi~repositoriesMyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Repository>}
     */
    repositoriesMyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Repository];
      return this.apiClient.callApi(
        '/repositories/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesScanGet operation.
     * @callback module:api/DefaultApi~repositoriesScanGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan repositories from the remote resource
     * Reads the repositories list from the API resource, e.g., Github.
     * @param {module:api/DefaultApi~repositoriesScanGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesScanGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/scan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesSubAddOwnerRepoGet operation.
     * @callback module:api/DefaultApi~repositoriesSubAddOwnerRepoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to a repository running CI
     * Subscribing makes that repo's queue items appear in your home view. Returns 200 on success, 500 + error on failure. 
     * @param {String} owner owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo' 
     * @param {String} repo owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo' 
     * @param {module:api/DefaultApi~repositoriesSubAddOwnerRepoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesSubAddOwnerRepoGet(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repositoriesSubAddOwnerRepoGet");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repositoriesSubAddOwnerRepoGet");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/sub/add/{owner}/{repo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesSubDelOwnerRepoGet operation.
     * @callback module:api/DefaultApi~repositoriesSubDelOwnerRepoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe from a repository
     * Unsubscribing removes any existing subscription. Either way, if nothing broke, it returns 200. Otherwise it returns 500 and the error. 
     * @param {String} owner owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo' 
     * @param {String} repo owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo' 
     * @param {module:api/DefaultApi~repositoriesSubDelOwnerRepoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesSubDelOwnerRepoGet(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repositoriesSubDelOwnerRepoGet");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repositoriesSubDelOwnerRepoGet");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/sub/del/{owner}/{repo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesSubscribedGet operation.
     * @callback module:api/DefaultApi~repositoriesSubscribedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all subscribed repositories
     * Returns a types.RepositoryList of all the repos the user is subscribed to.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search search string by which to filter results
     * @param {module:api/DefaultApi~repositoriesSubscribedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Repository>}
     */
    repositoriesSubscribedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Repository];
      return this.apiClient.callApi(
        '/repositories/subscribed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesVisibleGet operation.
     * @callback module:api/DefaultApi~repositoriesVisibleGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all the repositories the user can view.
     * Returns a types.RepositoryList for all the repos a user has view access to.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search search string by which to filter results
     * @param {module:api/DefaultApi~repositoriesVisibleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Repository>}
     */
    repositoriesVisibleGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Repository];
      return this.apiClient.callApi(
        '/repositories/visible', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runRunIdGet operation.
     * @callback module:api/DefaultApi~runRunIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a run by ID
     * Retrieve a Run by ID; this will return the full Run object including all relationships.
     * @param {Number} runId The ID of the run to retrieve
     * @param {module:api/DefaultApi~runRunIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Run}
     */
    runRunIdGet(runId, callback) {
      let postBody = null;
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling runRunIdGet");
      }

      let pathParams = {
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Run;
      return this.apiClient.callApi(
        '/run/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runsCountGet operation.
     * @callback module:api/DefaultApi~runsCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count the runs
     * Count the runs, optionally filtering by repository or repository+SHA. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.repository 
     * @param {String} opts.sha 
     * @param {module:api/DefaultApi~runsCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    runsCountGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'repository': opts['repository'],
        'sha': opts['sha']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/runs/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runsGet operation.
     * @callback module:api/DefaultApi~runsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Run>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain the run list for the user
     * List all the runs, optionally filtering by repository or repository+SHA. Pagination controls are available. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page pagination control: what page to retrieve in the query. (default to 0)
     * @param {Number} opts.perPage pagination control: how many items counts as a page. (default to 100)
     * @param {String} opts.repository optional; the repository name to get the tasks for.
     * @param {String} opts.sha optional; the sha to get the tasks for.
     * @param {module:api/DefaultApi~runsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Run>}
     */
    runsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage'],
        'repository': opts['repository'],
        'sha': opts['sha']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Run];
      return this.apiClient.callApi(
        '/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submissionIdGet operation.
     * @callback module:api/DefaultApi~submissionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a submission by ID
     * Retrieve a Submission by ID; this will return the full Submission object including all relationships.
     * @param {Number} id The ID of the submission to retrieve
     * @param {module:api/DefaultApi~submissionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelSubmission}
     */
    submissionIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submissionIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ModelSubmission;
      return this.apiClient.callApi(
        '/submission/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submissionIdTasksGet operation.
     * @callback module:api/DefaultApi~submissionIdTasksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Task>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get submission tasks by ID
     * Retrieve a Submission's tasks by ID; this will return the list of tasks with pagination.
     * @param {Number} id The ID of the submission to retrieve
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page pagination control: what page to retrieve in the query. (default to 0)
     * @param {Number} opts.perPage pagination control: how many items counts as a page. (default to 100)
     * @param {module:api/DefaultApi~submissionIdTasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Task>}
     */
    submissionIdTasksGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submissionIdTasksGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Task];
      return this.apiClient.callApi(
        '/submission/{id}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submissionsCountGet operation.
     * @callback module:api/DefaultApi~submissionsCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count submisssions
     * Retrieve a count of Submissions that match the filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.repository the repository owner/repo to be viewed.
     * @param {String} opts.sha the sha or branch to be viewed.
     * @param {module:api/DefaultApi~submissionsCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    submissionsCountGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'repository': opts['repository'],
        'sha': opts['sha']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/submissions/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submissionsGet operation.
     * @callback module:api/DefaultApi~submissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelSubmission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List submisssions
     * Retrieve a list of Submissions; this will return the full Submission object including all relationships.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page pagination control: what page to retrieve in the query. (default to 0)
     * @param {Number} opts.perPage pagination control: how many items counts as a page. (default to 100)
     * @param {String} opts.repository the repository owner/repo to be viewed.
     * @param {String} opts.sha the sha or branch to be viewed.
     * @param {module:api/DefaultApi~submissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelSubmission>}
     */
    submissionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage'],
        'repository': opts['repository'],
        'sha': opts['sha']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ModelSubmission];
      return this.apiClient.callApi(
        '/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitGet operation.
     * @callback module:api/DefaultApi~submitGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a manual submission to tinyCI
     * This allows a user to push a job instead of pushing to git or filing a pull request to trigger a job. It is available on the tinyCI UI and CLI client. 
     * @param {String} repository the repository owner/repo to be tested.
     * @param {String} sha the sha or branch to be tested
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.all Run all tests instead of relying on diff selection to pick them.
     * @param {module:api/DefaultApi~submitGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitGet(repository, sha, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling submitGet");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling submitGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'repository': repository,
        'sha': sha,
        'all': opts['all']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/submit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksCancelIdPost operation.
     * @callback module:api/DefaultApi~tasksCancelIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel by Task ID
     * Cancel the runs for a task by ID 
     * @param {Number} id The ID of the task to retrieve
     * @param {module:api/DefaultApi~tasksCancelIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tasksCancelIdPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tasksCancelIdPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/cancel/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksCountGet operation.
     * @callback module:api/DefaultApi~tasksCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count the Tasks
     * Perform a full count of tasks that meet the filter criteria (which can be no filter) and return it as integer. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.repository optional; repository for filtering
     * @param {String} opts.sha optional; sha for filtering
     * @param {module:api/DefaultApi~tasksCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    tasksCountGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'repository': opts['repository'],
        'sha': opts['sha']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/tasks/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksGet operation.
     * @callback module:api/DefaultApi~tasksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Task>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain the task list optionally filtering by repository and sha.
     * The tasks list returns a list of Task objects that correspond to the query. Each query may contain pagination or filtering rules to limit its contents. It is strongly recommended to look at the \"count\" equivalents for these endpoints so that you can implement pagination more simply. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page pagination control: what page to retrieve in the query. (default to 0)
     * @param {Number} opts.perPage pagination control: how many items counts as a page. (default to 100)
     * @param {String} opts.repository optional; the repository name to get the tasks for.
     * @param {String} opts.sha optional; the sha to get the tasks for.
     * @param {module:api/DefaultApi~tasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Task>}
     */
    tasksGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage'],
        'repository': opts['repository'],
        'sha': opts['sha']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Task];
      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksRunsIdCountGet operation.
     * @callback module:api/DefaultApi~tasksRunsIdCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count the runs corresponding to the task ID.
     * Get the count of runs that correspond to the task ID. Returns an integer. 
     * @param {Number} id the ID of the Task.
     * @param {module:api/DefaultApi~tasksRunsIdCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    tasksRunsIdCountGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tasksRunsIdCountGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/tasks/runs/{id}/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksRunsIdGet operation.
     * @callback module:api/DefaultApi~tasksRunsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Run>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain the run list based on the task ID.
     * The queue list only contains: * stuff * other junk 
     * @param {Number} id the ID of the Task
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page pagination control: what page to retrieve in the query. (default to 0)
     * @param {Number} opts.perPage pagination control: how many items counts as a page. (default to 100)
     * @param {module:api/DefaultApi~tasksRunsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Run>}
     */
    tasksRunsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tasksRunsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Run];
      return this.apiClient.callApi(
        '/tasks/runs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksSubscribedGet operation.
     * @callback module:api/DefaultApi~tasksSubscribedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Task>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain the list of tasks that belong to repositories you are subscribed to.
     * This call implements basic pagination over the entire task corpus that intersects with your subscription list. It returns a list of tasks. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page pagination control: what page to retrieve in the query. (default to 0)
     * @param {Number} opts.perPage pagination control: how many items counts as a page. (default to 100)
     * @param {module:api/DefaultApi~tasksSubscribedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Task>}
     */
    tasksSubscribedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Task];
      return this.apiClient.callApi(
        '/tasks/subscribed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenDelete operation.
     * @callback module:api/DefaultApi~tokenDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove and reset your tinyCI access token
     * The next GET /token will create a new one. This will just remove it. 
     * @param {module:api/DefaultApi~tokenDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tokenDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/token', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenGet operation.
     * @callback module:api/DefaultApi~tokenGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a tinyCI access token
     * This will allow you unfettered access to the system as your user that you request the token with. 
     * @param {module:api/DefaultApi~tokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    tokenGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPropertiesGet operation.
     * @callback module:api/DefaultApi~userPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about the current user
     * Get information about the current user, such as the username. 
     * @param {module:api/DefaultApi~userPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    userPropertiesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session', 'token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/user/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
