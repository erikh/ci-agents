// tslint:disable
/**
 * uisvc
 * API for the user interface service; the service that is directly responsible for presenting data to users. This service typically runs at the border, and leverages session cookies or authentication tokens that we generate for users. It also is responsible for handling the act of oauth and user creation through its login hooks. uisvc typically talks to the datasvc and other services to accomplish its goal, it does not save anything locally or carry state. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RepoConfig,
    RepoConfigFromJSON,
    RepoConfigToJSON,
    RunSettings,
    RunSettingsFromJSON,
    RunSettingsToJSON,
} from './';

/**
 * 
 * @export
 * @interface TaskSettings
 */
export interface TaskSettings {
    /**
     * 
     * @type {string}
     * @memberof TaskSettings
     */
    mountpoint?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskSettings
     */
    workdir?: string;
    /**
     * 
     * @type {{ [key: string]: RunSettings; }}
     * @memberof TaskSettings
     */
    runs?: { [key: string]: RunSettings; };
    /**
     * the default timeout; in nanoseconds
     * @type {number}
     * @memberof TaskSettings
     */
    defaultTimeout?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskSettings
     */
    defaultQueue?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskSettings
     */
    defaultImage?: string;
    /**
     * 
     * @type {object}
     * @memberof TaskSettings
     */
    metadata?: object;
    /**
     * 
     * @type {RepoConfig}
     * @memberof TaskSettings
     */
    config?: RepoConfig;
    /**
     * 
     * @type {Array<string>}
     * @memberof TaskSettings
     */
    env?: Array<string>;
}

export function TaskSettingsFromJSON(json: any): TaskSettings {
    return {
        'mountpoint': !exists(json, 'mountpoint') ? undefined : json['mountpoint'],
        'workdir': !exists(json, 'workdir') ? undefined : json['workdir'],
        'runs': !exists(json, 'runs') ? undefined : mapValues(json['runs'], RunSettingsFromJSON),
        'defaultTimeout': !exists(json, 'default_timeout') ? undefined : json['default_timeout'],
        'defaultQueue': !exists(json, 'default_queue') ? undefined : json['default_queue'],
        'defaultImage': !exists(json, 'default_image') ? undefined : json['default_image'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'config': !exists(json, 'config') ? undefined : RepoConfigFromJSON(json['config']),
        'env': !exists(json, 'env') ? undefined : json['env'],
    };
}

export function TaskSettingsToJSON(value?: TaskSettings): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'mountpoint': value.mountpoint,
        'workdir': value.workdir,
        'runs': value.runs === undefined ? undefined : mapValues(value.runs, RunSettingsToJSON),
        'default_timeout': value.defaultTimeout,
        'default_queue': value.defaultQueue,
        'default_image': value.defaultImage,
        'metadata': value.metadata,
        'config': RepoConfigToJSON(value.config),
        'env': value.env,
    };
}


