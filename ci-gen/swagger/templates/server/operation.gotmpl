// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
  "context"
  "net/http"
  "strings"
  "fmt"

  "github.com/tinyci/ci-agents/errors"
  "github.com/tinyci/ci-agents/handlers"
  "github.com/tinyci/ci-agents/clients/log"

  "github.com/gin-gonic/gin"
  "github.com/google/uuid"

  {{ range .DefaultImports }}{{ printf "%q" . }}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

// {{pascalize .Name }} swagger:route {{ .Method }} {{ .Path }}{{ range .Tags }} {{ . }}{{ end }} {{ camelize .Name }}
// {{ if .Summary }}{{ comment .Summary }}{{ end }}
{{ if .Description }}// {{ comment .Description }}{{ end }}
func {{ .Name }}(h *handlers.H, ctx *gin.Context, processingHandler handlers.HandlerFunc) *errors.Error {
  if h.RequestLogging {
    start := time.Now()
    u := uuid.New()

    content, jsonErr := json.Marshal(ctx.Params)
    if jsonErr != nil { 
      h.Clients.Log.Error(ctx.Request.Context(), errors.New(jsonErr).Wrap("encoding params for log message"))
    }

    logger := h.Clients.Log.WithRequest(ctx.Request).WithFields(log.FieldMap{
      "params": string(content),
      "request_uuid": u.String(),
    })

    user, err := h.GetGithub(ctx)
    if err == nil {
      logger = logger.WithUser(user)
    }

    logger.Debug(ctx.Request.Context(), "incoming request")

    defer func() {
      logger.WithFields(log.FieldMap{
        "duration": time.Since(start).String(),
      }).Debug(ctx.Request.Context(), "request completed")
    }()
  }

  if err := {{ .Name }}ValidateURLParams(h, ctx); err != nil {
    return errors.New(err)
  }

  if processingHandler == nil {
    return errors.New("'{{ .Path }}': no processor defined")
  }

  resp, code, err := processingHandler(h, ctx)
  return {{ .Name }}Response(h, ctx, resp, code, err)
}
