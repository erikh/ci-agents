package main

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/tinyci/ci-agents/config"
	"github.com/tinyci/ci-agents/errors"
  "github.com/tinyci/ci-agents/handlers"
	transport "github.com/erikh/go-transport"
	"github.com/urfave/cli"

  {{ range .DefaultImports}}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

// Version of API service
const Version = {{ printf "%q" .Info.Version }}

// TinyCIVersion is the global version of tinyCI
var TinyCIVersion = "" // to be changed by build processes

func main() {
	app := cli.NewApp()
  app.Name = {{ printf "%q" .Info.Title }}
	app.Description = {{ printf "%q" .Info.Description }}
	app.Action = serve
  app.Version = fmt.Sprintf("%s (tinyCI version %s)", Version, TinyCIVersion)

	app.Flags = []cli.Flag{
		cli.StringFlag{
			Name:  "config, c",
			Usage: "Path to configuration file",
			Value: ".config/services.yaml",
		},
	}

	if err := app.Run(os.Args); err != nil {
    if e, ok := err.(*errors.Error); ok && e == nil {
      return
    }
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

func serve(ctx *cli.Context) error {
	h := &handlers.H{}
	if err := config.Parse(ctx.String("config"), &h); err != nil {
		return err
	}

  h.Config = restapi.MakeHandlerConfig(h.ServiceConfig)

	finished := make(chan struct{})
	doneChan, err := handlers.Boot(nil, h, finished)
	if err != nil {
		return err
	}

	sigChan := make(chan os.Signal, 2)
	go func() {
		<-sigChan
		close(doneChan)
		<-finished
		os.Exit(0)
	}()
	signal.Notify(sigChan, syscall.SIGTERM, syscall.SIGINT)

	select {}
}
