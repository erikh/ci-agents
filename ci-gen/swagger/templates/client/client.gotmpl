package operations

import (
	"encoding/json"
	"net/http"
	"net/http/cookiejar"
	"net/url"
  "io"
  "time"
  "golang.org/x/net/websocket"

  "github.com/tinyci/ci-agents/errors"
  "github.com/tinyci/ci-agents/clients/jsonbuffer"
	transport "github.com/erikh/go-transport"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

// Client is the base client struct.
type Client struct {
  token  string
	client *http.Client
	url    *url.URL
}

// New creates a new *Client. Passing a cert will enable client/server
// certificate authentication; otherwise pass nil for no auth.
func New(baseURL string, token string, cert *transport.Cert) (*Client, *errors.Error) {
  t, err := transport.NewHTTP(cert)
  if err != nil {
    return nil, errors.New(err)
  }

	u, err := url.Parse(baseURL)
	if err != nil {
		return nil, errors.New(err)
	}

	client := t.Client(&http.Transport{IdleConnTimeout: 15*time.Second, MaxIdleConns: 10})
	return &Client{url: u, client: client, token: token}, nil
}

// SetJar overwrites the cookie jar for the underlying HTTP client.
func (c *Client) SetJar(jar *cookiejar.Jar) {
  c.client.Jar = jar
}

// MarshalCookies will marshal any existing cookies to the byte array.
func (c *Client) MarshalCookies() ([]byte, error) {
	return json.Marshal(c.client.Jar.Cookies(c.url))
}

// UnmarshalCookies loads cookies into the given client.
func (c *Client) UnmarshalCookies(content []byte) error {
	cookies := []*http.Cookie{}
	if err := json.Unmarshal(content, &cookies); err != nil {
		return err
	}

	c.client.Jar.SetCookies(c.url, cookies)
	return nil
}

{{ range $op := .Operations }}
// {{ pascalize .Name }} {{ humanize .Summary }}
func (c *Client) {{ pascalize .Name }}(ctx context.Context {{- range $param := .Params -}}, {{ varname $param.Name }} {{ $param.GoType }}{{ end -}}{{- if index .Extensions "x-websocket" }}{{- if eq (index .Extensions "x-websocket") "write" }},r io.Reader{{ else }},w io.WriteCloser{{ end }}{{ end }}) (
{{- if .SuccessResponse }}
{{- if .SuccessResponse.Schema }}
{{- if .SuccessResponse.Schema.IsNullable }}*{{ .SuccessResponse.Schema.GoType }},
{{- else }}
{{- .SuccessResponse.Schema.GoType }},
{{- end }}
{{- end }}
{{- end }}*errors.Error) {
  route := {{ printf "%q" .Path }}

  {{- range $param := .Params }}
  {{ if $param.IsPathParam }}route = strings.Replace(route, {{ printf "%q" (print "{" $param.Name "}") }}, url.PathEscape(fmt.Sprintf("%v", {{ varname $param.Name }})), -1){{ end }}
  {{ end }}

  tmp := *c.url
  u := &tmp
  u.Path += route

  m := map[string]interface{}{}

  {{- range $param := .Params }} 
  {{ if $param.IsQueryParam }}m[{{ printf "%q" $param.Name }}] = {{ varname $param.Name }}{{ end }}
  {{ end }}

  if len(m) > 0 {
    q := u.Query()

    for key, value := range m {
      q.Add(key, fmt.Sprintf("%v", value))
    }

    u.RawQuery = q.Encode()
  }


  {{ if index .Extensions "x-websocket" }}
  if u.Scheme == "https" {
    u.Scheme = "wss"
  } else {
    u.Scheme = "ws"
  }

  conn, err := websocket.Dial(u.String(), "", "http://localhost")
  if err != nil {
    return {{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}{{ if .SuccessResponse.Schema.IsNullable }}nil,{{ else }}{{ .SuccessResponse.Schema.Zero }},{{ end }}{{ end }}{{ end }} errors.New(err)
  }

  {{- if eq (index .Extensions "x-websocket") "read" }}
  if _, err := io.Copy(w, jsonbuffer.NewWrapper(conn)); err != nil {
    return errors.New(err)
  }
  {{ else }}
  if _, err := io.Copy(jsonbuffer.NewWrapper(conn), r); err != nil {
    return errors.New(err)
  }
  {{ end }}

  if err := conn.Close(); err != nil {
    return errors.New(err)
  }

  return nil

  {{ else }}

  var body []byte

  {{ if eq .Method "POST" }}
  postForm := url.Values{}
  {{ range $param := .Params }}
  {{ if $param.IsFormParam }}
  {{ if eq $param.GoType "string" }}
  postForm.Add({{ printf "%q" $param.Name }}, {{ varname $param.Name }})
  {{ else }}
  if content, err := json.Marshal({{ varname $param.Name }}); err != nil {
    return {{ if index .Extensions "x-websocket" }}nil, nil,{{ else if $op.SuccessResponse }}{{ if $op.SuccessResponse.Schema }}{{ if $op.SuccessResponse.Schema.IsNullable }}nil,{{ else }}{{ $op.SuccessResponse.Schema.Zero }},{{ end }}{{ end }}{{ end }} errors.New(err)
  } else {
    postForm.Add({{ printf "%q" $param.Name }}, string(content))
  }
  {{ end -}}
  {{ end -}}
  {{ end -}}

  body = []byte(postForm.Encode())

  {{ else -}}
  {{- range $param := .Params }}
  {{ if $param.IsBodyParam -}}
  body, err = json.Marshal({{ varname $param.Name }})
  if err != nil {
    return {{ if index $op.Extensions "x-websocket" }}nil, nil,{{ else if $op.SuccessResponse }}{{ if $op.SuccessResponse.Schema }}{{ if $op.SuccessResponse.Schema.IsNullable }}nil,{{ else }}{{ $op.SuccessResponse.Schema.Zero }},{{ end }}{{ end }}{{ end }} errors.New(err)
  }
  {{ end -}}
  {{ end }}
  {{ end }}

  req, err := http.NewRequest({{ printf "%q" .Method }}, u.String(), bytes.NewBuffer(body))
  if err != nil {
    return {{ if index .Extensions "x-websocket" }}nil, nil,{{ else if .SuccessResponse }}{{ if .SuccessResponse.Schema }}{{ if .SuccessResponse.Schema.IsNullable }}nil,{{ else }}{{ .SuccessResponse.Schema.Zero }},{{ end }}{{ end }}{{ end }} errors.New(err)
  }

  req.Header.Add("Authorization", c.token)

  {{ if eq .Method "POST" }}
	req.Header.Set("Content-type", "application/x-www-form-urlencoded")
  {{ end -}}

  resp, err := c.client.Do(req.WithContext(ctx))
  if err != nil {
    return {{ if index .Extensions "x-websocket" }}nil, nil,{{ else if .SuccessResponse }}{{ if .SuccessResponse.Schema }}{{ if .SuccessResponse.Schema.IsNullable }}nil,{{ else }}{{ .SuccessResponse.Schema.Zero }},{{ end }}{{ end }}{{ end }} errors.New(err)
  }

  if resp.StatusCode == 500 {
    origErr := &errors.Error{}

    if err := json.NewDecoder(resp.Body).Decode(origErr); err != nil {
      return {{ if index .Extensions "x-websocket" }}nil, nil,{{ else if .SuccessResponse }}{{ if .SuccessResponse.Schema }}{{ if .SuccessResponse.Schema.IsNullable }}nil,{{ else }}{{ .SuccessResponse.Schema.Zero }},{{ end }}{{ end }}{{ end }} errors.New(err)
    }

    return {{ if index .Extensions "x-websocket" }}nil, nil,{{ else if .SuccessResponse }}{{ if .SuccessResponse.Schema }}{{ if .SuccessResponse.Schema.IsNullable }}nil,{{ else }}{{ .SuccessResponse.Schema.Zero }},{{ end }}{{ end }}{{ end }} origErr
  }

  defer resp.Body.Close()

  {{ if .SuccessResponse }}
  {{ if .SuccessResponse.Schema }}
  var result {{ .SuccessResponse.Schema.GoType }}

  if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
    return {{ if .SuccessResponse.Schema.IsNullable }}nil{{ else }}{{ .SuccessResponse.Schema.Zero }}{{ end }}, errors.New(err)
  }

  return {{ if .SuccessResponse.Schema.IsNullable }}&{{ end }}result, nil
  {{ else }}
  return nil
  {{ end }}
  {{ else }}
  return {{ if index .Extensions "x-websocket" }}nil, nil,{{ end }} nil
  {{ end }}
  {{ end }}
}
{{ end }}
