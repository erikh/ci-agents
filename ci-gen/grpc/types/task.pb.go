// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.14.0
// source: github.com/tinyci/ci-agents/ci-gen/grpc/types/task.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RepoConfig corresponds to the tinyci.yml file at the root of the repository.
// It is only read from the default branch during submissions, but its
// inclusion into the structs is necessary to evaluate them by runners at
// times, or in more advanced validation scenarios against task.yml.
type RepoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowPrivileged   bool              `protobuf:"varint,1,opt,name=allow_privileged,json=allowPrivileged,proto3" json:"allow_privileged,omitempty"`                                                   // allow privileged runs in this repository?
	Workdir           string            `protobuf:"bytes,2,opt,name=workdir,proto3" json:"workdir,omitempty"`                                                                                           // global workdir
	Queue             string            `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`                                                                                               // queue name
	OverrideQueue     bool              `protobuf:"varint,4,opt,name=override_queue,json=overrideQueue,proto3" json:"override_queue,omitempty"`                                                         // override queue settings?
	GlobalTimeout     int64             `protobuf:"varint,5,opt,name=global_timeout,json=globalTimeout,proto3" json:"global_timeout,omitempty"`                                                         // timeout for all unspecified runs
	OverrideTimeout   bool              `protobuf:"varint,6,opt,name=override_timeout,json=overrideTimeout,proto3" json:"override_timeout,omitempty"`                                                   // override timeout with the global timeout?
	IgnoreDirectories []string          `protobuf:"bytes,7,rep,name=ignore_directories,json=ignoreDirectories,proto3" json:"ignore_directories,omitempty"`                                              // directories to ignore
	Metadata          map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // metadata to populate in each run
	OverrideMetadata  bool              `protobuf:"varint,9,opt,name=override_metadata,json=overrideMetadata,proto3" json:"override_metadata,omitempty"`                                                // override metadata?
	DefaultImage      string            `protobuf:"bytes,10,opt,name=default_image,json=defaultImage,proto3" json:"default_image,omitempty"`                                                            // use this image as the default
	DefaultResources  *Resources        `protobuf:"bytes,11,opt,name=default_resources,json=defaultResources,proto3" json:"default_resources,omitempty"`                                                // default resources to consume
	MergeOptions      *Merge            `protobuf:"bytes,12,opt,name=merge_options,json=mergeOptions,proto3" json:"merge_options,omitempty"`                                                            // merge options
}

func (x *RepoConfig) Reset() {
	*x = RepoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoConfig) ProtoMessage() {}

func (x *RepoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoConfig.ProtoReflect.Descriptor instead.
func (*RepoConfig) Descriptor() ([]byte, []int) {
	return file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescGZIP(), []int{0}
}

func (x *RepoConfig) GetAllowPrivileged() bool {
	if x != nil {
		return x.AllowPrivileged
	}
	return false
}

func (x *RepoConfig) GetWorkdir() string {
	if x != nil {
		return x.Workdir
	}
	return ""
}

func (x *RepoConfig) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *RepoConfig) GetOverrideQueue() bool {
	if x != nil {
		return x.OverrideQueue
	}
	return false
}

func (x *RepoConfig) GetGlobalTimeout() int64 {
	if x != nil {
		return x.GlobalTimeout
	}
	return 0
}

func (x *RepoConfig) GetOverrideTimeout() bool {
	if x != nil {
		return x.OverrideTimeout
	}
	return false
}

func (x *RepoConfig) GetIgnoreDirectories() []string {
	if x != nil {
		return x.IgnoreDirectories
	}
	return nil
}

func (x *RepoConfig) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RepoConfig) GetOverrideMetadata() bool {
	if x != nil {
		return x.OverrideMetadata
	}
	return false
}

func (x *RepoConfig) GetDefaultImage() string {
	if x != nil {
		return x.DefaultImage
	}
	return ""
}

func (x *RepoConfig) GetDefaultResources() *Resources {
	if x != nil {
		return x.DefaultResources
	}
	return nil
}

func (x *RepoConfig) GetMergeOptions() *Merge {
	if x != nil {
		return x.MergeOptions
	}
	return nil
}

// Task corresponds to directories within the tree that have a `task.yml`
// placed in them. Each task is decomposed into runs, and this record is
// created indicating the group of them, as well as properties they share.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the task
	// XXX Fields that are no longer used
	// types.Repository          parent        = 2; // Parent Repository
	// types.Ref                 ref           = 3; // Associated Ref to be tested
	// string                    baseSHA       = 4; // BaseSHA for diff
	PullRequestID int64                  `protobuf:"varint,5,opt,name=pullRequestID,proto3" json:"pullRequestID,omitempty"` // A pull request ID for PR events; 0 otherwise
	Canceled      bool                   `protobuf:"varint,6,opt,name=canceled,proto3" json:"canceled,omitempty"`           // Was the run canceled?
	FinishedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=finishedAt,proto3" json:"finishedAt,omitempty"`        // When did it finish?
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`          // When was it created?
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=startedAt,proto3" json:"startedAt,omitempty"`          // When did it start
	Status        bool                   `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`              // What is the status?
	StatusSet     bool                   `protobuf:"varint,11,opt,name=statusSet,proto3" json:"statusSet,omitempty"`        // Is the status valid?
	Settings      *TaskSettings          `protobuf:"bytes,12,opt,name=settings,proto3" json:"settings,omitempty"`           // TaskSettings associated with the task (parsed task.yml)
	Path          string                 `protobuf:"bytes,13,opt,name=path,proto3" json:"path,omitempty"`                   // dirname of the task.yml
	Runs          int64                  `protobuf:"varint,14,opt,name=runs,proto3" json:"runs,omitempty"`                  // count of runs for this task
	Submission    *Submission            `protobuf:"bytes,15,opt,name=submission,proto3" json:"submission,omitempty"`       // submission associated with the run
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Task) GetPullRequestID() int64 {
	if x != nil {
		return x.PullRequestID
	}
	return 0
}

func (x *Task) GetCanceled() bool {
	if x != nil {
		return x.Canceled
	}
	return false
}

func (x *Task) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *Task) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Task) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Task) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Task) GetStatusSet() bool {
	if x != nil {
		return x.StatusSet
	}
	return false
}

func (x *Task) GetSettings() *TaskSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Task) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Task) GetRuns() int64 {
	if x != nil {
		return x.Runs
	}
	return 0
}

func (x *Task) GetSubmission() *Submission {
	if x != nil {
		return x.Submission
	}
	return nil
}

// TaskSettings is the parsed representation to struct of task.yml files.
type TaskSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mountpoint     string                  `protobuf:"bytes,1,opt,name=mountpoint,proto3" json:"mountpoint,omitempty"`                                                                             // Mountpoint to use for the source code inside the container
	Env            []string                `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty"`                                                                                           // Environment variables -- in environ syntax.
	Workdir        string                  `protobuf:"bytes,3,opt,name=workdir,proto3" json:"workdir,omitempty"`                                                                                   // Working dir inside the container; defaults to mountpoint
	Runs           map[string]*RunSettings `protobuf:"bytes,4,rep,name=runs,proto3" json:"runs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Map of run name -> run settings, used for defining runs to create
	DefaultTimeout int64                   `protobuf:"varint,5,opt,name=defaultTimeout,proto3" json:"defaultTimeout,omitempty"`                                                                    // Default Timeout if none is specified
	DefaultQueue   string                  `protobuf:"bytes,6,opt,name=defaultQueue,proto3" json:"defaultQueue,omitempty"`                                                                         // Default Queue is none is specified; otherwise this is 'default'
	DefaultImage   string                  `protobuf:"bytes,7,opt,name=defaultImage,proto3" json:"defaultImage,omitempty"`                                                                         // Default Image to use in runs.
	Metadata       *structpb.Struct        `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                 // Free-form metadata to be returned to runners.
	Dependencies   []string                `protobuf:"bytes,9,rep,name=dependencies,proto3" json:"dependencies,omitempty"`                                                                         // Dependency list.
	Resources      *Resources              `protobuf:"bytes,10,opt,name=resources,proto3" json:"resources,omitempty"`                                                                              // Resources to constrain all runs of this task.
	Config         *RepoConfig             `protobuf:"bytes,11,opt,name=config,proto3" json:"config,omitempty"`                                                                                    // Repository configuration parsed from `tinyci.yml`.
}

func (x *TaskSettings) Reset() {
	*x = TaskSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSettings) ProtoMessage() {}

func (x *TaskSettings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSettings.ProtoReflect.Descriptor instead.
func (*TaskSettings) Descriptor() ([]byte, []int) {
	return file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescGZIP(), []int{2}
}

func (x *TaskSettings) GetMountpoint() string {
	if x != nil {
		return x.Mountpoint
	}
	return ""
}

func (x *TaskSettings) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TaskSettings) GetWorkdir() string {
	if x != nil {
		return x.Workdir
	}
	return ""
}

func (x *TaskSettings) GetRuns() map[string]*RunSettings {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *TaskSettings) GetDefaultTimeout() int64 {
	if x != nil {
		return x.DefaultTimeout
	}
	return 0
}

func (x *TaskSettings) GetDefaultQueue() string {
	if x != nil {
		return x.DefaultQueue
	}
	return ""
}

func (x *TaskSettings) GetDefaultImage() string {
	if x != nil {
		return x.DefaultImage
	}
	return ""
}

func (x *TaskSettings) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaskSettings) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *TaskSettings) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TaskSettings) GetConfig() *RepoConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// TaskList is simply a repeated list of tasks.
type TaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*Task `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"` // List of tasks
}

func (x *TaskList) Reset() {
	*x = TaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskList) ProtoMessage() {}

func (x *TaskList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskList.ProtoReflect.Descriptor instead.
func (*TaskList) Descriptor() ([]byte, []int) {
	return file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescGZIP(), []int{3}
}

func (x *TaskList) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// CancelPRRequest is used in CancelTasksByPR in the datasvc; can be used to
// cancel all runs for a PR.
type CancelPRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Repository string `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *CancelPRRequest) Reset() {
	*x = CancelPRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelPRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelPRRequest) ProtoMessage() {}

func (x *CancelPRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelPRRequest.ProtoReflect.Descriptor instead.
func (*CancelPRRequest) Descriptor() ([]byte, []int) {
	return file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescGZIP(), []int{4}
}

func (x *CancelPRRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CancelPRRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

type Merge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoNotMerge bool     `protobuf:"varint,1,opt,name=doNotMerge,proto3" json:"doNotMerge,omitempty"`                  // do not merge any branch
	IgnoreRefs []string `protobuf:"bytes,2,rep,name=ignore_refs,json=ignoreRefs,proto3" json:"ignore_refs,omitempty"` // do not merge these refs
}

func (x *Merge) Reset() {
	*x = Merge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Merge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Merge) ProtoMessage() {}

func (x *Merge) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Merge.ProtoReflect.Descriptor instead.
func (*Merge) Descriptor() ([]byte, []int) {
	return file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescGZIP(), []int{5}
}

func (x *Merge) GetDoNotMerge() bool {
	if x != nil {
		return x.DoNotMerge
	}
	return false
}

func (x *Merge) GetIgnoreRefs() []string {
	if x != nil {
		return x.IgnoreRefs
	}
	return nil
}

var File_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto protoreflect.FileDescriptor

var file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e,
	0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69,
	0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e,
	0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69,
	0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e,
	0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69,
	0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x72, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63,
	0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x04, 0x0a, 0x0a,
	0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x11,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x03, 0x0a, 0x04,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfe, 0x03, 0x0a, 0x0c, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f,
	0x72, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x4b, 0x0a, 0x09,
	0x52, 0x75, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x41, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x50, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x48, 0x0a, 0x05, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x66, 0x73, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescOnce sync.Once
	file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescData = file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDesc
)

func file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescGZIP() []byte {
	file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescOnce.Do(func() {
		file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescData)
	})
	return file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDescData
}

var file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_goTypes = []interface{}{
	(*RepoConfig)(nil),            // 0: types.RepoConfig
	(*Task)(nil),                  // 1: types.Task
	(*TaskSettings)(nil),          // 2: types.TaskSettings
	(*TaskList)(nil),              // 3: types.TaskList
	(*CancelPRRequest)(nil),       // 4: types.CancelPRRequest
	(*Merge)(nil),                 // 5: types.Merge
	nil,                           // 6: types.RepoConfig.MetadataEntry
	nil,                           // 7: types.TaskSettings.RunsEntry
	(*Resources)(nil),             // 8: types.Resources
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
	(*Submission)(nil),            // 10: types.Submission
	(*structpb.Struct)(nil),       // 11: google.protobuf.Struct
	(*RunSettings)(nil),           // 12: types.RunSettings
}
var file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_depIdxs = []int32{
	6,  // 0: types.RepoConfig.metadata:type_name -> types.RepoConfig.MetadataEntry
	8,  // 1: types.RepoConfig.default_resources:type_name -> types.Resources
	5,  // 2: types.RepoConfig.merge_options:type_name -> types.Merge
	9,  // 3: types.Task.finishedAt:type_name -> google.protobuf.Timestamp
	9,  // 4: types.Task.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 5: types.Task.startedAt:type_name -> google.protobuf.Timestamp
	2,  // 6: types.Task.settings:type_name -> types.TaskSettings
	10, // 7: types.Task.submission:type_name -> types.Submission
	7,  // 8: types.TaskSettings.runs:type_name -> types.TaskSettings.RunsEntry
	11, // 9: types.TaskSettings.metadata:type_name -> google.protobuf.Struct
	8,  // 10: types.TaskSettings.resources:type_name -> types.Resources
	0,  // 11: types.TaskSettings.config:type_name -> types.RepoConfig
	1,  // 12: types.TaskList.Tasks:type_name -> types.Task
	12, // 13: types.TaskSettings.RunsEntry.value:type_name -> types.RunSettings
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_init() }
func file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_init() {
	if File_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto != nil {
		return
	}
	file_github_com_tinyci_ci_agents_ci_gen_grpc_types_repository_proto_init()
	file_github_com_tinyci_ci_agents_ci_gen_grpc_types_ref_proto_init()
	file_github_com_tinyci_ci_agents_ci_gen_grpc_types_run_settings_proto_init()
	file_github_com_tinyci_ci_agents_ci_gen_grpc_types_submission_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelPRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Merge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_goTypes,
		DependencyIndexes: file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_depIdxs,
		MessageInfos:      file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_msgTypes,
	}.Build()
	File_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto = out.File
	file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_rawDesc = nil
	file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_goTypes = nil
	file_github_com_tinyci_ci_agents_ci_gen_grpc_types_task_proto_depIdxs = nil
}
