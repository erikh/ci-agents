// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/services/repository/server.proto

package repository

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	types "github.com/tinyci/ci-agents/ci-gen/grpc/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommentErrorRequest struct {
	RepoName             string   `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	PrID                 int64    `protobuf:"varint,2,opt,name=prID,proto3" json:"prID,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentErrorRequest) Reset()         { *m = CommentErrorRequest{} }
func (m *CommentErrorRequest) String() string { return proto.CompactTextString(m) }
func (*CommentErrorRequest) ProtoMessage()    {}
func (*CommentErrorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{0}
}

func (m *CommentErrorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentErrorRequest.Unmarshal(m, b)
}
func (m *CommentErrorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentErrorRequest.Marshal(b, m, deterministic)
}
func (m *CommentErrorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentErrorRequest.Merge(m, src)
}
func (m *CommentErrorRequest) XXX_Size() int {
	return xxx_messageInfo_CommentErrorRequest.Size(m)
}
func (m *CommentErrorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentErrorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommentErrorRequest proto.InternalMessageInfo

func (m *CommentErrorRequest) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *CommentErrorRequest) GetPrID() int64 {
	if m != nil {
		return m.PrID
	}
	return 0
}

func (m *CommentErrorRequest) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RepositoryData struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MasterBranch         string   `protobuf:"bytes,2,opt,name=masterBranch,proto3" json:"masterBranch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepositoryData) Reset()         { *m = RepositoryData{} }
func (m *RepositoryData) String() string { return proto.CompactTextString(m) }
func (*RepositoryData) ProtoMessage()    {}
func (*RepositoryData) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{1}
}

func (m *RepositoryData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepositoryData.Unmarshal(m, b)
}
func (m *RepositoryData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepositoryData.Marshal(b, m, deterministic)
}
func (m *RepositoryData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryData.Merge(m, src)
}
func (m *RepositoryData) XXX_Size() int {
	return xxx_messageInfo_RepositoryData.Size(m)
}
func (m *RepositoryData) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryData.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryData proto.InternalMessageInfo

func (m *RepositoryData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RepositoryData) GetMasterBranch() string {
	if m != nil {
		return m.MasterBranch
	}
	return ""
}

type RepositoryList struct {
	Repositories         []*RepositoryData `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RepositoryList) Reset()         { *m = RepositoryList{} }
func (m *RepositoryList) String() string { return proto.CompactTextString(m) }
func (*RepositoryList) ProtoMessage()    {}
func (*RepositoryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{2}
}

func (m *RepositoryList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepositoryList.Unmarshal(m, b)
}
func (m *RepositoryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepositoryList.Marshal(b, m, deterministic)
}
func (m *RepositoryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryList.Merge(m, src)
}
func (m *RepositoryList) XXX_Size() int {
	return xxx_messageInfo_RepositoryList.Size(m)
}
func (m *RepositoryList) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryList.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryList proto.InternalMessageInfo

func (m *RepositoryList) GetRepositories() []*RepositoryData {
	if m != nil {
		return m.Repositories
	}
	return nil
}

type StringList struct {
	List                 []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringList) Reset()         { *m = StringList{} }
func (m *StringList) String() string { return proto.CompactTextString(m) }
func (*StringList) ProtoMessage()    {}
func (*StringList) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{3}
}

func (m *StringList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringList.Unmarshal(m, b)
}
func (m *StringList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringList.Marshal(b, m, deterministic)
}
func (m *StringList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringList.Merge(m, src)
}
func (m *StringList) XXX_Size() int {
	return xxx_messageInfo_StringList.Size(m)
}
func (m *StringList) XXX_DiscardUnknown() {
	xxx_messageInfo_StringList.DiscardUnknown(m)
}

var xxx_messageInfo_StringList proto.InternalMessageInfo

func (m *StringList) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type RepoRefPair struct {
	RepoName             string   `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	RefName              string   `protobuf:"bytes,2,opt,name=refName,proto3" json:"refName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepoRefPair) Reset()         { *m = RepoRefPair{} }
func (m *RepoRefPair) String() string { return proto.CompactTextString(m) }
func (*RepoRefPair) ProtoMessage()    {}
func (*RepoRefPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{4}
}

func (m *RepoRefPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepoRefPair.Unmarshal(m, b)
}
func (m *RepoRefPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepoRefPair.Marshal(b, m, deterministic)
}
func (m *RepoRefPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepoRefPair.Merge(m, src)
}
func (m *RepoRefPair) XXX_Size() int {
	return xxx_messageInfo_RepoRefPair.Size(m)
}
func (m *RepoRefPair) XXX_DiscardUnknown() {
	xxx_messageInfo_RepoRefPair.DiscardUnknown(m)
}

var xxx_messageInfo_RepoRefPair proto.InternalMessageInfo

func (m *RepoRefPair) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *RepoRefPair) GetRefName() string {
	if m != nil {
		return m.RefName
	}
	return ""
}

type RepoSHAPair struct {
	RepoName             string   `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Sha                  string   `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepoSHAPair) Reset()         { *m = RepoSHAPair{} }
func (m *RepoSHAPair) String() string { return proto.CompactTextString(m) }
func (*RepoSHAPair) ProtoMessage()    {}
func (*RepoSHAPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{5}
}

func (m *RepoSHAPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepoSHAPair.Unmarshal(m, b)
}
func (m *RepoSHAPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepoSHAPair.Marshal(b, m, deterministic)
}
func (m *RepoSHAPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepoSHAPair.Merge(m, src)
}
func (m *RepoSHAPair) XXX_Size() int {
	return xxx_messageInfo_RepoSHAPair.Size(m)
}
func (m *RepoSHAPair) XXX_DiscardUnknown() {
	xxx_messageInfo_RepoSHAPair.DiscardUnknown(m)
}

var xxx_messageInfo_RepoSHAPair proto.InternalMessageInfo

func (m *RepoSHAPair) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *RepoSHAPair) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

type FileRequest struct {
	RepoName             string   `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Sha                  string   `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	Filename             string   `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileRequest) Reset()         { *m = FileRequest{} }
func (m *FileRequest) String() string { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()    {}
func (*FileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{6}
}

func (m *FileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileRequest.Unmarshal(m, b)
}
func (m *FileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileRequest.Marshal(b, m, deterministic)
}
func (m *FileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileRequest.Merge(m, src)
}
func (m *FileRequest) XXX_Size() int {
	return xxx_messageInfo_FileRequest.Size(m)
}
func (m *FileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FileRequest proto.InternalMessageInfo

func (m *FileRequest) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *FileRequest) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

func (m *FileRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type FileDiffRequest struct {
	RepoName             string   `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Base                 string   `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	Head                 string   `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileDiffRequest) Reset()         { *m = FileDiffRequest{} }
func (m *FileDiffRequest) String() string { return proto.CompactTextString(m) }
func (*FileDiffRequest) ProtoMessage()    {}
func (*FileDiffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{7}
}

func (m *FileDiffRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileDiffRequest.Unmarshal(m, b)
}
func (m *FileDiffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileDiffRequest.Marshal(b, m, deterministic)
}
func (m *FileDiffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileDiffRequest.Merge(m, src)
}
func (m *FileDiffRequest) XXX_Size() int {
	return xxx_messageInfo_FileDiffRequest.Size(m)
}
func (m *FileDiffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileDiffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FileDiffRequest proto.InternalMessageInfo

func (m *FileDiffRequest) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *FileDiffRequest) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *FileDiffRequest) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

type HookSetupRequest struct {
	RepoName             string   `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	HookURL              string   `protobuf:"bytes,2,opt,name=hookURL,proto3" json:"hookURL,omitempty"`
	HookSecret           string   `protobuf:"bytes,3,opt,name=hookSecret,proto3" json:"hookSecret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HookSetupRequest) Reset()         { *m = HookSetupRequest{} }
func (m *HookSetupRequest) String() string { return proto.CompactTextString(m) }
func (*HookSetupRequest) ProtoMessage()    {}
func (*HookSetupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{8}
}

func (m *HookSetupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HookSetupRequest.Unmarshal(m, b)
}
func (m *HookSetupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HookSetupRequest.Marshal(b, m, deterministic)
}
func (m *HookSetupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HookSetupRequest.Merge(m, src)
}
func (m *HookSetupRequest) XXX_Size() int {
	return xxx_messageInfo_HookSetupRequest.Size(m)
}
func (m *HookSetupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HookSetupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HookSetupRequest proto.InternalMessageInfo

func (m *HookSetupRequest) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *HookSetupRequest) GetHookURL() string {
	if m != nil {
		return m.HookURL
	}
	return ""
}

func (m *HookSetupRequest) GetHookSecret() string {
	if m != nil {
		return m.HookSecret
	}
	return ""
}

type HookTeardownRequest struct {
	RepoName             string   `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	HookURL              string   `protobuf:"bytes,2,opt,name=hookURL,proto3" json:"hookURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HookTeardownRequest) Reset()         { *m = HookTeardownRequest{} }
func (m *HookTeardownRequest) String() string { return proto.CompactTextString(m) }
func (*HookTeardownRequest) ProtoMessage()    {}
func (*HookTeardownRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{9}
}

func (m *HookTeardownRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HookTeardownRequest.Unmarshal(m, b)
}
func (m *HookTeardownRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HookTeardownRequest.Marshal(b, m, deterministic)
}
func (m *HookTeardownRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HookTeardownRequest.Merge(m, src)
}
func (m *HookTeardownRequest) XXX_Size() int {
	return xxx_messageInfo_HookTeardownRequest.Size(m)
}
func (m *HookTeardownRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HookTeardownRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HookTeardownRequest proto.InternalMessageInfo

func (m *HookTeardownRequest) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *HookTeardownRequest) GetHookURL() string {
	if m != nil {
		return m.HookURL
	}
	return ""
}

type StatusRequest struct {
	RepoName             string   `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	RunName              string   `protobuf:"bytes,2,opt,name=runName,proto3" json:"runName,omitempty"`
	Sha                  string   `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	Url                  string   `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{10}
}

func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusRequest.Unmarshal(m, b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
}
func (m *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(m, src)
}
func (m *StatusRequest) XXX_Size() int {
	return xxx_messageInfo_StatusRequest.Size(m)
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

func (m *StatusRequest) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *StatusRequest) GetRunName() string {
	if m != nil {
		return m.RunName
	}
	return ""
}

func (m *StatusRequest) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

func (m *StatusRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ErrorStatusRequest struct {
	RepoName             string   `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	RunName              string   `protobuf:"bytes,2,opt,name=runName,proto3" json:"runName,omitempty"`
	Sha                  string   `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	Url                  string   `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Error                string   `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorStatusRequest) Reset()         { *m = ErrorStatusRequest{} }
func (m *ErrorStatusRequest) String() string { return proto.CompactTextString(m) }
func (*ErrorStatusRequest) ProtoMessage()    {}
func (*ErrorStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{11}
}

func (m *ErrorStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorStatusRequest.Unmarshal(m, b)
}
func (m *ErrorStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorStatusRequest.Marshal(b, m, deterministic)
}
func (m *ErrorStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorStatusRequest.Merge(m, src)
}
func (m *ErrorStatusRequest) XXX_Size() int {
	return xxx_messageInfo_ErrorStatusRequest.Size(m)
}
func (m *ErrorStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorStatusRequest proto.InternalMessageInfo

func (m *ErrorStatusRequest) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *ErrorStatusRequest) GetRunName() string {
	if m != nil {
		return m.RunName
	}
	return ""
}

func (m *ErrorStatusRequest) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

func (m *ErrorStatusRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ErrorStatusRequest) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type FinishedStatusRequest struct {
	RepoName             string   `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	RunName              string   `protobuf:"bytes,2,opt,name=runName,proto3" json:"runName,omitempty"`
	Sha                  string   `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	Url                  string   `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Status               bool     `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,6,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinishedStatusRequest) Reset()         { *m = FinishedStatusRequest{} }
func (m *FinishedStatusRequest) String() string { return proto.CompactTextString(m) }
func (*FinishedStatusRequest) ProtoMessage()    {}
func (*FinishedStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{12}
}

func (m *FinishedStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinishedStatusRequest.Unmarshal(m, b)
}
func (m *FinishedStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinishedStatusRequest.Marshal(b, m, deterministic)
}
func (m *FinishedStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishedStatusRequest.Merge(m, src)
}
func (m *FinishedStatusRequest) XXX_Size() int {
	return xxx_messageInfo_FinishedStatusRequest.Size(m)
}
func (m *FinishedStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishedStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinishedStatusRequest proto.InternalMessageInfo

func (m *FinishedStatusRequest) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *FinishedStatusRequest) GetRunName() string {
	if m != nil {
		return m.RunName
	}
	return ""
}

func (m *FinishedStatusRequest) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

func (m *FinishedStatusRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *FinishedStatusRequest) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *FinishedStatusRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type String struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{13}
}

func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (m *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(m, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Bytes struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bytes) Reset()         { *m = Bytes{} }
func (m *Bytes) String() string { return proto.CompactTextString(m) }
func (*Bytes) ProtoMessage()    {}
func (*Bytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{14}
}

func (m *Bytes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bytes.Unmarshal(m, b)
}
func (m *Bytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bytes.Marshal(b, m, deterministic)
}
func (m *Bytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bytes.Merge(m, src)
}
func (m *Bytes) XXX_Size() int {
	return xxx_messageInfo_Bytes.Size(m)
}
func (m *Bytes) XXX_DiscardUnknown() {
	xxx_messageInfo_Bytes.DiscardUnknown(m)
}

var xxx_messageInfo_Bytes proto.InternalMessageInfo

func (m *Bytes) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type UserWithRepo struct {
	User                 *types.User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	RepoName             string      `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserWithRepo) Reset()         { *m = UserWithRepo{} }
func (m *UserWithRepo) String() string { return proto.CompactTextString(m) }
func (*UserWithRepo) ProtoMessage()    {}
func (*UserWithRepo) Descriptor() ([]byte, []int) {
	return fileDescriptor_20a1120f98085564, []int{15}
}

func (m *UserWithRepo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserWithRepo.Unmarshal(m, b)
}
func (m *UserWithRepo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserWithRepo.Marshal(b, m, deterministic)
}
func (m *UserWithRepo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserWithRepo.Merge(m, src)
}
func (m *UserWithRepo) XXX_Size() int {
	return xxx_messageInfo_UserWithRepo.Size(m)
}
func (m *UserWithRepo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserWithRepo.DiscardUnknown(m)
}

var xxx_messageInfo_UserWithRepo proto.InternalMessageInfo

func (m *UserWithRepo) GetUser() *types.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserWithRepo) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func init() {
	proto.RegisterType((*CommentErrorRequest)(nil), "repository.CommentErrorRequest")
	proto.RegisterType((*RepositoryData)(nil), "repository.RepositoryData")
	proto.RegisterType((*RepositoryList)(nil), "repository.RepositoryList")
	proto.RegisterType((*StringList)(nil), "repository.StringList")
	proto.RegisterType((*RepoRefPair)(nil), "repository.RepoRefPair")
	proto.RegisterType((*RepoSHAPair)(nil), "repository.RepoSHAPair")
	proto.RegisterType((*FileRequest)(nil), "repository.FileRequest")
	proto.RegisterType((*FileDiffRequest)(nil), "repository.FileDiffRequest")
	proto.RegisterType((*HookSetupRequest)(nil), "repository.HookSetupRequest")
	proto.RegisterType((*HookTeardownRequest)(nil), "repository.HookTeardownRequest")
	proto.RegisterType((*StatusRequest)(nil), "repository.StatusRequest")
	proto.RegisterType((*ErrorStatusRequest)(nil), "repository.ErrorStatusRequest")
	proto.RegisterType((*FinishedStatusRequest)(nil), "repository.FinishedStatusRequest")
	proto.RegisterType((*String)(nil), "repository.String")
	proto.RegisterType((*Bytes)(nil), "repository.Bytes")
	proto.RegisterType((*UserWithRepo)(nil), "repository.UserWithRepo")
}

func init() {
	proto.RegisterFile("grpc/services/repository/server.proto", fileDescriptor_20a1120f98085564)
}

var fileDescriptor_20a1120f98085564 = []byte{
	// 865 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0xdf, 0x6f, 0x23, 0x35,
	0x10, 0xc7, 0x93, 0x4b, 0x9b, 0xb4, 0x93, 0xb4, 0x14, 0x1f, 0x94, 0x65, 0x39, 0xae, 0xc5, 0x12,
	0x52, 0x5f, 0xd8, 0x48, 0xed, 0x03, 0x48, 0x05, 0x74, 0xd7, 0x1f, 0x97, 0x56, 0xd7, 0xa2, 0x6a,
	0x43, 0x75, 0x12, 0x3c, 0xb9, 0xe9, 0x64, 0xd7, 0xba, 0xcd, 0x3a, 0xd8, 0xde, 0x43, 0x79, 0xe7,
	0xbf, 0xe0, 0xaf, 0xe1, 0x3f, 0x43, 0xf6, 0x6e, 0x1a, 0x6f, 0x92, 0x2e, 0xd1, 0x21, 0xf5, 0x25,
	0xf2, 0xd8, 0x33, 0xdf, 0x99, 0xf1, 0xac, 0x3f, 0x0a, 0x7c, 0x1b, 0xc9, 0xf1, 0xa0, 0xab, 0x50,
	0x7e, 0xe0, 0x03, 0x54, 0x5d, 0x89, 0x63, 0xa1, 0xb8, 0x16, 0x72, 0x62, 0xf7, 0x50, 0x06, 0x63,
	0x29, 0xb4, 0x20, 0x30, 0x3b, 0xf0, 0x8f, 0x22, 0xae, 0xe3, 0xec, 0x2e, 0x18, 0x88, 0x51, 0x37,
	0x12, 0x09, 0x4b, 0xa3, 0xae, 0x75, 0xba, 0xcb, 0x86, 0xdd, 0xb1, 0x9e, 0x8c, 0x51, 0x75, 0x71,
	0x34, 0xd6, 0x93, 0xfc, 0x37, 0x17, 0xf0, 0x7f, 0x70, 0x82, 0x34, 0x4f, 0x27, 0x03, 0xde, 0x1d,
	0xf0, 0xef, 0x58, 0x84, 0xa9, 0x56, 0x66, 0x15, 0x61, 0xda, 0xb5, 0xa5, 0xe4, 0x02, 0x99, 0x9a,
	0xa6, 0xa6, 0xbf, 0xc3, 0xf3, 0x53, 0x31, 0x1a, 0x61, 0xaa, 0xcf, 0xa5, 0x14, 0x32, 0xc4, 0x3f,
	0x32, 0x54, 0x9a, 0xf8, 0xb0, 0x61, 0x6a, 0xfa, 0x85, 0x8d, 0xd0, 0xab, 0xef, 0xd7, 0x0f, 0x36,
	0xc3, 0x07, 0x9b, 0x10, 0x58, 0x1b, 0xcb, 0xcb, 0x33, 0xef, 0xd9, 0x7e, 0xfd, 0xa0, 0x11, 0xda,
	0x35, 0xf9, 0x0c, 0xd6, 0xd1, 0xc4, 0x7b, 0x0d, 0xeb, 0x9c, 0x1b, 0xf4, 0x02, 0xb6, 0xc3, 0x87,
	0xce, 0xce, 0x98, 0x66, 0x26, 0x36, 0x9d, 0x69, 0xda, 0x35, 0xa1, 0xd0, 0x19, 0x31, 0xa5, 0x51,
	0x9e, 0x48, 0x96, 0x0e, 0x62, 0xab, 0xbb, 0x19, 0x96, 0xf6, 0xe8, 0x8d, 0xab, 0x74, 0xc5, 0x95,
	0x26, 0x3f, 0x43, 0xe7, 0xe1, 0xd6, 0x38, 0x2a, 0xaf, 0xbe, 0xdf, 0x38, 0x68, 0x1f, 0xfa, 0xc1,
	0xec, 0x2a, 0x83, 0x72, 0xee, 0xb0, 0xe4, 0x4f, 0xf7, 0x01, 0xfa, 0x5a, 0xf2, 0x34, 0xb2, 0x6a,
	0x04, 0xd6, 0x12, 0xae, 0xb4, 0x55, 0xd9, 0x0c, 0xed, 0x9a, 0x9e, 0x42, 0xdb, 0x28, 0x84, 0x38,
	0xbc, 0x61, 0x5c, 0x56, 0x5e, 0x89, 0x07, 0x2d, 0x89, 0x43, 0x7b, 0x94, 0x57, 0x3f, 0x35, 0xe9,
	0x71, 0x2e, 0xd2, 0xbf, 0x78, 0xfd, 0x9f, 0x22, 0x3b, 0xd0, 0x50, 0x31, 0x2b, 0x04, 0xcc, 0x92,
	0xbe, 0x83, 0xf6, 0x1b, 0x9e, 0xe0, 0x2a, 0x43, 0x59, 0x08, 0x36, 0xde, 0x43, 0x9e, 0xa0, 0xbd,
	0xee, 0x7c, 0x2a, 0x0f, 0x36, 0xbd, 0x85, 0x4f, 0x8c, 0xf0, 0x19, 0x1f, 0x0e, 0x57, 0x9c, 0xf8,
	0x1d, 0x53, 0xd3, 0xde, 0xec, 0xda, 0xec, 0xc5, 0xc8, 0xee, 0x0b, 0x69, 0xbb, 0xa6, 0x31, 0xec,
	0x5c, 0x08, 0xf1, 0xbe, 0x8f, 0x3a, 0x1b, 0xaf, 0xa2, 0xeb, 0x41, 0x2b, 0x16, 0xe2, 0xfd, 0x6d,
	0x78, 0x35, 0xbd, 0xb6, 0xc2, 0x24, 0x2f, 0x01, 0x62, 0xab, 0x34, 0x90, 0xa8, 0x8b, 0x1c, 0xce,
	0x0e, 0x7d, 0x0b, 0xcf, 0x4d, 0xa6, 0x5f, 0x91, 0xc9, 0x7b, 0xf1, 0x67, 0xfa, 0xbf, 0x92, 0x51,
	0x0e, 0x5b, 0x7d, 0xcd, 0x74, 0xa6, 0x56, 0x94, 0x91, 0x59, 0x5a, 0x1a, 0x75, 0x6e, 0x4e, 0x47,
	0xd0, 0x98, 0x8d, 0x60, 0x07, 0x1a, 0x99, 0x4c, 0xbc, 0xb5, 0x7c, 0x27, 0x93, 0x09, 0xfd, 0xab,
	0x0e, 0xc4, 0x3e, 0xb4, 0x27, 0x4a, 0x38, 0x7b, 0x98, 0xeb, 0xee, 0xc3, 0xfc, 0xbb, 0x0e, 0x9f,
	0xbf, 0xe1, 0x29, 0x57, 0x31, 0xde, 0x3f, 0x55, 0x25, 0xbb, 0xd0, 0x54, 0x36, 0x95, 0x2d, 0x65,
	0x23, 0x2c, 0x2c, 0xe3, 0x39, 0x52, 0x91, 0xd7, 0xcc, 0x3d, 0x47, 0x2a, 0xa2, 0x2f, 0xa0, 0x99,
	0x3f, 0xcd, 0x65, 0xb8, 0xa0, 0x5f, 0xc3, 0xfa, 0xc9, 0x44, 0xa3, 0x32, 0xad, 0x7d, 0x60, 0x49,
	0x96, 0x9f, 0x76, 0xc2, 0xdc, 0xa0, 0x6f, 0xa1, 0x73, 0xab, 0x50, 0xbe, 0xe3, 0x3a, 0x36, 0x0f,
	0x8f, 0xec, 0xc1, 0x9a, 0xc1, 0x9d, 0x75, 0x6a, 0x1f, 0xb6, 0x03, 0x4b, 0xc0, 0xc0, 0xb8, 0x84,
	0xf6, 0xa0, 0xd4, 0xf1, 0xb3, 0x72, 0xc7, 0x87, 0xff, 0x6c, 0x00, 0xcc, 0x28, 0x42, 0x2e, 0xa1,
	0xe3, 0xc2, 0x92, 0xec, 0xb9, 0xb4, 0x59, 0x82, 0x51, 0x7f, 0x37, 0x88, 0x84, 0x88, 0x12, 0x0c,
	0xa6, 0x08, 0x0f, 0xce, 0x0d, 0xb5, 0x69, 0x8d, 0x1c, 0xc3, 0xf6, 0xf5, 0x24, 0x74, 0x80, 0x44,
	0xdc, 0xd2, 0xfc, 0x47, 0x38, 0x66, 0x58, 0x45, 0x6b, 0xa4, 0x07, 0x5b, 0x3d, 0xd4, 0x4e, 0x61,
	0x9e, 0xeb, 0xee, 0xb6, 0xef, 0x57, 0x00, 0x91, 0xd6, 0xc8, 0x11, 0xb4, 0xae, 0x27, 0x57, 0x22,
	0xe2, 0x29, 0x21, 0xae, 0x63, 0x7e, 0xfd, 0xfe, 0x92, 0x3d, 0x5a, 0x23, 0xaf, 0xa0, 0xdd, 0x43,
	0x6d, 0xf8, 0x61, 0xd1, 0xf9, 0xc5, 0x7c, 0x86, 0x82, 0x75, 0xfe, 0xee, 0x62, 0x74, 0x51, 0xff,
	0xf7, 0xd0, 0xec, 0xa1, 0xee, 0x5f, 0xbc, 0x5e, 0x0c, 0x2e, 0x68, 0xfb, 0x48, 0xea, 0x1f, 0xa1,
	0x65, 0x1b, 0x1f, 0xaa, 0x8f, 0x4b, 0xdb, 0x2a, 0x0a, 0x2f, 0x47, 0x3b, 0x8c, 0xf5, 0x3f, 0x75,
	0x0f, 0xec, 0x77, 0x46, 0x6b, 0xe4, 0x1c, 0x3a, 0x3d, 0xd4, 0x86, 0x96, 0xc6, 0x55, 0x91, 0xaf,
	0xe6, 0xa3, 0x1d, 0x90, 0x56, 0xe4, 0x3f, 0x85, 0x4d, 0x8b, 0x46, 0x43, 0x2e, 0xf2, 0xc2, 0x75,
	0x9b, 0xa7, 0x66, 0xc5, 0x87, 0x73, 0x09, 0x9d, 0x29, 0xf5, 0xac, 0xce, 0xde, 0xbc, 0xce, 0x1c,
	0x13, 0x2b, 0xa4, 0xce, 0x60, 0xeb, 0x06, 0xd3, 0x7b, 0x9e, 0x46, 0x39, 0x03, 0xc8, 0x97, 0xe5,
	0xd2, 0x1d, 0x2e, 0x54, 0xab, 0xf4, 0x35, 0x93, 0x7a, 0x4a, 0x92, 0x8f, 0x53, 0xe9, 0x41, 0xdb,
	0xe1, 0x22, 0x79, 0xe9, 0x6a, 0x2c, 0x02, 0xb3, 0x42, 0xe8, 0x1a, 0xb6, 0xcb, 0x64, 0x23, 0xdf,
	0x94, 0xa7, 0xb5, 0x84, 0x7a, 0x15, 0x72, 0xaf, 0xa0, 0x7d, 0x9a, 0x20, 0xb3, 0xe9, 0xb1, 0xf2,
	0xab, 0x7b, 0x44, 0xe1, 0xe4, 0xa7, 0xdf, 0x8e, 0x57, 0xfd, 0x77, 0xb6, 0xe4, 0x8f, 0xe2, 0x5d,
	0xd3, 0x0a, 0x1e, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xac, 0x5d, 0xdf, 0x4b, 0x0a, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RepositoryClient is the client API for Repository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RepositoryClient interface {
	// CommentError is for commenting on PRs when there is no better means of bubbling up an error.
	CommentError(ctx context.Context, in *CommentErrorRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	MyRepositories(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*RepositoryList, error)
	GetRepository(ctx context.Context, in *UserWithRepo, opts ...grpc.CallOption) (*RepositoryData, error)
	MyLogin(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	GetFileList(ctx context.Context, in *RepoSHAPair, opts ...grpc.CallOption) (*StringList, error)
	GetSHA(ctx context.Context, in *RepoRefPair, opts ...grpc.CallOption) (*String, error)
	GetRefs(ctx context.Context, in *RepoSHAPair, opts ...grpc.CallOption) (*StringList, error)
	GetFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*Bytes, error)
	GetDiffFiles(ctx context.Context, in *FileDiffRequest, opts ...grpc.CallOption) (*StringList, error)
	SetupHook(ctx context.Context, in *HookSetupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	TeardownHook(ctx context.Context, in *HookTeardownRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PendingStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StartedStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ErrorStatus(ctx context.Context, in *ErrorStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	FinishedStatus(ctx context.Context, in *FinishedStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ClearStates(ctx context.Context, in *RepoSHAPair, opts ...grpc.CallOption) (*empty.Empty, error)
}

type repositoryClient struct {
	cc *grpc.ClientConn
}

func NewRepositoryClient(cc *grpc.ClientConn) RepositoryClient {
	return &repositoryClient{cc}
}

func (c *repositoryClient) CommentError(ctx context.Context, in *CommentErrorRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/CommentError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) MyRepositories(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*RepositoryList, error) {
	out := new(RepositoryList)
	err := c.cc.Invoke(ctx, "/repository.Repository/MyRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetRepository(ctx context.Context, in *UserWithRepo, opts ...grpc.CallOption) (*RepositoryData, error) {
	out := new(RepositoryData)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) MyLogin(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/repository.Repository/MyLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetFileList(ctx context.Context, in *RepoSHAPair, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetSHA(ctx context.Context, in *RepoRefPair, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetSHA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetRefs(ctx context.Context, in *RepoSHAPair, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetRefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*Bytes, error) {
	out := new(Bytes)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetDiffFiles(ctx context.Context, in *FileDiffRequest, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetDiffFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) SetupHook(ctx context.Context, in *HookSetupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/SetupHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) TeardownHook(ctx context.Context, in *HookTeardownRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/TeardownHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) PendingStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/PendingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) StartedStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/StartedStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) ErrorStatus(ctx context.Context, in *ErrorStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/ErrorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) FinishedStatus(ctx context.Context, in *FinishedStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/FinishedStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) ClearStates(ctx context.Context, in *RepoSHAPair, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/ClearStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServer is the server API for Repository service.
type RepositoryServer interface {
	// CommentError is for commenting on PRs when there is no better means of bubbling up an error.
	CommentError(context.Context, *CommentErrorRequest) (*empty.Empty, error)
	MyRepositories(context.Context, *types.User) (*RepositoryList, error)
	GetRepository(context.Context, *UserWithRepo) (*RepositoryData, error)
	MyLogin(context.Context, *String) (*String, error)
	GetFileList(context.Context, *RepoSHAPair) (*StringList, error)
	GetSHA(context.Context, *RepoRefPair) (*String, error)
	GetRefs(context.Context, *RepoSHAPair) (*StringList, error)
	GetFile(context.Context, *FileRequest) (*Bytes, error)
	GetDiffFiles(context.Context, *FileDiffRequest) (*StringList, error)
	SetupHook(context.Context, *HookSetupRequest) (*empty.Empty, error)
	TeardownHook(context.Context, *HookTeardownRequest) (*empty.Empty, error)
	PendingStatus(context.Context, *StatusRequest) (*empty.Empty, error)
	StartedStatus(context.Context, *StatusRequest) (*empty.Empty, error)
	ErrorStatus(context.Context, *ErrorStatusRequest) (*empty.Empty, error)
	FinishedStatus(context.Context, *FinishedStatusRequest) (*empty.Empty, error)
	ClearStates(context.Context, *RepoSHAPair) (*empty.Empty, error)
}

// UnimplementedRepositoryServer can be embedded to have forward compatible implementations.
type UnimplementedRepositoryServer struct {
}

func (*UnimplementedRepositoryServer) CommentError(ctx context.Context, req *CommentErrorRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentError not implemented")
}
func (*UnimplementedRepositoryServer) MyRepositories(ctx context.Context, req *types.User) (*RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyRepositories not implemented")
}
func (*UnimplementedRepositoryServer) GetRepository(ctx context.Context, req *UserWithRepo) (*RepositoryData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (*UnimplementedRepositoryServer) MyLogin(ctx context.Context, req *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyLogin not implemented")
}
func (*UnimplementedRepositoryServer) GetFileList(ctx context.Context, req *RepoSHAPair) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileList not implemented")
}
func (*UnimplementedRepositoryServer) GetSHA(ctx context.Context, req *RepoRefPair) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSHA not implemented")
}
func (*UnimplementedRepositoryServer) GetRefs(ctx context.Context, req *RepoSHAPair) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefs not implemented")
}
func (*UnimplementedRepositoryServer) GetFile(ctx context.Context, req *FileRequest) (*Bytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (*UnimplementedRepositoryServer) GetDiffFiles(ctx context.Context, req *FileDiffRequest) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiffFiles not implemented")
}
func (*UnimplementedRepositoryServer) SetupHook(ctx context.Context, req *HookSetupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupHook not implemented")
}
func (*UnimplementedRepositoryServer) TeardownHook(ctx context.Context, req *HookTeardownRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeardownHook not implemented")
}
func (*UnimplementedRepositoryServer) PendingStatus(ctx context.Context, req *StatusRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingStatus not implemented")
}
func (*UnimplementedRepositoryServer) StartedStatus(ctx context.Context, req *StatusRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartedStatus not implemented")
}
func (*UnimplementedRepositoryServer) ErrorStatus(ctx context.Context, req *ErrorStatusRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ErrorStatus not implemented")
}
func (*UnimplementedRepositoryServer) FinishedStatus(ctx context.Context, req *FinishedStatusRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishedStatus not implemented")
}
func (*UnimplementedRepositoryServer) ClearStates(ctx context.Context, req *RepoSHAPair) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearStates not implemented")
}

func RegisterRepositoryServer(s *grpc.Server, srv RepositoryServer) {
	s.RegisterService(&_Repository_serviceDesc, srv)
}

func _Repository_CommentError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).CommentError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/CommentError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).CommentError(ctx, req.(*CommentErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_MyRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).MyRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/MyRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).MyRepositories(ctx, req.(*types.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWithRepo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetRepository(ctx, req.(*UserWithRepo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_MyLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).MyLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/MyLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).MyLogin(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoSHAPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetFileList(ctx, req.(*RepoSHAPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetSHA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoRefPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetSHA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetSHA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetSHA(ctx, req.(*RepoRefPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoSHAPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetRefs(ctx, req.(*RepoSHAPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetDiffFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetDiffFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetDiffFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetDiffFiles(ctx, req.(*FileDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_SetupHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HookSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).SetupHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/SetupHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).SetupHook(ctx, req.(*HookSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_TeardownHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HookTeardownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).TeardownHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/TeardownHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).TeardownHook(ctx, req.(*HookTeardownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_PendingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).PendingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/PendingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).PendingStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_StartedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).StartedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/StartedStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).StartedStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_ErrorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).ErrorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/ErrorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).ErrorStatus(ctx, req.(*ErrorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_FinishedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishedStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).FinishedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/FinishedStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).FinishedStatus(ctx, req.(*FinishedStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_ClearStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoSHAPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).ClearStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/ClearStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).ClearStates(ctx, req.(*RepoSHAPair))
	}
	return interceptor(ctx, in, info, handler)
}

var _Repository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "repository.Repository",
	HandlerType: (*RepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommentError",
			Handler:    _Repository_CommentError_Handler,
		},
		{
			MethodName: "MyRepositories",
			Handler:    _Repository_MyRepositories_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _Repository_GetRepository_Handler,
		},
		{
			MethodName: "MyLogin",
			Handler:    _Repository_MyLogin_Handler,
		},
		{
			MethodName: "GetFileList",
			Handler:    _Repository_GetFileList_Handler,
		},
		{
			MethodName: "GetSHA",
			Handler:    _Repository_GetSHA_Handler,
		},
		{
			MethodName: "GetRefs",
			Handler:    _Repository_GetRefs_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _Repository_GetFile_Handler,
		},
		{
			MethodName: "GetDiffFiles",
			Handler:    _Repository_GetDiffFiles_Handler,
		},
		{
			MethodName: "SetupHook",
			Handler:    _Repository_SetupHook_Handler,
		},
		{
			MethodName: "TeardownHook",
			Handler:    _Repository_TeardownHook_Handler,
		},
		{
			MethodName: "PendingStatus",
			Handler:    _Repository_PendingStatus_Handler,
		},
		{
			MethodName: "StartedStatus",
			Handler:    _Repository_StartedStatus_Handler,
		},
		{
			MethodName: "ErrorStatus",
			Handler:    _Repository_ErrorStatus_Handler,
		},
		{
			MethodName: "FinishedStatus",
			Handler:    _Repository_FinishedStatus_Handler,
		},
		{
			MethodName: "ClearStates",
			Handler:    _Repository_ClearStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/services/repository/server.proto",
}
