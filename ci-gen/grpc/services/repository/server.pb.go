// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.6
// source: grpc/services/repository/server.proto

package repository

import (
	context "context"
	types "github.com/tinyci/ci-agents/ci-gen/grpc/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommentErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoName string `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	PrID     int64  `protobuf:"varint,2,opt,name=prID,proto3" json:"prID,omitempty"`
	Error    string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CommentErrorRequest) Reset() {
	*x = CommentErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentErrorRequest) ProtoMessage() {}

func (x *CommentErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentErrorRequest.ProtoReflect.Descriptor instead.
func (*CommentErrorRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{0}
}

func (x *CommentErrorRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *CommentErrorRequest) GetPrID() int64 {
	if x != nil {
		return x.PrID
	}
	return 0
}

func (x *CommentErrorRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RepositoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MasterBranch string `protobuf:"bytes,2,opt,name=masterBranch,proto3" json:"masterBranch,omitempty"`
}

func (x *RepositoryData) Reset() {
	*x = RepositoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryData) ProtoMessage() {}

func (x *RepositoryData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryData.ProtoReflect.Descriptor instead.
func (*RepositoryData) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{1}
}

func (x *RepositoryData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepositoryData) GetMasterBranch() string {
	if x != nil {
		return x.MasterBranch
	}
	return ""
}

type RepositoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repositories []*RepositoryData `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *RepositoryList) Reset() {
	*x = RepositoryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryList) ProtoMessage() {}

func (x *RepositoryList) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryList.ProtoReflect.Descriptor instead.
func (*RepositoryList) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{2}
}

func (x *RepositoryList) GetRepositories() []*RepositoryData {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *StringList) Reset() {
	*x = StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringList.ProtoReflect.Descriptor instead.
func (*StringList) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{3}
}

func (x *StringList) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type RepoRefPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoName string `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	RefName  string `protobuf:"bytes,2,opt,name=refName,proto3" json:"refName,omitempty"`
}

func (x *RepoRefPair) Reset() {
	*x = RepoRefPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoRefPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoRefPair) ProtoMessage() {}

func (x *RepoRefPair) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoRefPair.ProtoReflect.Descriptor instead.
func (*RepoRefPair) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{4}
}

func (x *RepoRefPair) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *RepoRefPair) GetRefName() string {
	if x != nil {
		return x.RefName
	}
	return ""
}

type RepoSHAPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoName string `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Sha      string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *RepoSHAPair) Reset() {
	*x = RepoSHAPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoSHAPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoSHAPair) ProtoMessage() {}

func (x *RepoSHAPair) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoSHAPair.ProtoReflect.Descriptor instead.
func (*RepoSHAPair) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{5}
}

func (x *RepoSHAPair) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *RepoSHAPair) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoName string `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Sha      string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	Filename string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{6}
}

func (x *FileRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *FileRequest) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *FileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type FileDiffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoName string `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Base     string `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	Head     string `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
}

func (x *FileDiffRequest) Reset() {
	*x = FileDiffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDiffRequest) ProtoMessage() {}

func (x *FileDiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDiffRequest.ProtoReflect.Descriptor instead.
func (*FileDiffRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{7}
}

func (x *FileDiffRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *FileDiffRequest) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *FileDiffRequest) GetHead() string {
	if x != nil {
		return x.Head
	}
	return ""
}

type HookSetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoName   string `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	HookURL    string `protobuf:"bytes,2,opt,name=hookURL,proto3" json:"hookURL,omitempty"`
	HookSecret string `protobuf:"bytes,3,opt,name=hookSecret,proto3" json:"hookSecret,omitempty"`
}

func (x *HookSetupRequest) Reset() {
	*x = HookSetupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HookSetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HookSetupRequest) ProtoMessage() {}

func (x *HookSetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HookSetupRequest.ProtoReflect.Descriptor instead.
func (*HookSetupRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{8}
}

func (x *HookSetupRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *HookSetupRequest) GetHookURL() string {
	if x != nil {
		return x.HookURL
	}
	return ""
}

func (x *HookSetupRequest) GetHookSecret() string {
	if x != nil {
		return x.HookSecret
	}
	return ""
}

type HookTeardownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoName string `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	HookURL  string `protobuf:"bytes,2,opt,name=hookURL,proto3" json:"hookURL,omitempty"`
}

func (x *HookTeardownRequest) Reset() {
	*x = HookTeardownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HookTeardownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HookTeardownRequest) ProtoMessage() {}

func (x *HookTeardownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HookTeardownRequest.ProtoReflect.Descriptor instead.
func (*HookTeardownRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{9}
}

func (x *HookTeardownRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *HookTeardownRequest) GetHookURL() string {
	if x != nil {
		return x.HookURL
	}
	return ""
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoName string `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	RunName  string `protobuf:"bytes,2,opt,name=runName,proto3" json:"runName,omitempty"`
	Sha      string `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	Url      string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{10}
}

func (x *StatusRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *StatusRequest) GetRunName() string {
	if x != nil {
		return x.RunName
	}
	return ""
}

func (x *StatusRequest) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *StatusRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ErrorStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoName string `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	RunName  string `protobuf:"bytes,2,opt,name=runName,proto3" json:"runName,omitempty"`
	Sha      string `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	Url      string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Error    string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ErrorStatusRequest) Reset() {
	*x = ErrorStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorStatusRequest) ProtoMessage() {}

func (x *ErrorStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorStatusRequest.ProtoReflect.Descriptor instead.
func (*ErrorStatusRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{11}
}

func (x *ErrorStatusRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *ErrorStatusRequest) GetRunName() string {
	if x != nil {
		return x.RunName
	}
	return ""
}

func (x *ErrorStatusRequest) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *ErrorStatusRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ErrorStatusRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FinishedStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoName string `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	RunName  string `protobuf:"bytes,2,opt,name=runName,proto3" json:"runName,omitempty"`
	Sha      string `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	Url      string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Status   bool   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Msg      string `protobuf:"bytes,6,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *FinishedStatusRequest) Reset() {
	*x = FinishedStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishedStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishedStatusRequest) ProtoMessage() {}

func (x *FinishedStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishedStatusRequest.ProtoReflect.Descriptor instead.
func (*FinishedStatusRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{12}
}

func (x *FinishedStatusRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *FinishedStatusRequest) GetRunName() string {
	if x != nil {
		return x.RunName
	}
	return ""
}

func (x *FinishedStatusRequest) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *FinishedStatusRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FinishedStatusRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *FinishedStatusRequest) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{13}
}

func (x *String) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Bytes) Reset() {
	*x = Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bytes) ProtoMessage() {}

func (x *Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bytes.ProtoReflect.Descriptor instead.
func (*Bytes) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{14}
}

func (x *Bytes) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type UserWithRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     *types.User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	RepoName string      `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
}

func (x *UserWithRepo) Reset() {
	*x = UserWithRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_repository_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWithRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWithRepo) ProtoMessage() {}

func (x *UserWithRepo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_repository_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWithRepo.ProtoReflect.Descriptor instead.
func (*UserWithRepo) Descriptor() ([]byte, []int) {
	return file_grpc_services_repository_server_proto_rawDescGZIP(), []int{15}
}

func (x *UserWithRepo) GetUser() *types.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserWithRepo) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

var File_grpc_services_repository_server_proto protoreflect.FileDescriptor

var file_grpc_services_repository_server_proto_rawDesc = []byte{
	0x0a, 0x25, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e,
	0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69,
	0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x13, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x72, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x48, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x22, 0x50, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x66,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x0b, 0x52, 0x65,
	0x70, 0x6f, 0x53, 0x48, 0x41, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x22, 0x57, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x68, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x55, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x22, 0x68, 0x0a, 0x10, 0x48, 0x6f, 0x6f, 0x6b, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x6f, 0x6b, 0x55,
	0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x52,
	0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x22, 0x4b, 0x0a, 0x13, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x52, 0x4c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x52, 0x4c, 0x22, 0x69,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x9b, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x68, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x1c,
	0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x05,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1f, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0xc1, 0x08, 0x0a, 0x0a, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0e, 0x4d, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x1a, 0x1a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x18, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x1a, 0x1a, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x4d, 0x79, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x12, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x48,
	0x41, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x16, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x53, 0x48, 0x41, 0x12, 0x17, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x66, 0x50, 0x61,
	0x69, 0x72, 0x1a, 0x12, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x17, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x48, 0x41, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x16, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x17, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x1b, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x75, 0x70, 0x48,
	0x6f, 0x6f, 0x6b, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x54,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x1f, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x48, 0x41, 0x50, 0x61,
	0x69, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63,
	0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_grpc_services_repository_server_proto_rawDescOnce sync.Once
	file_grpc_services_repository_server_proto_rawDescData = file_grpc_services_repository_server_proto_rawDesc
)

func file_grpc_services_repository_server_proto_rawDescGZIP() []byte {
	file_grpc_services_repository_server_proto_rawDescOnce.Do(func() {
		file_grpc_services_repository_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_services_repository_server_proto_rawDescData)
	})
	return file_grpc_services_repository_server_proto_rawDescData
}

var file_grpc_services_repository_server_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_grpc_services_repository_server_proto_goTypes = []interface{}{
	(*CommentErrorRequest)(nil),   // 0: repository.CommentErrorRequest
	(*RepositoryData)(nil),        // 1: repository.RepositoryData
	(*RepositoryList)(nil),        // 2: repository.RepositoryList
	(*StringList)(nil),            // 3: repository.StringList
	(*RepoRefPair)(nil),           // 4: repository.RepoRefPair
	(*RepoSHAPair)(nil),           // 5: repository.RepoSHAPair
	(*FileRequest)(nil),           // 6: repository.FileRequest
	(*FileDiffRequest)(nil),       // 7: repository.FileDiffRequest
	(*HookSetupRequest)(nil),      // 8: repository.HookSetupRequest
	(*HookTeardownRequest)(nil),   // 9: repository.HookTeardownRequest
	(*StatusRequest)(nil),         // 10: repository.StatusRequest
	(*ErrorStatusRequest)(nil),    // 11: repository.ErrorStatusRequest
	(*FinishedStatusRequest)(nil), // 12: repository.FinishedStatusRequest
	(*String)(nil),                // 13: repository.String
	(*Bytes)(nil),                 // 14: repository.Bytes
	(*UserWithRepo)(nil),          // 15: repository.UserWithRepo
	(*types.User)(nil),            // 16: types.User
	(*emptypb.Empty)(nil),         // 17: google.protobuf.Empty
}
var file_grpc_services_repository_server_proto_depIdxs = []int32{
	1,  // 0: repository.RepositoryList.repositories:type_name -> repository.RepositoryData
	16, // 1: repository.UserWithRepo.user:type_name -> types.User
	0,  // 2: repository.Repository.CommentError:input_type -> repository.CommentErrorRequest
	16, // 3: repository.Repository.MyRepositories:input_type -> types.User
	15, // 4: repository.Repository.GetRepository:input_type -> repository.UserWithRepo
	13, // 5: repository.Repository.MyLogin:input_type -> repository.String
	5,  // 6: repository.Repository.GetFileList:input_type -> repository.RepoSHAPair
	4,  // 7: repository.Repository.GetSHA:input_type -> repository.RepoRefPair
	5,  // 8: repository.Repository.GetRefs:input_type -> repository.RepoSHAPair
	6,  // 9: repository.Repository.GetFile:input_type -> repository.FileRequest
	7,  // 10: repository.Repository.GetDiffFiles:input_type -> repository.FileDiffRequest
	8,  // 11: repository.Repository.SetupHook:input_type -> repository.HookSetupRequest
	9,  // 12: repository.Repository.TeardownHook:input_type -> repository.HookTeardownRequest
	10, // 13: repository.Repository.PendingStatus:input_type -> repository.StatusRequest
	10, // 14: repository.Repository.StartedStatus:input_type -> repository.StatusRequest
	11, // 15: repository.Repository.ErrorStatus:input_type -> repository.ErrorStatusRequest
	12, // 16: repository.Repository.FinishedStatus:input_type -> repository.FinishedStatusRequest
	5,  // 17: repository.Repository.ClearStates:input_type -> repository.RepoSHAPair
	17, // 18: repository.Repository.CommentError:output_type -> google.protobuf.Empty
	2,  // 19: repository.Repository.MyRepositories:output_type -> repository.RepositoryList
	1,  // 20: repository.Repository.GetRepository:output_type -> repository.RepositoryData
	13, // 21: repository.Repository.MyLogin:output_type -> repository.String
	3,  // 22: repository.Repository.GetFileList:output_type -> repository.StringList
	13, // 23: repository.Repository.GetSHA:output_type -> repository.String
	3,  // 24: repository.Repository.GetRefs:output_type -> repository.StringList
	14, // 25: repository.Repository.GetFile:output_type -> repository.Bytes
	3,  // 26: repository.Repository.GetDiffFiles:output_type -> repository.StringList
	17, // 27: repository.Repository.SetupHook:output_type -> google.protobuf.Empty
	17, // 28: repository.Repository.TeardownHook:output_type -> google.protobuf.Empty
	17, // 29: repository.Repository.PendingStatus:output_type -> google.protobuf.Empty
	17, // 30: repository.Repository.StartedStatus:output_type -> google.protobuf.Empty
	17, // 31: repository.Repository.ErrorStatus:output_type -> google.protobuf.Empty
	17, // 32: repository.Repository.FinishedStatus:output_type -> google.protobuf.Empty
	17, // 33: repository.Repository.ClearStates:output_type -> google.protobuf.Empty
	18, // [18:34] is the sub-list for method output_type
	2,  // [2:18] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_grpc_services_repository_server_proto_init() }
func file_grpc_services_repository_server_proto_init() {
	if File_grpc_services_repository_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_services_repository_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoRefPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoSHAPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDiffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HookSetupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HookTeardownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishedStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_repository_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWithRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_services_repository_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_services_repository_server_proto_goTypes,
		DependencyIndexes: file_grpc_services_repository_server_proto_depIdxs,
		MessageInfos:      file_grpc_services_repository_server_proto_msgTypes,
	}.Build()
	File_grpc_services_repository_server_proto = out.File
	file_grpc_services_repository_server_proto_rawDesc = nil
	file_grpc_services_repository_server_proto_goTypes = nil
	file_grpc_services_repository_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RepositoryClient is the client API for Repository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RepositoryClient interface {
	// CommentError is for commenting on PRs when there is no better means of bubbling up an error.
	CommentError(ctx context.Context, in *CommentErrorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MyRepositories(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*RepositoryList, error)
	GetRepository(ctx context.Context, in *UserWithRepo, opts ...grpc.CallOption) (*RepositoryData, error)
	MyLogin(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	GetFileList(ctx context.Context, in *RepoSHAPair, opts ...grpc.CallOption) (*StringList, error)
	GetSHA(ctx context.Context, in *RepoRefPair, opts ...grpc.CallOption) (*String, error)
	GetRefs(ctx context.Context, in *RepoSHAPair, opts ...grpc.CallOption) (*StringList, error)
	GetFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*Bytes, error)
	GetDiffFiles(ctx context.Context, in *FileDiffRequest, opts ...grpc.CallOption) (*StringList, error)
	SetupHook(ctx context.Context, in *HookSetupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TeardownHook(ctx context.Context, in *HookTeardownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PendingStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StartedStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ErrorStatus(ctx context.Context, in *ErrorStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FinishedStatus(ctx context.Context, in *FinishedStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClearStates(ctx context.Context, in *RepoSHAPair, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type repositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryClient(cc grpc.ClientConnInterface) RepositoryClient {
	return &repositoryClient{cc}
}

func (c *repositoryClient) CommentError(ctx context.Context, in *CommentErrorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/CommentError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) MyRepositories(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*RepositoryList, error) {
	out := new(RepositoryList)
	err := c.cc.Invoke(ctx, "/repository.Repository/MyRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetRepository(ctx context.Context, in *UserWithRepo, opts ...grpc.CallOption) (*RepositoryData, error) {
	out := new(RepositoryData)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) MyLogin(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/repository.Repository/MyLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetFileList(ctx context.Context, in *RepoSHAPair, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetSHA(ctx context.Context, in *RepoRefPair, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetSHA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetRefs(ctx context.Context, in *RepoSHAPair, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetRefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*Bytes, error) {
	out := new(Bytes)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetDiffFiles(ctx context.Context, in *FileDiffRequest, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetDiffFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) SetupHook(ctx context.Context, in *HookSetupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/SetupHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) TeardownHook(ctx context.Context, in *HookTeardownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/TeardownHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) PendingStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/PendingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) StartedStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/StartedStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) ErrorStatus(ctx context.Context, in *ErrorStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/ErrorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) FinishedStatus(ctx context.Context, in *FinishedStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/FinishedStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) ClearStates(ctx context.Context, in *RepoSHAPair, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repository/ClearStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServer is the server API for Repository service.
type RepositoryServer interface {
	// CommentError is for commenting on PRs when there is no better means of bubbling up an error.
	CommentError(context.Context, *CommentErrorRequest) (*emptypb.Empty, error)
	MyRepositories(context.Context, *types.User) (*RepositoryList, error)
	GetRepository(context.Context, *UserWithRepo) (*RepositoryData, error)
	MyLogin(context.Context, *String) (*String, error)
	GetFileList(context.Context, *RepoSHAPair) (*StringList, error)
	GetSHA(context.Context, *RepoRefPair) (*String, error)
	GetRefs(context.Context, *RepoSHAPair) (*StringList, error)
	GetFile(context.Context, *FileRequest) (*Bytes, error)
	GetDiffFiles(context.Context, *FileDiffRequest) (*StringList, error)
	SetupHook(context.Context, *HookSetupRequest) (*emptypb.Empty, error)
	TeardownHook(context.Context, *HookTeardownRequest) (*emptypb.Empty, error)
	PendingStatus(context.Context, *StatusRequest) (*emptypb.Empty, error)
	StartedStatus(context.Context, *StatusRequest) (*emptypb.Empty, error)
	ErrorStatus(context.Context, *ErrorStatusRequest) (*emptypb.Empty, error)
	FinishedStatus(context.Context, *FinishedStatusRequest) (*emptypb.Empty, error)
	ClearStates(context.Context, *RepoSHAPair) (*emptypb.Empty, error)
}

// UnimplementedRepositoryServer can be embedded to have forward compatible implementations.
type UnimplementedRepositoryServer struct {
}

func (*UnimplementedRepositoryServer) CommentError(context.Context, *CommentErrorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentError not implemented")
}
func (*UnimplementedRepositoryServer) MyRepositories(context.Context, *types.User) (*RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyRepositories not implemented")
}
func (*UnimplementedRepositoryServer) GetRepository(context.Context, *UserWithRepo) (*RepositoryData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (*UnimplementedRepositoryServer) MyLogin(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyLogin not implemented")
}
func (*UnimplementedRepositoryServer) GetFileList(context.Context, *RepoSHAPair) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileList not implemented")
}
func (*UnimplementedRepositoryServer) GetSHA(context.Context, *RepoRefPair) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSHA not implemented")
}
func (*UnimplementedRepositoryServer) GetRefs(context.Context, *RepoSHAPair) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefs not implemented")
}
func (*UnimplementedRepositoryServer) GetFile(context.Context, *FileRequest) (*Bytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (*UnimplementedRepositoryServer) GetDiffFiles(context.Context, *FileDiffRequest) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiffFiles not implemented")
}
func (*UnimplementedRepositoryServer) SetupHook(context.Context, *HookSetupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupHook not implemented")
}
func (*UnimplementedRepositoryServer) TeardownHook(context.Context, *HookTeardownRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeardownHook not implemented")
}
func (*UnimplementedRepositoryServer) PendingStatus(context.Context, *StatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingStatus not implemented")
}
func (*UnimplementedRepositoryServer) StartedStatus(context.Context, *StatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartedStatus not implemented")
}
func (*UnimplementedRepositoryServer) ErrorStatus(context.Context, *ErrorStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ErrorStatus not implemented")
}
func (*UnimplementedRepositoryServer) FinishedStatus(context.Context, *FinishedStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishedStatus not implemented")
}
func (*UnimplementedRepositoryServer) ClearStates(context.Context, *RepoSHAPair) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearStates not implemented")
}

func RegisterRepositoryServer(s *grpc.Server, srv RepositoryServer) {
	s.RegisterService(&_Repository_serviceDesc, srv)
}

func _Repository_CommentError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).CommentError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/CommentError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).CommentError(ctx, req.(*CommentErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_MyRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).MyRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/MyRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).MyRepositories(ctx, req.(*types.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWithRepo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetRepository(ctx, req.(*UserWithRepo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_MyLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).MyLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/MyLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).MyLogin(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoSHAPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetFileList(ctx, req.(*RepoSHAPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetSHA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoRefPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetSHA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetSHA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetSHA(ctx, req.(*RepoRefPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoSHAPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetRefs(ctx, req.(*RepoSHAPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetDiffFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetDiffFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetDiffFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetDiffFiles(ctx, req.(*FileDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_SetupHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HookSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).SetupHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/SetupHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).SetupHook(ctx, req.(*HookSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_TeardownHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HookTeardownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).TeardownHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/TeardownHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).TeardownHook(ctx, req.(*HookTeardownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_PendingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).PendingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/PendingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).PendingStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_StartedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).StartedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/StartedStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).StartedStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_ErrorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).ErrorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/ErrorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).ErrorStatus(ctx, req.(*ErrorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_FinishedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishedStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).FinishedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/FinishedStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).FinishedStatus(ctx, req.(*FinishedStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_ClearStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoSHAPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).ClearStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/ClearStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).ClearStates(ctx, req.(*RepoSHAPair))
	}
	return interceptor(ctx, in, info, handler)
}

var _Repository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "repository.Repository",
	HandlerType: (*RepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommentError",
			Handler:    _Repository_CommentError_Handler,
		},
		{
			MethodName: "MyRepositories",
			Handler:    _Repository_MyRepositories_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _Repository_GetRepository_Handler,
		},
		{
			MethodName: "MyLogin",
			Handler:    _Repository_MyLogin_Handler,
		},
		{
			MethodName: "GetFileList",
			Handler:    _Repository_GetFileList_Handler,
		},
		{
			MethodName: "GetSHA",
			Handler:    _Repository_GetSHA_Handler,
		},
		{
			MethodName: "GetRefs",
			Handler:    _Repository_GetRefs_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _Repository_GetFile_Handler,
		},
		{
			MethodName: "GetDiffFiles",
			Handler:    _Repository_GetDiffFiles_Handler,
		},
		{
			MethodName: "SetupHook",
			Handler:    _Repository_SetupHook_Handler,
		},
		{
			MethodName: "TeardownHook",
			Handler:    _Repository_TeardownHook_Handler,
		},
		{
			MethodName: "PendingStatus",
			Handler:    _Repository_PendingStatus_Handler,
		},
		{
			MethodName: "StartedStatus",
			Handler:    _Repository_StartedStatus_Handler,
		},
		{
			MethodName: "ErrorStatus",
			Handler:    _Repository_ErrorStatus_Handler,
		},
		{
			MethodName: "FinishedStatus",
			Handler:    _Repository_FinishedStatus_Handler,
		},
		{
			MethodName: "ClearStates",
			Handler:    _Repository_ClearStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/services/repository/server.proto",
}
