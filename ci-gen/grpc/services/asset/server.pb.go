// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.6
// source: grpc/services/asset/server.proto

package asset

import (
	context "context"
	types "github.com/tinyci/ci-agents/ci-gen/grpc/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Sending type
type LogSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`      // ID of *Run*
	Chunk []byte `protobuf:"bytes,2,opt,name=Chunk,proto3" json:"Chunk,omitempty"` // Log binary chunk; typically between 64 and 256 bytes per payload.
}

func (x *LogSend) Reset() {
	*x = LogSend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_asset_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSend) ProtoMessage() {}

func (x *LogSend) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_asset_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSend.ProtoReflect.Descriptor instead.
func (*LogSend) Descriptor() ([]byte, []int) {
	return file_grpc_services_asset_server_proto_rawDescGZIP(), []int{0}
}

func (x *LogSend) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *LogSend) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

// Receive type
type LogChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=Chunk,proto3" json:"Chunk,omitempty"` // Log binary chunk; typically between 64 and 256 bytes per payload.
}

func (x *LogChunk) Reset() {
	*x = LogChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_asset_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogChunk) ProtoMessage() {}

func (x *LogChunk) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_asset_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogChunk.ProtoReflect.Descriptor instead.
func (*LogChunk) Descriptor() ([]byte, []int) {
	return file_grpc_services_asset_server_proto_rawDescGZIP(), []int{1}
}

func (x *LogChunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

var File_grpc_services_asset_server_proto protoreflect.FileDescriptor

var file_grpc_services_asset_server_proto_rawDesc = []byte{
	0x0a, 0x20, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79,
	0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x20, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x32, 0x5a, 0x0a, 0x05, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x50, 0x75, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x08, 0x2e,
	0x4c, 0x6f, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x01, 0x12, 0x23, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x0c, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x4c, 0x6f, 0x67, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_services_asset_server_proto_rawDescOnce sync.Once
	file_grpc_services_asset_server_proto_rawDescData = file_grpc_services_asset_server_proto_rawDesc
)

func file_grpc_services_asset_server_proto_rawDescGZIP() []byte {
	file_grpc_services_asset_server_proto_rawDescOnce.Do(func() {
		file_grpc_services_asset_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_services_asset_server_proto_rawDescData)
	})
	return file_grpc_services_asset_server_proto_rawDescData
}

var file_grpc_services_asset_server_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_grpc_services_asset_server_proto_goTypes = []interface{}{
	(*LogSend)(nil),       // 0: LogSend
	(*LogChunk)(nil),      // 1: LogChunk
	(*types.IntID)(nil),   // 2: types.IntID
	(*emptypb.Empty)(nil), // 3: google.protobuf.Empty
}
var file_grpc_services_asset_server_proto_depIdxs = []int32{
	0, // 0: Asset.PutLog:input_type -> LogSend
	2, // 1: Asset.GetLog:input_type -> types.IntID
	3, // 2: Asset.PutLog:output_type -> google.protobuf.Empty
	1, // 3: Asset.GetLog:output_type -> LogChunk
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_grpc_services_asset_server_proto_init() }
func file_grpc_services_asset_server_proto_init() {
	if File_grpc_services_asset_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_services_asset_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogSend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_asset_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_services_asset_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_services_asset_server_proto_goTypes,
		DependencyIndexes: file_grpc_services_asset_server_proto_depIdxs,
		MessageInfos:      file_grpc_services_asset_server_proto_msgTypes,
	}.Build()
	File_grpc_services_asset_server_proto = out.File
	file_grpc_services_asset_server_proto_rawDesc = nil
	file_grpc_services_asset_server_proto_goTypes = nil
	file_grpc_services_asset_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AssetClient is the client API for Asset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AssetClient interface {
	PutLog(ctx context.Context, opts ...grpc.CallOption) (Asset_PutLogClient, error)
	GetLog(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (Asset_GetLogClient, error)
}

type assetClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetClient(cc grpc.ClientConnInterface) AssetClient {
	return &assetClient{cc}
}

func (c *assetClient) PutLog(ctx context.Context, opts ...grpc.CallOption) (Asset_PutLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Asset_serviceDesc.Streams[0], "/Asset/PutLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &assetPutLogClient{stream}
	return x, nil
}

type Asset_PutLogClient interface {
	Send(*LogSend) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type assetPutLogClient struct {
	grpc.ClientStream
}

func (x *assetPutLogClient) Send(m *LogSend) error {
	return x.ClientStream.SendMsg(m)
}

func (x *assetPutLogClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *assetClient) GetLog(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (Asset_GetLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Asset_serviceDesc.Streams[1], "/Asset/GetLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &assetGetLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Asset_GetLogClient interface {
	Recv() (*LogChunk, error)
	grpc.ClientStream
}

type assetGetLogClient struct {
	grpc.ClientStream
}

func (x *assetGetLogClient) Recv() (*LogChunk, error) {
	m := new(LogChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AssetServer is the server API for Asset service.
type AssetServer interface {
	PutLog(Asset_PutLogServer) error
	GetLog(*types.IntID, Asset_GetLogServer) error
}

// UnimplementedAssetServer can be embedded to have forward compatible implementations.
type UnimplementedAssetServer struct {
}

func (*UnimplementedAssetServer) PutLog(Asset_PutLogServer) error {
	return status.Errorf(codes.Unimplemented, "method PutLog not implemented")
}
func (*UnimplementedAssetServer) GetLog(*types.IntID, Asset_GetLogServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}

func RegisterAssetServer(s *grpc.Server, srv AssetServer) {
	s.RegisterService(&_Asset_serviceDesc, srv)
}

func _Asset_PutLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AssetServer).PutLog(&assetPutLogServer{stream})
}

type Asset_PutLogServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*LogSend, error)
	grpc.ServerStream
}

type assetPutLogServer struct {
	grpc.ServerStream
}

func (x *assetPutLogServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *assetPutLogServer) Recv() (*LogSend, error) {
	m := new(LogSend)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Asset_GetLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.IntID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssetServer).GetLog(m, &assetGetLogServer{stream})
}

type Asset_GetLogServer interface {
	Send(*LogChunk) error
	grpc.ServerStream
}

type assetGetLogServer struct {
	grpc.ServerStream
}

func (x *assetGetLogServer) Send(m *LogChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _Asset_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Asset",
	HandlerType: (*AssetServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutLog",
			Handler:       _Asset_PutLog_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetLog",
			Handler:       _Asset_GetLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/services/asset/server.proto",
}
