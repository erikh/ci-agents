// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.6
// source: grpc/services/data/server.proto

package data

import (
	context "context"
	types "github.com/tinyci/ci-agents/ci-gen/grpc/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RepositoryFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"` // Parent or Fork
	Sha        string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *RepositoryFilterRequest) Reset() {
	*x = RepositoryFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryFilterRequest) ProtoMessage() {}

func (x *RepositoryFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryFilterRequest.ProtoReflect.Descriptor instead.
func (*RepositoryFilterRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{0}
}

func (x *RepositoryFilterRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *RepositoryFilterRequest) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type RepositoryFilterRequestWithPagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"` // Parent or Fork
	Sha        string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	Page       int64  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage    int64  `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *RepositoryFilterRequestWithPagination) Reset() {
	*x = RepositoryFilterRequestWithPagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryFilterRequestWithPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryFilterRequestWithPagination) ProtoMessage() {}

func (x *RepositoryFilterRequestWithPagination) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryFilterRequestWithPagination.ProtoReflect.Descriptor instead.
func (*RepositoryFilterRequestWithPagination) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{1}
}

func (x *RepositoryFilterRequestWithPagination) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *RepositoryFilterRequestWithPagination) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *RepositoryFilterRequestWithPagination) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RepositoryFilterRequestWithPagination) GetPerPage() int64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type SubmissionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Submission *types.Submission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"` // the submission
	Page       int64             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`            // what page to fetch
	PerPage    int64             `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"`      // how many per-page
}

func (x *SubmissionQuery) Reset() {
	*x = SubmissionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionQuery) ProtoMessage() {}

func (x *SubmissionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionQuery.ProtoReflect.Descriptor instead.
func (*SubmissionQuery) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{2}
}

func (x *SubmissionQuery) GetSubmission() *types.Submission {
	if x != nil {
		return x.Submission
	}
	return nil
}

func (x *SubmissionQuery) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SubmissionQuery) GetPerPage() int64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities []string `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"` // list of capabilities
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{3}
}

func (x *Capabilities) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type CapabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                // User ID
	Capability string `protobuf:"bytes,2,opt,name=capability,proto3" json:"capability,omitempty"` // name of capability (See model/user.go)
}

func (x *CapabilityRequest) Reset() {
	*x = CapabilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityRequest) ProtoMessage() {}

func (x *CapabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityRequest.ProtoReflect.Descriptor instead.
func (*CapabilityRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{4}
}

func (x *CapabilityRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CapabilityRequest) GetCapability() string {
	if x != nil {
		return x.Capability
	}
	return ""
}

type ListSubscribedTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // User ID
	Page    int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int64 `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *ListSubscribedTasksRequest) Reset() {
	*x = ListSubscribedTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubscribedTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubscribedTasksRequest) ProtoMessage() {}

func (x *ListSubscribedTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubscribedTasksRequest.ProtoReflect.Descriptor instead.
func (*ListSubscribedTasksRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{5}
}

func (x *ListSubscribedTasksRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListSubscribedTasksRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSubscribedTasksRequest) GetPerPage() int64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type RunsForTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Task ID
	Page    int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int64 `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *RunsForTaskRequest) Reset() {
	*x = RunsForTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunsForTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunsForTaskRequest) ProtoMessage() {}

func (x *RunsForTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunsForTaskRequest.ProtoReflect.Descriptor instead.
func (*RunsForTaskRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{6}
}

func (x *RunsForTaskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RunsForTaskRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RunsForTaskRequest) GetPerPage() int64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type TaskListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"` // Parent or Fork
	Sha        string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	Page       int64  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage    int64  `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *TaskListRequest) Reset() {
	*x = TaskListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListRequest) ProtoMessage() {}

func (x *TaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListRequest.ProtoReflect.Descriptor instead.
func (*TaskListRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{7}
}

func (x *TaskListRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *TaskListRequest) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *TaskListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TaskListRequest) GetPerPage() int64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type RunListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"` // Parent or Fork
	Sha        string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	Page       int64  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage    int64  `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *RunListRequest) Reset() {
	*x = RunListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunListRequest) ProtoMessage() {}

func (x *RunListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunListRequest.ProtoReflect.Descriptor instead.
func (*RunListRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{8}
}

func (x *RunListRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *RunListRequest) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *RunListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RunListRequest) GetPerPage() int64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type RepoUserSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	RepoName string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"` // these are in owner/repo format
}

func (x *RepoUserSelection) Reset() {
	*x = RepoUserSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoUserSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoUserSelection) ProtoMessage() {}

func (x *RepoUserSelection) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoUserSelection.ProtoReflect.Descriptor instead.
func (*RepoUserSelection) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{9}
}

func (x *RepoUserSelection) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RepoUserSelection) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

type RepoRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository int64  `protobuf:"varint,1,opt,name=repository,proto3" json:"repository,omitempty"`
	RefName    string `protobuf:"bytes,2,opt,name=refName,proto3" json:"refName,omitempty"`
}

func (x *RepoRef) Reset() {
	*x = RepoRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoRef) ProtoMessage() {}

func (x *RepoRef) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoRef.ProtoReflect.Descriptor instead.
func (*RepoRef) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{10}
}

func (x *RepoRef) GetRepository() int64 {
	if x != nil {
		return x.Repository
	}
	return 0
}

func (x *RepoRef) GetRefName() string {
	if x != nil {
		return x.RefName
	}
	return ""
}

type RefPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoName string `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"` // these are in owner/repo format
	Sha      string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *RefPair) Reset() {
	*x = RefPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefPair) ProtoMessage() {}

func (x *RefPair) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefPair.ProtoReflect.Descriptor instead.
func (*RefPair) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{11}
}

func (x *RefPair) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *RefPair) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type QueueListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Repository name in owner/repo format
	Page    int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int64  `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *QueueListRequest) Reset() {
	*x = QueueListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListRequest) ProtoMessage() {}

func (x *QueueListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListRequest.ProtoReflect.Descriptor instead.
func (*QueueListRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{12}
}

func (x *QueueListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueueListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueueListRequest) GetPerPage() int64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type QueueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*types.QueueItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *QueueList) Reset() {
	*x = QueueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueList) ProtoMessage() {}

func (x *QueueList) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueList.ProtoReflect.Descriptor instead.
func (*QueueList) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{13}
}

func (x *QueueList) GetItems() []*types.QueueItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Count) Reset() {
	*x = Count{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Count) ProtoMessage() {}

func (x *Count) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Count.ProtoReflect.Descriptor instead.
func (*Count) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{14}
}

func (x *Count) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Name) Reset() {
	*x = Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Name) ProtoMessage() {}

func (x *Name) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Name.ProtoReflect.Descriptor instead.
func (*Name) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{15}
}

func (x *Name) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Search struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search string `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *Search) Reset() {
	*x = Search{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Search) ProtoMessage() {}

func (x *Search) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Search.ProtoReflect.Descriptor instead.
func (*Search) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{16}
}

func (x *Search) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type NameSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Search string `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *NameSearch) Reset() {
	*x = NameSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameSearch) ProtoMessage() {}

func (x *NameSearch) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameSearch.ProtoReflect.Descriptor instead.
func (*NameSearch) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{17}
}

func (x *NameSearch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NameSearch) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type OAuthState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State  string   `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Scopes []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *OAuthState) Reset() {
	*x = OAuthState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuthState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuthState) ProtoMessage() {}

func (x *OAuthState) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuthState.ProtoReflect.Descriptor instead.
func (*OAuthState) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{18}
}

func (x *OAuthState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *OAuthState) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type GithubJSON struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JSON        []byte `protobuf:"bytes,1,opt,name=JSON,proto3" json:"JSON,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	AutoCreated bool   `protobuf:"varint,3,opt,name=AutoCreated,proto3" json:"AutoCreated,omitempty"`
}

func (x *GithubJSON) Reset() {
	*x = GithubJSON{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_data_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubJSON) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubJSON) ProtoMessage() {}

func (x *GithubJSON) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_data_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubJSON.ProtoReflect.Descriptor instead.
func (*GithubJSON) Descriptor() ([]byte, []int) {
	return file_grpc_services_data_server_proto_rawDescGZIP(), []int{19}
}

func (x *GithubJSON) GetJSON() []byte {
	if x != nil {
		return x.JSON
	}
	return nil
}

func (x *GithubJSON) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GithubJSON) GetAutoCreated() bool {
	if x != nil {
		return x.AutoCreated
	}
	return false
}

var File_grpc_services_data_server_proto protoreflect.FileDescriptor

var file_grpc_services_data_server_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x62, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63,
	0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63,
	0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63,
	0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63,
	0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69,
	0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69,
	0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x17, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x68, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x22, 0x72, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x11, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x5a, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x12, 0x52, 0x75, 0x6e,
	0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x71, 0x0a,
	0x0f, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x68, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x22, 0x70, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x68, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x22, 0x4b, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x43, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x22, 0x54, 0x0a,
	0x10, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x1d, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1a, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x38, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22,
	0x3a, 0x0a, 0x0a, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x0a, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x75, 0x74,
	0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x41, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x32, 0x9c, 0x1a, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x0a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x11, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x00, 0x12, 0x36, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x12, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x12, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x0a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x0b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x16, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x64, 0x64, 0x12,
	0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x12, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x50, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x0c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x49, 0x44, 0x1a,
	0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00,
	0x12, 0x31, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x53, 0x48, 0x41, 0x12, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x66, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x0a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x66, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x75, 0x74, 0x52, 0x65, 0x66, 0x12, 0x0a, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x1a, 0x0a, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x66, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x66, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x66, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x49, 0x44, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x10, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4a, 0x53, 0x4f, 0x4e, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x1a, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x11, 0x4f, 0x77,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x1a, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x10, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a,
	0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x0c,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x15, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x50, 0x61,
	0x69, 0x72, 0x1a, 0x0b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x0c,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x0a, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x52, 0x75, 0x6e, 0x55, 0x49, 0x12, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x49, 0x44, 0x1a, 0x0a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e,
	0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0b, 0x4c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x1a, 0x0e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x12,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x1a, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d, 0x50,
	0x75, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x49, 0x44, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x15,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x15, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x25, 0x0a,
	0x07, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x32,
	0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x15, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x42, 0x79, 0x50, 0x52, 0x12, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x50, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x75,
	0x6e, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x2f, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x49, 0x44, 0x1a, 0x0b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x0b, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x09,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x25, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x29, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0a, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0a, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x2f, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x1a, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x1a, 0x12, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f,
	0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_services_data_server_proto_rawDescOnce sync.Once
	file_grpc_services_data_server_proto_rawDescData = file_grpc_services_data_server_proto_rawDesc
)

func file_grpc_services_data_server_proto_rawDescGZIP() []byte {
	file_grpc_services_data_server_proto_rawDescOnce.Do(func() {
		file_grpc_services_data_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_services_data_server_proto_rawDescData)
	})
	return file_grpc_services_data_server_proto_rawDescData
}

var file_grpc_services_data_server_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_grpc_services_data_server_proto_goTypes = []interface{}{
	(*RepositoryFilterRequest)(nil),               // 0: data.RepositoryFilterRequest
	(*RepositoryFilterRequestWithPagination)(nil), // 1: data.RepositoryFilterRequestWithPagination
	(*SubmissionQuery)(nil),                       // 2: data.SubmissionQuery
	(*Capabilities)(nil),                          // 3: data.Capabilities
	(*CapabilityRequest)(nil),                     // 4: data.CapabilityRequest
	(*ListSubscribedTasksRequest)(nil),            // 5: data.ListSubscribedTasksRequest
	(*RunsForTaskRequest)(nil),                    // 6: data.RunsForTaskRequest
	(*TaskListRequest)(nil),                       // 7: data.TaskListRequest
	(*RunListRequest)(nil),                        // 8: data.RunListRequest
	(*RepoUserSelection)(nil),                     // 9: data.RepoUserSelection
	(*RepoRef)(nil),                               // 10: data.RepoRef
	(*RefPair)(nil),                               // 11: data.RefPair
	(*QueueListRequest)(nil),                      // 12: data.QueueListRequest
	(*QueueList)(nil),                             // 13: data.QueueList
	(*Count)(nil),                                 // 14: data.Count
	(*Name)(nil),                                  // 15: data.Name
	(*Search)(nil),                                // 16: data.Search
	(*NameSearch)(nil),                            // 17: data.NameSearch
	(*OAuthState)(nil),                            // 18: data.OAuthState
	(*GithubJSON)(nil),                            // 19: data.GithubJSON
	(*types.Submission)(nil),                      // 20: types.Submission
	(*types.QueueItem)(nil),                       // 21: types.QueueItem
	(*types.UserError)(nil),                       // 22: types.UserError
	(*emptypb.Empty)(nil),                         // 23: google.protobuf.Empty
	(*types.QueueRequest)(nil),                    // 24: types.QueueRequest
	(*types.Status)(nil),                          // 25: types.Status
	(*types.IntID)(nil),                           // 26: types.IntID
	(*types.Ref)(nil),                             // 27: types.Ref
	(*types.Session)(nil),                         // 28: types.Session
	(*types.StringID)(nil),                        // 29: types.StringID
	(*types.Task)(nil),                            // 30: types.Task
	(*types.CancelPRRequest)(nil),                 // 31: types.CancelPRRequest
	(*types.User)(nil),                            // 32: types.User
	(*types.UserErrors)(nil),                      // 33: types.UserErrors
	(*types.RepositoryList)(nil),                  // 34: types.RepositoryList
	(*types.Repository)(nil),                      // 35: types.Repository
	(*types.RunList)(nil),                         // 36: types.RunList
	(*types.Run)(nil),                             // 37: types.Run
	(*types.TaskList)(nil),                        // 38: types.TaskList
	(*types.SubmissionList)(nil),                  // 39: types.SubmissionList
	(*types.UserList)(nil),                        // 40: types.UserList
	(*types.Bool)(nil),                            // 41: types.Bool
}
var file_grpc_services_data_server_proto_depIdxs = []int32{
	20, // 0: data.SubmissionQuery.submission:type_name -> types.Submission
	21, // 1: data.QueueList.items:type_name -> types.QueueItem
	15, // 2: data.Data.GetErrors:input_type -> data.Name
	22, // 3: data.Data.AddError:input_type -> types.UserError
	22, // 4: data.Data.DeleteError:input_type -> types.UserError
	18, // 5: data.Data.OAuthRegisterState:input_type -> data.OAuthState
	18, // 6: data.Data.OAuthValidateState:input_type -> data.OAuthState
	23, // 7: data.Data.QueueCount:input_type -> google.protobuf.Empty
	15, // 8: data.Data.QueueCountForRepository:input_type -> data.Name
	12, // 9: data.Data.QueueListForRepository:input_type -> data.QueueListRequest
	13, // 10: data.Data.QueueAdd:input_type -> data.QueueList
	24, // 11: data.Data.QueueNext:input_type -> types.QueueRequest
	25, // 12: data.Data.PutStatus:input_type -> types.Status
	26, // 13: data.Data.SetCancel:input_type -> types.IntID
	26, // 14: data.Data.GetCancel:input_type -> types.IntID
	11, // 15: data.Data.GetRefByNameAndSHA:input_type -> data.RefPair
	27, // 16: data.Data.PutRef:input_type -> types.Ref
	10, // 17: data.Data.CancelRefByName:input_type -> data.RepoRef
	26, // 18: data.Data.CancelTask:input_type -> types.IntID
	9,  // 19: data.Data.EnableRepository:input_type -> data.RepoUserSelection
	9,  // 20: data.Data.DisableRepository:input_type -> data.RepoUserSelection
	19, // 21: data.Data.SaveRepositories:input_type -> data.GithubJSON
	17, // 22: data.Data.PrivateRepositories:input_type -> data.NameSearch
	17, // 23: data.Data.OwnedRepositories:input_type -> data.NameSearch
	17, // 24: data.Data.AllRepositories:input_type -> data.NameSearch
	16, // 25: data.Data.PublicRepositories:input_type -> data.Search
	15, // 26: data.Data.GetRepository:input_type -> data.Name
	11, // 27: data.Data.RunCount:input_type -> data.RefPair
	8,  // 28: data.Data.RunList:input_type -> data.RunListRequest
	26, // 29: data.Data.GetRun:input_type -> types.IntID
	26, // 30: data.Data.GetRunUI:input_type -> types.IntID
	28, // 31: data.Data.PutSession:input_type -> types.Session
	29, // 32: data.Data.LoadSession:input_type -> types.StringID
	9,  // 33: data.Data.RemoveSubscription:input_type -> data.RepoUserSelection
	9,  // 34: data.Data.AddSubscription:input_type -> data.RepoUserSelection
	17, // 35: data.Data.ListSubscriptions:input_type -> data.NameSearch
	20, // 36: data.Data.PutSubmission:input_type -> types.Submission
	26, // 37: data.Data.GetSubmission:input_type -> types.IntID
	2,  // 38: data.Data.GetSubmissionTasks:input_type -> data.SubmissionQuery
	2,  // 39: data.Data.GetSubmissionRuns:input_type -> data.SubmissionQuery
	1,  // 40: data.Data.ListSubmissions:input_type -> data.RepositoryFilterRequestWithPagination
	0,  // 41: data.Data.CountSubmissions:input_type -> data.RepositoryFilterRequest
	26, // 42: data.Data.CancelSubmission:input_type -> types.IntID
	30, // 43: data.Data.PutTask:input_type -> types.Task
	7,  // 44: data.Data.ListTasks:input_type -> data.TaskListRequest
	5,  // 45: data.Data.ListSubscribedTasksForUser:input_type -> data.ListSubscribedTasksRequest
	7,  // 46: data.Data.CountTasks:input_type -> data.TaskListRequest
	31, // 47: data.Data.CancelTasksByPR:input_type -> types.CancelPRRequest
	6,  // 48: data.Data.RunsForTask:input_type -> data.RunsForTaskRequest
	26, // 49: data.Data.CountRunsForTask:input_type -> types.IntID
	15, // 50: data.Data.UserByName:input_type -> data.Name
	32, // 51: data.Data.PatchUser:input_type -> types.User
	32, // 52: data.Data.PutUser:input_type -> types.User
	23, // 53: data.Data.ListUsers:input_type -> google.protobuf.Empty
	15, // 54: data.Data.GetToken:input_type -> data.Name
	15, // 55: data.Data.DeleteToken:input_type -> data.Name
	29, // 56: data.Data.ValidateToken:input_type -> types.StringID
	32, // 57: data.Data.GetCapabilities:input_type -> types.User
	4,  // 58: data.Data.HasCapability:input_type -> data.CapabilityRequest
	4,  // 59: data.Data.AddCapability:input_type -> data.CapabilityRequest
	4,  // 60: data.Data.RemoveCapability:input_type -> data.CapabilityRequest
	33, // 61: data.Data.GetErrors:output_type -> types.UserErrors
	23, // 62: data.Data.AddError:output_type -> google.protobuf.Empty
	23, // 63: data.Data.DeleteError:output_type -> google.protobuf.Empty
	23, // 64: data.Data.OAuthRegisterState:output_type -> google.protobuf.Empty
	18, // 65: data.Data.OAuthValidateState:output_type -> data.OAuthState
	14, // 66: data.Data.QueueCount:output_type -> data.Count
	14, // 67: data.Data.QueueCountForRepository:output_type -> data.Count
	13, // 68: data.Data.QueueListForRepository:output_type -> data.QueueList
	13, // 69: data.Data.QueueAdd:output_type -> data.QueueList
	21, // 70: data.Data.QueueNext:output_type -> types.QueueItem
	23, // 71: data.Data.PutStatus:output_type -> google.protobuf.Empty
	23, // 72: data.Data.SetCancel:output_type -> google.protobuf.Empty
	25, // 73: data.Data.GetCancel:output_type -> types.Status
	27, // 74: data.Data.GetRefByNameAndSHA:output_type -> types.Ref
	27, // 75: data.Data.PutRef:output_type -> types.Ref
	23, // 76: data.Data.CancelRefByName:output_type -> google.protobuf.Empty
	23, // 77: data.Data.CancelTask:output_type -> google.protobuf.Empty
	23, // 78: data.Data.EnableRepository:output_type -> google.protobuf.Empty
	23, // 79: data.Data.DisableRepository:output_type -> google.protobuf.Empty
	23, // 80: data.Data.SaveRepositories:output_type -> google.protobuf.Empty
	34, // 81: data.Data.PrivateRepositories:output_type -> types.RepositoryList
	34, // 82: data.Data.OwnedRepositories:output_type -> types.RepositoryList
	34, // 83: data.Data.AllRepositories:output_type -> types.RepositoryList
	34, // 84: data.Data.PublicRepositories:output_type -> types.RepositoryList
	35, // 85: data.Data.GetRepository:output_type -> types.Repository
	14, // 86: data.Data.RunCount:output_type -> data.Count
	36, // 87: data.Data.RunList:output_type -> types.RunList
	37, // 88: data.Data.GetRun:output_type -> types.Run
	37, // 89: data.Data.GetRunUI:output_type -> types.Run
	23, // 90: data.Data.PutSession:output_type -> google.protobuf.Empty
	28, // 91: data.Data.LoadSession:output_type -> types.Session
	23, // 92: data.Data.RemoveSubscription:output_type -> google.protobuf.Empty
	23, // 93: data.Data.AddSubscription:output_type -> google.protobuf.Empty
	34, // 94: data.Data.ListSubscriptions:output_type -> types.RepositoryList
	20, // 95: data.Data.PutSubmission:output_type -> types.Submission
	20, // 96: data.Data.GetSubmission:output_type -> types.Submission
	38, // 97: data.Data.GetSubmissionTasks:output_type -> types.TaskList
	36, // 98: data.Data.GetSubmissionRuns:output_type -> types.RunList
	39, // 99: data.Data.ListSubmissions:output_type -> types.SubmissionList
	14, // 100: data.Data.CountSubmissions:output_type -> data.Count
	23, // 101: data.Data.CancelSubmission:output_type -> google.protobuf.Empty
	30, // 102: data.Data.PutTask:output_type -> types.Task
	38, // 103: data.Data.ListTasks:output_type -> types.TaskList
	38, // 104: data.Data.ListSubscribedTasksForUser:output_type -> types.TaskList
	14, // 105: data.Data.CountTasks:output_type -> data.Count
	23, // 106: data.Data.CancelTasksByPR:output_type -> google.protobuf.Empty
	36, // 107: data.Data.RunsForTask:output_type -> types.RunList
	14, // 108: data.Data.CountRunsForTask:output_type -> data.Count
	32, // 109: data.Data.UserByName:output_type -> types.User
	23, // 110: data.Data.PatchUser:output_type -> google.protobuf.Empty
	32, // 111: data.Data.PutUser:output_type -> types.User
	40, // 112: data.Data.ListUsers:output_type -> types.UserList
	29, // 113: data.Data.GetToken:output_type -> types.StringID
	23, // 114: data.Data.DeleteToken:output_type -> google.protobuf.Empty
	32, // 115: data.Data.ValidateToken:output_type -> types.User
	3,  // 116: data.Data.GetCapabilities:output_type -> data.Capabilities
	41, // 117: data.Data.HasCapability:output_type -> types.Bool
	23, // 118: data.Data.AddCapability:output_type -> google.protobuf.Empty
	23, // 119: data.Data.RemoveCapability:output_type -> google.protobuf.Empty
	61, // [61:120] is the sub-list for method output_type
	2,  // [2:61] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_grpc_services_data_server_proto_init() }
func file_grpc_services_data_server_proto_init() {
	if File_grpc_services_data_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_services_data_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryFilterRequestWithPagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubscribedTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunsForTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoUserSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Count); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Search); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuthState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_data_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubJSON); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_services_data_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_services_data_server_proto_goTypes,
		DependencyIndexes: file_grpc_services_data_server_proto_depIdxs,
		MessageInfos:      file_grpc_services_data_server_proto_msgTypes,
	}.Build()
	File_grpc_services_data_server_proto = out.File
	file_grpc_services_data_server_proto_rawDesc = nil
	file_grpc_services_data_server_proto_goTypes = nil
	file_grpc_services_data_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataClient interface {
	// Retrieve User Error
	GetErrors(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.UserErrors, error)
	// Add A User Error
	AddError(ctx context.Context, in *types.UserError, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete A User Error
	DeleteError(ctx context.Context, in *types.UserError, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Register state with the database.
	OAuthRegisterState(ctx context.Context, in *OAuthState, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Validate returned state within the database.
	OAuthValidateState(ctx context.Context, in *OAuthState, opts ...grpc.CallOption) (*OAuthState, error)
	// QueueCount is the count of the queue
	QueueCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Count, error)
	// QueueCountForRepository counts by repo
	QueueCountForRepository(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Count, error)
	// QueueListForRepository produces a list for the repo of queue items.
	QueueListForRepository(ctx context.Context, in *QueueListRequest, opts ...grpc.CallOption) (*QueueList, error)
	// QueueAdd adds a new QueueList of items
	QueueAdd(ctx context.Context, in *QueueList, opts ...grpc.CallOption) (*QueueList, error)
	// QueueNext retrieves the next item in the queue.
	QueueNext(ctx context.Context, in *types.QueueRequest, opts ...grpc.CallOption) (*types.QueueItem, error)
	// PutStatus sets the status of the run in the DB.
	PutStatus(ctx context.Context, in *types.Status, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetCancel cancels a run.
	SetCancel(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetCancel retrieves the canceled state of the run.
	GetCancel(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Status, error)
	// Given a name and sha, look up the ref.
	GetRefByNameAndSHA(ctx context.Context, in *RefPair, opts ...grpc.CallOption) (*types.Ref, error)
	// PutRef saves a ref.
	PutRef(ctx context.Context, in *types.Ref, opts ...grpc.CallOption) (*types.Ref, error)
	// CancelRefByName cancels by branch or tag name.
	CancelRefByName(ctx context.Context, in *RepoRef, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CancelTask cancels the branch by task ID.
	CancelTask(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Enables repository for testing in CI
	EnableRepository(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Disables repository for testing in CI
	DisableRepository(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Given a JSON list of github responses; save all the repos.
	SaveRepositories(ctx context.Context, in *GithubJSON, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all Private Repositories for the user.
	PrivateRepositories(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error)
	// List all Owned Repositories for the user.
	OwnedRepositories(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error)
	// List all repositories for the user.
	AllRepositories(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error)
	// List all public repositories.
	PublicRepositories(ctx context.Context, in *Search, opts ...grpc.CallOption) (*types.RepositoryList, error)
	// Get a specific repository by name.
	GetRepository(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.Repository, error)
	// Count of runs for the given ref pair
	RunCount(ctx context.Context, in *RefPair, opts ...grpc.CallOption) (*Count, error)
	// List the runs
	RunList(ctx context.Context, in *RunListRequest, opts ...grpc.CallOption) (*types.RunList, error)
	// Get a specific Run
	GetRun(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Run, error)
	// Get a specific Run with security details omitted; for UI work.
	GetRunUI(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Run, error)
	// PutSession saves the session.
	PutSession(ctx context.Context, in *types.Session, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// LoadSession loads the session.
	LoadSession(ctx context.Context, in *types.StringID, opts ...grpc.CallOption) (*types.Session, error)
	// removes the subscription from the user's account.
	RemoveSubscription(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// adds a subscription.
	AddSubscription(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// lists all the subscriptions for the user.
	ListSubscriptions(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error)
	// Add a submission to the db.
	PutSubmission(ctx context.Context, in *types.Submission, opts ...grpc.CallOption) (*types.Submission, error)
	// Look up a submission by ID
	GetSubmission(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Submission, error)
	// Obtain the tasks for a submission
	GetSubmissionTasks(ctx context.Context, in *SubmissionQuery, opts ...grpc.CallOption) (*types.TaskList, error)
	// Obtain the runs for a submission
	GetSubmissionRuns(ctx context.Context, in *SubmissionQuery, opts ...grpc.CallOption) (*types.RunList, error)
	// List the submissions with pagination
	ListSubmissions(ctx context.Context, in *RepositoryFilterRequestWithPagination, opts ...grpc.CallOption) (*types.SubmissionList, error)
	// Count of all submissions optionally filtered by repository and sha
	CountSubmissions(ctx context.Context, in *RepositoryFilterRequest, opts ...grpc.CallOption) (*Count, error)
	// Cancel a submission by ID.
	CancelSubmission(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Add a task to the db.
	PutTask(ctx context.Context, in *types.Task, opts ...grpc.CallOption) (*types.Task, error)
	// List Tasks
	ListTasks(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*types.TaskList, error)
	// List tasks only in the user's subscription list.
	ListSubscribedTasksForUser(ctx context.Context, in *ListSubscribedTasksRequest, opts ...grpc.CallOption) (*types.TaskList, error)
	// Count Tasks
	CountTasks(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*Count, error)
	// cancel a task by pull request ID
	CancelTasksByPR(ctx context.Context, in *types.CancelPRRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get all runs associated with the task.
	RunsForTask(ctx context.Context, in *RunsForTaskRequest, opts ...grpc.CallOption) (*types.RunList, error)
	// Count all associated runs with the task.
	CountRunsForTask(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*Count, error)
	// Get a user by name
	UserByName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.User, error)
	// Update a user -- currently only accepts token changes.
	PatchUser(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create a user
	PutUser(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*types.User, error)
	// List all users.
	ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.UserList, error)
	// Get a auth token (not oauth)
	GetToken(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.StringID, error)
	// Delete the auth token
	DeleteToken(ctx context.Context, in *Name, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Validate the auth token -- returns the user if successful
	ValidateToken(ctx context.Context, in *types.StringID, opts ...grpc.CallOption) (*types.User, error)
	// Retrieves the capabilities for a user
	GetCapabilities(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*Capabilities, error)
	// Returns true if the user has the capability
	HasCapability(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*types.Bool, error)
	// Adds the capability for the user
	AddCapability(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Removes the capability from the user
	RemoveCapability(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataClient(cc grpc.ClientConnInterface) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) GetErrors(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.UserErrors, error) {
	out := new(types.UserErrors)
	err := c.cc.Invoke(ctx, "/data.Data/GetErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) AddError(ctx context.Context, in *types.UserError, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/AddError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteError(ctx context.Context, in *types.UserError, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/DeleteError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) OAuthRegisterState(ctx context.Context, in *OAuthState, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/OAuthRegisterState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) OAuthValidateState(ctx context.Context, in *OAuthState, opts ...grpc.CallOption) (*OAuthState, error) {
	out := new(OAuthState)
	err := c.cc.Invoke(ctx, "/data.Data/OAuthValidateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) QueueCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/data.Data/QueueCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) QueueCountForRepository(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/data.Data/QueueCountForRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) QueueListForRepository(ctx context.Context, in *QueueListRequest, opts ...grpc.CallOption) (*QueueList, error) {
	out := new(QueueList)
	err := c.cc.Invoke(ctx, "/data.Data/QueueListForRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) QueueAdd(ctx context.Context, in *QueueList, opts ...grpc.CallOption) (*QueueList, error) {
	out := new(QueueList)
	err := c.cc.Invoke(ctx, "/data.Data/QueueAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) QueueNext(ctx context.Context, in *types.QueueRequest, opts ...grpc.CallOption) (*types.QueueItem, error) {
	out := new(types.QueueItem)
	err := c.cc.Invoke(ctx, "/data.Data/QueueNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PutStatus(ctx context.Context, in *types.Status, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/PutStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) SetCancel(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/SetCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetCancel(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Status, error) {
	out := new(types.Status)
	err := c.cc.Invoke(ctx, "/data.Data/GetCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetRefByNameAndSHA(ctx context.Context, in *RefPair, opts ...grpc.CallOption) (*types.Ref, error) {
	out := new(types.Ref)
	err := c.cc.Invoke(ctx, "/data.Data/GetRefByNameAndSHA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PutRef(ctx context.Context, in *types.Ref, opts ...grpc.CallOption) (*types.Ref, error) {
	out := new(types.Ref)
	err := c.cc.Invoke(ctx, "/data.Data/PutRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CancelRefByName(ctx context.Context, in *RepoRef, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/CancelRefByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CancelTask(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/CancelTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) EnableRepository(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/EnableRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DisableRepository(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/DisableRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) SaveRepositories(ctx context.Context, in *GithubJSON, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/SaveRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PrivateRepositories(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error) {
	out := new(types.RepositoryList)
	err := c.cc.Invoke(ctx, "/data.Data/PrivateRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) OwnedRepositories(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error) {
	out := new(types.RepositoryList)
	err := c.cc.Invoke(ctx, "/data.Data/OwnedRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) AllRepositories(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error) {
	out := new(types.RepositoryList)
	err := c.cc.Invoke(ctx, "/data.Data/AllRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PublicRepositories(ctx context.Context, in *Search, opts ...grpc.CallOption) (*types.RepositoryList, error) {
	out := new(types.RepositoryList)
	err := c.cc.Invoke(ctx, "/data.Data/PublicRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetRepository(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.Repository, error) {
	out := new(types.Repository)
	err := c.cc.Invoke(ctx, "/data.Data/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RunCount(ctx context.Context, in *RefPair, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/data.Data/RunCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RunList(ctx context.Context, in *RunListRequest, opts ...grpc.CallOption) (*types.RunList, error) {
	out := new(types.RunList)
	err := c.cc.Invoke(ctx, "/data.Data/RunList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetRun(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Run, error) {
	out := new(types.Run)
	err := c.cc.Invoke(ctx, "/data.Data/GetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetRunUI(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Run, error) {
	out := new(types.Run)
	err := c.cc.Invoke(ctx, "/data.Data/GetRunUI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PutSession(ctx context.Context, in *types.Session, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/PutSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) LoadSession(ctx context.Context, in *types.StringID, opts ...grpc.CallOption) (*types.Session, error) {
	out := new(types.Session)
	err := c.cc.Invoke(ctx, "/data.Data/LoadSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RemoveSubscription(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/RemoveSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) AddSubscription(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/AddSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListSubscriptions(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error) {
	out := new(types.RepositoryList)
	err := c.cc.Invoke(ctx, "/data.Data/ListSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PutSubmission(ctx context.Context, in *types.Submission, opts ...grpc.CallOption) (*types.Submission, error) {
	out := new(types.Submission)
	err := c.cc.Invoke(ctx, "/data.Data/PutSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetSubmission(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Submission, error) {
	out := new(types.Submission)
	err := c.cc.Invoke(ctx, "/data.Data/GetSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetSubmissionTasks(ctx context.Context, in *SubmissionQuery, opts ...grpc.CallOption) (*types.TaskList, error) {
	out := new(types.TaskList)
	err := c.cc.Invoke(ctx, "/data.Data/GetSubmissionTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetSubmissionRuns(ctx context.Context, in *SubmissionQuery, opts ...grpc.CallOption) (*types.RunList, error) {
	out := new(types.RunList)
	err := c.cc.Invoke(ctx, "/data.Data/GetSubmissionRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListSubmissions(ctx context.Context, in *RepositoryFilterRequestWithPagination, opts ...grpc.CallOption) (*types.SubmissionList, error) {
	out := new(types.SubmissionList)
	err := c.cc.Invoke(ctx, "/data.Data/ListSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CountSubmissions(ctx context.Context, in *RepositoryFilterRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/data.Data/CountSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CancelSubmission(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/CancelSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PutTask(ctx context.Context, in *types.Task, opts ...grpc.CallOption) (*types.Task, error) {
	out := new(types.Task)
	err := c.cc.Invoke(ctx, "/data.Data/PutTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTasks(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*types.TaskList, error) {
	out := new(types.TaskList)
	err := c.cc.Invoke(ctx, "/data.Data/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListSubscribedTasksForUser(ctx context.Context, in *ListSubscribedTasksRequest, opts ...grpc.CallOption) (*types.TaskList, error) {
	out := new(types.TaskList)
	err := c.cc.Invoke(ctx, "/data.Data/ListSubscribedTasksForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CountTasks(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/data.Data/CountTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CancelTasksByPR(ctx context.Context, in *types.CancelPRRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/CancelTasksByPR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RunsForTask(ctx context.Context, in *RunsForTaskRequest, opts ...grpc.CallOption) (*types.RunList, error) {
	out := new(types.RunList)
	err := c.cc.Invoke(ctx, "/data.Data/RunsForTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CountRunsForTask(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/data.Data/CountRunsForTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UserByName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.User, error) {
	out := new(types.User)
	err := c.cc.Invoke(ctx, "/data.Data/UserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PatchUser(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/PatchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PutUser(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*types.User, error) {
	out := new(types.User)
	err := c.cc.Invoke(ctx, "/data.Data/PutUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.UserList, error) {
	out := new(types.UserList)
	err := c.cc.Invoke(ctx, "/data.Data/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetToken(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.StringID, error) {
	out := new(types.StringID)
	err := c.cc.Invoke(ctx, "/data.Data/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteToken(ctx context.Context, in *Name, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ValidateToken(ctx context.Context, in *types.StringID, opts ...grpc.CallOption) (*types.User, error) {
	out := new(types.User)
	err := c.cc.Invoke(ctx, "/data.Data/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetCapabilities(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*Capabilities, error) {
	out := new(Capabilities)
	err := c.cc.Invoke(ctx, "/data.Data/GetCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) HasCapability(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*types.Bool, error) {
	out := new(types.Bool)
	err := c.cc.Invoke(ctx, "/data.Data/HasCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) AddCapability(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/AddCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RemoveCapability(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/RemoveCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
type DataServer interface {
	// Retrieve User Error
	GetErrors(context.Context, *Name) (*types.UserErrors, error)
	// Add A User Error
	AddError(context.Context, *types.UserError) (*emptypb.Empty, error)
	// Delete A User Error
	DeleteError(context.Context, *types.UserError) (*emptypb.Empty, error)
	// Register state with the database.
	OAuthRegisterState(context.Context, *OAuthState) (*emptypb.Empty, error)
	// Validate returned state within the database.
	OAuthValidateState(context.Context, *OAuthState) (*OAuthState, error)
	// QueueCount is the count of the queue
	QueueCount(context.Context, *emptypb.Empty) (*Count, error)
	// QueueCountForRepository counts by repo
	QueueCountForRepository(context.Context, *Name) (*Count, error)
	// QueueListForRepository produces a list for the repo of queue items.
	QueueListForRepository(context.Context, *QueueListRequest) (*QueueList, error)
	// QueueAdd adds a new QueueList of items
	QueueAdd(context.Context, *QueueList) (*QueueList, error)
	// QueueNext retrieves the next item in the queue.
	QueueNext(context.Context, *types.QueueRequest) (*types.QueueItem, error)
	// PutStatus sets the status of the run in the DB.
	PutStatus(context.Context, *types.Status) (*emptypb.Empty, error)
	// SetCancel cancels a run.
	SetCancel(context.Context, *types.IntID) (*emptypb.Empty, error)
	// GetCancel retrieves the canceled state of the run.
	GetCancel(context.Context, *types.IntID) (*types.Status, error)
	// Given a name and sha, look up the ref.
	GetRefByNameAndSHA(context.Context, *RefPair) (*types.Ref, error)
	// PutRef saves a ref.
	PutRef(context.Context, *types.Ref) (*types.Ref, error)
	// CancelRefByName cancels by branch or tag name.
	CancelRefByName(context.Context, *RepoRef) (*emptypb.Empty, error)
	// CancelTask cancels the branch by task ID.
	CancelTask(context.Context, *types.IntID) (*emptypb.Empty, error)
	// Enables repository for testing in CI
	EnableRepository(context.Context, *RepoUserSelection) (*emptypb.Empty, error)
	// Disables repository for testing in CI
	DisableRepository(context.Context, *RepoUserSelection) (*emptypb.Empty, error)
	// Given a JSON list of github responses; save all the repos.
	SaveRepositories(context.Context, *GithubJSON) (*emptypb.Empty, error)
	// List all Private Repositories for the user.
	PrivateRepositories(context.Context, *NameSearch) (*types.RepositoryList, error)
	// List all Owned Repositories for the user.
	OwnedRepositories(context.Context, *NameSearch) (*types.RepositoryList, error)
	// List all repositories for the user.
	AllRepositories(context.Context, *NameSearch) (*types.RepositoryList, error)
	// List all public repositories.
	PublicRepositories(context.Context, *Search) (*types.RepositoryList, error)
	// Get a specific repository by name.
	GetRepository(context.Context, *Name) (*types.Repository, error)
	// Count of runs for the given ref pair
	RunCount(context.Context, *RefPair) (*Count, error)
	// List the runs
	RunList(context.Context, *RunListRequest) (*types.RunList, error)
	// Get a specific Run
	GetRun(context.Context, *types.IntID) (*types.Run, error)
	// Get a specific Run with security details omitted; for UI work.
	GetRunUI(context.Context, *types.IntID) (*types.Run, error)
	// PutSession saves the session.
	PutSession(context.Context, *types.Session) (*emptypb.Empty, error)
	// LoadSession loads the session.
	LoadSession(context.Context, *types.StringID) (*types.Session, error)
	// removes the subscription from the user's account.
	RemoveSubscription(context.Context, *RepoUserSelection) (*emptypb.Empty, error)
	// adds a subscription.
	AddSubscription(context.Context, *RepoUserSelection) (*emptypb.Empty, error)
	// lists all the subscriptions for the user.
	ListSubscriptions(context.Context, *NameSearch) (*types.RepositoryList, error)
	// Add a submission to the db.
	PutSubmission(context.Context, *types.Submission) (*types.Submission, error)
	// Look up a submission by ID
	GetSubmission(context.Context, *types.IntID) (*types.Submission, error)
	// Obtain the tasks for a submission
	GetSubmissionTasks(context.Context, *SubmissionQuery) (*types.TaskList, error)
	// Obtain the runs for a submission
	GetSubmissionRuns(context.Context, *SubmissionQuery) (*types.RunList, error)
	// List the submissions with pagination
	ListSubmissions(context.Context, *RepositoryFilterRequestWithPagination) (*types.SubmissionList, error)
	// Count of all submissions optionally filtered by repository and sha
	CountSubmissions(context.Context, *RepositoryFilterRequest) (*Count, error)
	// Cancel a submission by ID.
	CancelSubmission(context.Context, *types.IntID) (*emptypb.Empty, error)
	// Add a task to the db.
	PutTask(context.Context, *types.Task) (*types.Task, error)
	// List Tasks
	ListTasks(context.Context, *TaskListRequest) (*types.TaskList, error)
	// List tasks only in the user's subscription list.
	ListSubscribedTasksForUser(context.Context, *ListSubscribedTasksRequest) (*types.TaskList, error)
	// Count Tasks
	CountTasks(context.Context, *TaskListRequest) (*Count, error)
	// cancel a task by pull request ID
	CancelTasksByPR(context.Context, *types.CancelPRRequest) (*emptypb.Empty, error)
	// get all runs associated with the task.
	RunsForTask(context.Context, *RunsForTaskRequest) (*types.RunList, error)
	// Count all associated runs with the task.
	CountRunsForTask(context.Context, *types.IntID) (*Count, error)
	// Get a user by name
	UserByName(context.Context, *Name) (*types.User, error)
	// Update a user -- currently only accepts token changes.
	PatchUser(context.Context, *types.User) (*emptypb.Empty, error)
	// Create a user
	PutUser(context.Context, *types.User) (*types.User, error)
	// List all users.
	ListUsers(context.Context, *emptypb.Empty) (*types.UserList, error)
	// Get a auth token (not oauth)
	GetToken(context.Context, *Name) (*types.StringID, error)
	// Delete the auth token
	DeleteToken(context.Context, *Name) (*emptypb.Empty, error)
	// Validate the auth token -- returns the user if successful
	ValidateToken(context.Context, *types.StringID) (*types.User, error)
	// Retrieves the capabilities for a user
	GetCapabilities(context.Context, *types.User) (*Capabilities, error)
	// Returns true if the user has the capability
	HasCapability(context.Context, *CapabilityRequest) (*types.Bool, error)
	// Adds the capability for the user
	AddCapability(context.Context, *CapabilityRequest) (*emptypb.Empty, error)
	// Removes the capability from the user
	RemoveCapability(context.Context, *CapabilityRequest) (*emptypb.Empty, error)
}

// UnimplementedDataServer can be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (*UnimplementedDataServer) GetErrors(context.Context, *Name) (*types.UserErrors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrors not implemented")
}
func (*UnimplementedDataServer) AddError(context.Context, *types.UserError) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddError not implemented")
}
func (*UnimplementedDataServer) DeleteError(context.Context, *types.UserError) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteError not implemented")
}
func (*UnimplementedDataServer) OAuthRegisterState(context.Context, *OAuthState) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthRegisterState not implemented")
}
func (*UnimplementedDataServer) OAuthValidateState(context.Context, *OAuthState) (*OAuthState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthValidateState not implemented")
}
func (*UnimplementedDataServer) QueueCount(context.Context, *emptypb.Empty) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueCount not implemented")
}
func (*UnimplementedDataServer) QueueCountForRepository(context.Context, *Name) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueCountForRepository not implemented")
}
func (*UnimplementedDataServer) QueueListForRepository(context.Context, *QueueListRequest) (*QueueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueListForRepository not implemented")
}
func (*UnimplementedDataServer) QueueAdd(context.Context, *QueueList) (*QueueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueAdd not implemented")
}
func (*UnimplementedDataServer) QueueNext(context.Context, *types.QueueRequest) (*types.QueueItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueNext not implemented")
}
func (*UnimplementedDataServer) PutStatus(context.Context, *types.Status) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutStatus not implemented")
}
func (*UnimplementedDataServer) SetCancel(context.Context, *types.IntID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCancel not implemented")
}
func (*UnimplementedDataServer) GetCancel(context.Context, *types.IntID) (*types.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCancel not implemented")
}
func (*UnimplementedDataServer) GetRefByNameAndSHA(context.Context, *RefPair) (*types.Ref, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefByNameAndSHA not implemented")
}
func (*UnimplementedDataServer) PutRef(context.Context, *types.Ref) (*types.Ref, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRef not implemented")
}
func (*UnimplementedDataServer) CancelRefByName(context.Context, *RepoRef) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRefByName not implemented")
}
func (*UnimplementedDataServer) CancelTask(context.Context, *types.IntID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (*UnimplementedDataServer) EnableRepository(context.Context, *RepoUserSelection) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableRepository not implemented")
}
func (*UnimplementedDataServer) DisableRepository(context.Context, *RepoUserSelection) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRepository not implemented")
}
func (*UnimplementedDataServer) SaveRepositories(context.Context, *GithubJSON) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRepositories not implemented")
}
func (*UnimplementedDataServer) PrivateRepositories(context.Context, *NameSearch) (*types.RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateRepositories not implemented")
}
func (*UnimplementedDataServer) OwnedRepositories(context.Context, *NameSearch) (*types.RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OwnedRepositories not implemented")
}
func (*UnimplementedDataServer) AllRepositories(context.Context, *NameSearch) (*types.RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllRepositories not implemented")
}
func (*UnimplementedDataServer) PublicRepositories(context.Context, *Search) (*types.RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicRepositories not implemented")
}
func (*UnimplementedDataServer) GetRepository(context.Context, *Name) (*types.Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (*UnimplementedDataServer) RunCount(context.Context, *RefPair) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCount not implemented")
}
func (*UnimplementedDataServer) RunList(context.Context, *RunListRequest) (*types.RunList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunList not implemented")
}
func (*UnimplementedDataServer) GetRun(context.Context, *types.IntID) (*types.Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (*UnimplementedDataServer) GetRunUI(context.Context, *types.IntID) (*types.Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunUI not implemented")
}
func (*UnimplementedDataServer) PutSession(context.Context, *types.Session) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSession not implemented")
}
func (*UnimplementedDataServer) LoadSession(context.Context, *types.StringID) (*types.Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSession not implemented")
}
func (*UnimplementedDataServer) RemoveSubscription(context.Context, *RepoUserSelection) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubscription not implemented")
}
func (*UnimplementedDataServer) AddSubscription(context.Context, *RepoUserSelection) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscription not implemented")
}
func (*UnimplementedDataServer) ListSubscriptions(context.Context, *NameSearch) (*types.RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (*UnimplementedDataServer) PutSubmission(context.Context, *types.Submission) (*types.Submission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSubmission not implemented")
}
func (*UnimplementedDataServer) GetSubmission(context.Context, *types.IntID) (*types.Submission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmission not implemented")
}
func (*UnimplementedDataServer) GetSubmissionTasks(context.Context, *SubmissionQuery) (*types.TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionTasks not implemented")
}
func (*UnimplementedDataServer) GetSubmissionRuns(context.Context, *SubmissionQuery) (*types.RunList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionRuns not implemented")
}
func (*UnimplementedDataServer) ListSubmissions(context.Context, *RepositoryFilterRequestWithPagination) (*types.SubmissionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmissions not implemented")
}
func (*UnimplementedDataServer) CountSubmissions(context.Context, *RepositoryFilterRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSubmissions not implemented")
}
func (*UnimplementedDataServer) CancelSubmission(context.Context, *types.IntID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubmission not implemented")
}
func (*UnimplementedDataServer) PutTask(context.Context, *types.Task) (*types.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTask not implemented")
}
func (*UnimplementedDataServer) ListTasks(context.Context, *TaskListRequest) (*types.TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (*UnimplementedDataServer) ListSubscribedTasksForUser(context.Context, *ListSubscribedTasksRequest) (*types.TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribedTasksForUser not implemented")
}
func (*UnimplementedDataServer) CountTasks(context.Context, *TaskListRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTasks not implemented")
}
func (*UnimplementedDataServer) CancelTasksByPR(context.Context, *types.CancelPRRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTasksByPR not implemented")
}
func (*UnimplementedDataServer) RunsForTask(context.Context, *RunsForTaskRequest) (*types.RunList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunsForTask not implemented")
}
func (*UnimplementedDataServer) CountRunsForTask(context.Context, *types.IntID) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRunsForTask not implemented")
}
func (*UnimplementedDataServer) UserByName(context.Context, *Name) (*types.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserByName not implemented")
}
func (*UnimplementedDataServer) PatchUser(context.Context, *types.User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchUser not implemented")
}
func (*UnimplementedDataServer) PutUser(context.Context, *types.User) (*types.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUser not implemented")
}
func (*UnimplementedDataServer) ListUsers(context.Context, *emptypb.Empty) (*types.UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedDataServer) GetToken(context.Context, *Name) (*types.StringID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedDataServer) DeleteToken(context.Context, *Name) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (*UnimplementedDataServer) ValidateToken(context.Context, *types.StringID) (*types.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (*UnimplementedDataServer) GetCapabilities(context.Context, *types.User) (*Capabilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (*UnimplementedDataServer) HasCapability(context.Context, *CapabilityRequest) (*types.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCapability not implemented")
}
func (*UnimplementedDataServer) AddCapability(context.Context, *CapabilityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCapability not implemented")
}
func (*UnimplementedDataServer) RemoveCapability(context.Context, *CapabilityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCapability not implemented")
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_GetErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetErrors(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_AddError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UserError)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).AddError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/AddError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).AddError(ctx, req.(*types.UserError))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UserError)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/DeleteError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteError(ctx, req.(*types.UserError))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_OAuthRegisterState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).OAuthRegisterState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/OAuthRegisterState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).OAuthRegisterState(ctx, req.(*OAuthState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_OAuthValidateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).OAuthValidateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/OAuthValidateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).OAuthValidateState(ctx, req.(*OAuthState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_QueueCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).QueueCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/QueueCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).QueueCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_QueueCountForRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).QueueCountForRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/QueueCountForRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).QueueCountForRepository(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_QueueListForRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).QueueListForRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/QueueListForRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).QueueListForRepository(ctx, req.(*QueueListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_QueueAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).QueueAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/QueueAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).QueueAdd(ctx, req.(*QueueList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_QueueNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).QueueNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/QueueNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).QueueNext(ctx, req.(*types.QueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PutStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PutStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PutStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PutStatus(ctx, req.(*types.Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_SetCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).SetCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/SetCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).SetCancel(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetCancel(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetRefByNameAndSHA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetRefByNameAndSHA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetRefByNameAndSHA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetRefByNameAndSHA(ctx, req.(*RefPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PutRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Ref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PutRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PutRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PutRef(ctx, req.(*types.Ref))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CancelRefByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CancelRefByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/CancelRefByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CancelRefByName(ctx, req.(*RepoRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/CancelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CancelTask(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_EnableRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoUserSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).EnableRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/EnableRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).EnableRepository(ctx, req.(*RepoUserSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DisableRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoUserSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DisableRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/DisableRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DisableRepository(ctx, req.(*RepoUserSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_SaveRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GithubJSON)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).SaveRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/SaveRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).SaveRepositories(ctx, req.(*GithubJSON))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PrivateRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PrivateRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PrivateRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PrivateRepositories(ctx, req.(*NameSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_OwnedRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).OwnedRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/OwnedRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).OwnedRepositories(ctx, req.(*NameSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_AllRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).AllRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/AllRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).AllRepositories(ctx, req.(*NameSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PublicRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PublicRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PublicRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PublicRepositories(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetRepository(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RunCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RunCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/RunCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RunCount(ctx, req.(*RefPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RunList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RunList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/RunList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RunList(ctx, req.(*RunListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetRun(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetRunUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetRunUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetRunUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetRunUI(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PutSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PutSession(ctx, req.(*types.Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_LoadSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.StringID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).LoadSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/LoadSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).LoadSession(ctx, req.(*types.StringID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RemoveSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoUserSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RemoveSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/RemoveSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RemoveSubscription(ctx, req.(*RepoUserSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_AddSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoUserSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).AddSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/AddSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).AddSubscription(ctx, req.(*RepoUserSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/ListSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListSubscriptions(ctx, req.(*NameSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PutSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Submission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PutSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PutSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PutSubmission(ctx, req.(*types.Submission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetSubmission(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetSubmissionTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmissionQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetSubmissionTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetSubmissionTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetSubmissionTasks(ctx, req.(*SubmissionQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetSubmissionRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmissionQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetSubmissionRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetSubmissionRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetSubmissionRuns(ctx, req.(*SubmissionQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryFilterRequestWithPagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/ListSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListSubmissions(ctx, req.(*RepositoryFilterRequestWithPagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CountSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CountSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/CountSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CountSubmissions(ctx, req.(*RepositoryFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CancelSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CancelSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/CancelSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CancelSubmission(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PutTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PutTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PutTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PutTask(ctx, req.(*types.Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTasks(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListSubscribedTasksForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscribedTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListSubscribedTasksForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/ListSubscribedTasksForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListSubscribedTasksForUser(ctx, req.(*ListSubscribedTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CountTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CountTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/CountTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CountTasks(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CancelTasksByPR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.CancelPRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CancelTasksByPR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/CancelTasksByPR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CancelTasksByPR(ctx, req.(*types.CancelPRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RunsForTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunsForTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RunsForTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/RunsForTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RunsForTask(ctx, req.(*RunsForTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CountRunsForTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CountRunsForTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/CountRunsForTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CountRunsForTask(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/UserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UserByName(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PatchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PatchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PatchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PatchUser(ctx, req.(*types.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PutUser(ctx, req.(*types.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetToken(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteToken(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.StringID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ValidateToken(ctx, req.(*types.StringID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetCapabilities(ctx, req.(*types.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_HasCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).HasCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/HasCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).HasCapability(ctx, req.(*CapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_AddCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).AddCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/AddCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).AddCapability(ctx, req.(*CapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RemoveCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RemoveCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/RemoveCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RemoveCapability(ctx, req.(*CapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetErrors",
			Handler:    _Data_GetErrors_Handler,
		},
		{
			MethodName: "AddError",
			Handler:    _Data_AddError_Handler,
		},
		{
			MethodName: "DeleteError",
			Handler:    _Data_DeleteError_Handler,
		},
		{
			MethodName: "OAuthRegisterState",
			Handler:    _Data_OAuthRegisterState_Handler,
		},
		{
			MethodName: "OAuthValidateState",
			Handler:    _Data_OAuthValidateState_Handler,
		},
		{
			MethodName: "QueueCount",
			Handler:    _Data_QueueCount_Handler,
		},
		{
			MethodName: "QueueCountForRepository",
			Handler:    _Data_QueueCountForRepository_Handler,
		},
		{
			MethodName: "QueueListForRepository",
			Handler:    _Data_QueueListForRepository_Handler,
		},
		{
			MethodName: "QueueAdd",
			Handler:    _Data_QueueAdd_Handler,
		},
		{
			MethodName: "QueueNext",
			Handler:    _Data_QueueNext_Handler,
		},
		{
			MethodName: "PutStatus",
			Handler:    _Data_PutStatus_Handler,
		},
		{
			MethodName: "SetCancel",
			Handler:    _Data_SetCancel_Handler,
		},
		{
			MethodName: "GetCancel",
			Handler:    _Data_GetCancel_Handler,
		},
		{
			MethodName: "GetRefByNameAndSHA",
			Handler:    _Data_GetRefByNameAndSHA_Handler,
		},
		{
			MethodName: "PutRef",
			Handler:    _Data_PutRef_Handler,
		},
		{
			MethodName: "CancelRefByName",
			Handler:    _Data_CancelRefByName_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _Data_CancelTask_Handler,
		},
		{
			MethodName: "EnableRepository",
			Handler:    _Data_EnableRepository_Handler,
		},
		{
			MethodName: "DisableRepository",
			Handler:    _Data_DisableRepository_Handler,
		},
		{
			MethodName: "SaveRepositories",
			Handler:    _Data_SaveRepositories_Handler,
		},
		{
			MethodName: "PrivateRepositories",
			Handler:    _Data_PrivateRepositories_Handler,
		},
		{
			MethodName: "OwnedRepositories",
			Handler:    _Data_OwnedRepositories_Handler,
		},
		{
			MethodName: "AllRepositories",
			Handler:    _Data_AllRepositories_Handler,
		},
		{
			MethodName: "PublicRepositories",
			Handler:    _Data_PublicRepositories_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _Data_GetRepository_Handler,
		},
		{
			MethodName: "RunCount",
			Handler:    _Data_RunCount_Handler,
		},
		{
			MethodName: "RunList",
			Handler:    _Data_RunList_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _Data_GetRun_Handler,
		},
		{
			MethodName: "GetRunUI",
			Handler:    _Data_GetRunUI_Handler,
		},
		{
			MethodName: "PutSession",
			Handler:    _Data_PutSession_Handler,
		},
		{
			MethodName: "LoadSession",
			Handler:    _Data_LoadSession_Handler,
		},
		{
			MethodName: "RemoveSubscription",
			Handler:    _Data_RemoveSubscription_Handler,
		},
		{
			MethodName: "AddSubscription",
			Handler:    _Data_AddSubscription_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _Data_ListSubscriptions_Handler,
		},
		{
			MethodName: "PutSubmission",
			Handler:    _Data_PutSubmission_Handler,
		},
		{
			MethodName: "GetSubmission",
			Handler:    _Data_GetSubmission_Handler,
		},
		{
			MethodName: "GetSubmissionTasks",
			Handler:    _Data_GetSubmissionTasks_Handler,
		},
		{
			MethodName: "GetSubmissionRuns",
			Handler:    _Data_GetSubmissionRuns_Handler,
		},
		{
			MethodName: "ListSubmissions",
			Handler:    _Data_ListSubmissions_Handler,
		},
		{
			MethodName: "CountSubmissions",
			Handler:    _Data_CountSubmissions_Handler,
		},
		{
			MethodName: "CancelSubmission",
			Handler:    _Data_CancelSubmission_Handler,
		},
		{
			MethodName: "PutTask",
			Handler:    _Data_PutTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _Data_ListTasks_Handler,
		},
		{
			MethodName: "ListSubscribedTasksForUser",
			Handler:    _Data_ListSubscribedTasksForUser_Handler,
		},
		{
			MethodName: "CountTasks",
			Handler:    _Data_CountTasks_Handler,
		},
		{
			MethodName: "CancelTasksByPR",
			Handler:    _Data_CancelTasksByPR_Handler,
		},
		{
			MethodName: "RunsForTask",
			Handler:    _Data_RunsForTask_Handler,
		},
		{
			MethodName: "CountRunsForTask",
			Handler:    _Data_CountRunsForTask_Handler,
		},
		{
			MethodName: "UserByName",
			Handler:    _Data_UserByName_Handler,
		},
		{
			MethodName: "PatchUser",
			Handler:    _Data_PatchUser_Handler,
		},
		{
			MethodName: "PutUser",
			Handler:    _Data_PutUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Data_ListUsers_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Data_GetToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _Data_DeleteToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Data_ValidateToken_Handler,
		},
		{
			MethodName: "GetCapabilities",
			Handler:    _Data_GetCapabilities_Handler,
		},
		{
			MethodName: "HasCapability",
			Handler:    _Data_HasCapability_Handler,
		},
		{
			MethodName: "AddCapability",
			Handler:    _Data_AddCapability_Handler,
		},
		{
			MethodName: "RemoveCapability",
			Handler:    _Data_RemoveCapability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/services/data/server.proto",
}
