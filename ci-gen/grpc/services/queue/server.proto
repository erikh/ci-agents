syntax = "proto3";

package queue;

option go_package = "github.com/tinyci/ci-agents/ci-gen/grpc/services/queue";

import "google/protobuf/empty.proto";

import "github.com/tinyci/ci-agents/ci-gen/grpc/types/queue_item.proto";
import "github.com/tinyci/ci-agents/ci-gen/grpc/types/id.proto";

// Queue corresponds to the queuesvc, which is used for managing incoming
// results from the hooksvc (github hooks). Runners hit this as well to send
// states and get next queue items.
service Queue {
  rpc PutStatus(types.Status)           returns (google.protobuf.Empty) {}; // Put the status of the run.
  rpc NextQueueItem(types.QueueRequest) returns (types.QueueItem)       {}; // Get the next queue item. If there are none, an error is returned.
  rpc Submit(Submission)                returns (google.protobuf.Empty) {}; // Submit a branch for testing, see Submission below
  rpc SetCancel(types.IntID)            returns (google.protobuf.Empty) {}; // Initiate a cancel process.
  rpc GetCancel(types.IntID)            returns (types.Status)          {}; // GetCancel retrieves the canceled state. Runners should poll this endpoint to know when to stop.
}

// Submission controls the submission of branches and pull requests. Some
// (noted) properties are not externally modifiable, so they will result in a
// noop if set.
message Submission {
	string  parent        = 1; // Parent repository
  string  fork          = 2; // Fork repository
  string  headsha       = 3; // HEAD SHA -- usually the head of the fork
  string  basesha       = 4; // Base SHA -- usually the head of the parent
  string  submitted_by  = 5; // Who submitted this?
  int64   ticketID      = 6; // PullRequest ID if available -- not set during manual submissions
  bool    all           = 7; // Test all instead of using diff selection; this is a flag in the UI and can also be triggered by tinycli. It is not used in github hooks except for pushes to master.
  bool    manual        = 8; // Flag set if this was a manual submission. Typically managed by the uisvc.
}
