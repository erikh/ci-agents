// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: grpc/services/queue/server.proto

package queue

import (
	context "context"
	types "github.com/tinyci/ci-agents/ci-gen/grpc/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Submission controls the submission of branches and pull requests. Some
// (noted) properties are not externally modifiable, so they will result in a
// noop if set.
type Submission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent      string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`                              // Parent repository
	Fork        string `protobuf:"bytes,2,opt,name=fork,proto3" json:"fork,omitempty"`                                  // Fork repository
	Headsha     string `protobuf:"bytes,3,opt,name=headsha,proto3" json:"headsha,omitempty"`                            // HEAD SHA -- usually the head of the fork
	Basesha     string `protobuf:"bytes,4,opt,name=basesha,proto3" json:"basesha,omitempty"`                            // Base SHA -- usually the head of the parent
	SubmittedBy string `protobuf:"bytes,5,opt,name=submitted_by,json=submittedBy,proto3" json:"submitted_by,omitempty"` // Who submitted this?
	TicketID    int64  `protobuf:"varint,6,opt,name=ticketID,proto3" json:"ticketID,omitempty"`                         // PullRequest ID if available -- not set during manual submissions
	All         bool   `protobuf:"varint,7,opt,name=all,proto3" json:"all,omitempty"`                                   // Test all instead of using diff selection; this is a flag in the UI and can also be triggered by tinycli. It is not used in github hooks except for pushes to master.
	Manual      bool   `protobuf:"varint,8,opt,name=manual,proto3" json:"manual,omitempty"`                             // Flag set if this was a manual submission. Typically managed by the uisvc.
}

func (x *Submission) Reset() {
	*x = Submission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_queue_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_queue_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_grpc_services_queue_server_proto_rawDescGZIP(), []int{0}
}

func (x *Submission) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Submission) GetFork() string {
	if x != nil {
		return x.Fork
	}
	return ""
}

func (x *Submission) GetHeadsha() string {
	if x != nil {
		return x.Headsha
	}
	return ""
}

func (x *Submission) GetBasesha() string {
	if x != nil {
		return x.Basesha
	}
	return ""
}

func (x *Submission) GetSubmittedBy() string {
	if x != nil {
		return x.SubmittedBy
	}
	return ""
}

func (x *Submission) GetTicketID() int64 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

func (x *Submission) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *Submission) GetManual() bool {
	if x != nil {
		return x.Manual
	}
	return false
}

var File_grpc_services_queue_server_proto protoreflect.FileDescriptor

var file_grpc_services_queue_server_proto_rawDesc = []byte{
	0x0a, 0x20, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5,
	0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x73, 0x68, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x73, 0x68, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x73, 0x68, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x32, 0x8f, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x34, 0x0a, 0x09, 0x50, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00,
	0x12, 0x35, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x11, 0x2e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x63, 0x69, 0x2f, 0x63, 0x69,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_services_queue_server_proto_rawDescOnce sync.Once
	file_grpc_services_queue_server_proto_rawDescData = file_grpc_services_queue_server_proto_rawDesc
)

func file_grpc_services_queue_server_proto_rawDescGZIP() []byte {
	file_grpc_services_queue_server_proto_rawDescOnce.Do(func() {
		file_grpc_services_queue_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_services_queue_server_proto_rawDescData)
	})
	return file_grpc_services_queue_server_proto_rawDescData
}

var file_grpc_services_queue_server_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_grpc_services_queue_server_proto_goTypes = []interface{}{
	(*Submission)(nil),         // 0: queue.Submission
	(*types.Status)(nil),       // 1: types.Status
	(*types.QueueRequest)(nil), // 2: types.QueueRequest
	(*types.IntID)(nil),        // 3: types.IntID
	(*emptypb.Empty)(nil),      // 4: google.protobuf.Empty
	(*types.QueueItem)(nil),    // 5: types.QueueItem
}
var file_grpc_services_queue_server_proto_depIdxs = []int32{
	1, // 0: queue.Queue.PutStatus:input_type -> types.Status
	2, // 1: queue.Queue.NextQueueItem:input_type -> types.QueueRequest
	0, // 2: queue.Queue.Submit:input_type -> queue.Submission
	3, // 3: queue.Queue.SetCancel:input_type -> types.IntID
	3, // 4: queue.Queue.GetCancel:input_type -> types.IntID
	4, // 5: queue.Queue.PutStatus:output_type -> google.protobuf.Empty
	5, // 6: queue.Queue.NextQueueItem:output_type -> types.QueueItem
	4, // 7: queue.Queue.Submit:output_type -> google.protobuf.Empty
	4, // 8: queue.Queue.SetCancel:output_type -> google.protobuf.Empty
	1, // 9: queue.Queue.GetCancel:output_type -> types.Status
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_grpc_services_queue_server_proto_init() }
func file_grpc_services_queue_server_proto_init() {
	if File_grpc_services_queue_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_services_queue_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Submission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_services_queue_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_services_queue_server_proto_goTypes,
		DependencyIndexes: file_grpc_services_queue_server_proto_depIdxs,
		MessageInfos:      file_grpc_services_queue_server_proto_msgTypes,
	}.Build()
	File_grpc_services_queue_server_proto = out.File
	file_grpc_services_queue_server_proto_rawDesc = nil
	file_grpc_services_queue_server_proto_goTypes = nil
	file_grpc_services_queue_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QueueClient is the client API for Queue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueueClient interface {
	PutStatus(ctx context.Context, in *types.Status, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NextQueueItem(ctx context.Context, in *types.QueueRequest, opts ...grpc.CallOption) (*types.QueueItem, error)
	Submit(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetCancel(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCancel(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Status, error)
}

type queueClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueClient(cc grpc.ClientConnInterface) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) PutStatus(ctx context.Context, in *types.Status, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/queue.Queue/PutStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) NextQueueItem(ctx context.Context, in *types.QueueRequest, opts ...grpc.CallOption) (*types.QueueItem, error) {
	out := new(types.QueueItem)
	err := c.cc.Invoke(ctx, "/queue.Queue/NextQueueItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) Submit(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/queue.Queue/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) SetCancel(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/queue.Queue/SetCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) GetCancel(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Status, error) {
	out := new(types.Status)
	err := c.cc.Invoke(ctx, "/queue.Queue/GetCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServer is the server API for Queue service.
type QueueServer interface {
	PutStatus(context.Context, *types.Status) (*emptypb.Empty, error)
	NextQueueItem(context.Context, *types.QueueRequest) (*types.QueueItem, error)
	Submit(context.Context, *Submission) (*emptypb.Empty, error)
	SetCancel(context.Context, *types.IntID) (*emptypb.Empty, error)
	GetCancel(context.Context, *types.IntID) (*types.Status, error)
}

// UnimplementedQueueServer can be embedded to have forward compatible implementations.
type UnimplementedQueueServer struct {
}

func (*UnimplementedQueueServer) PutStatus(context.Context, *types.Status) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutStatus not implemented")
}
func (*UnimplementedQueueServer) NextQueueItem(context.Context, *types.QueueRequest) (*types.QueueItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextQueueItem not implemented")
}
func (*UnimplementedQueueServer) Submit(context.Context, *Submission) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (*UnimplementedQueueServer) SetCancel(context.Context, *types.IntID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCancel not implemented")
}
func (*UnimplementedQueueServer) GetCancel(context.Context, *types.IntID) (*types.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCancel not implemented")
}

func RegisterQueueServer(s *grpc.Server, srv QueueServer) {
	s.RegisterService(&_Queue_serviceDesc, srv)
}

func _Queue_PutStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).PutStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.Queue/PutStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).PutStatus(ctx, req.(*types.Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_NextQueueItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).NextQueueItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.Queue/NextQueueItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).NextQueueItem(ctx, req.(*types.QueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Submission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.Queue/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Submit(ctx, req.(*Submission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_SetCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).SetCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.Queue/SetCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).SetCancel(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_GetCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).GetCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.Queue/GetCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).GetCancel(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Queue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "queue.Queue",
	HandlerType: (*QueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutStatus",
			Handler:    _Queue_PutStatus_Handler,
		},
		{
			MethodName: "NextQueueItem",
			Handler:    _Queue_NextQueueItem_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _Queue_Submit_Handler,
		},
		{
			MethodName: "SetCancel",
			Handler:    _Queue_SetCancel_Handler,
		},
		{
			MethodName: "GetCancel",
			Handler:    _Queue_GetCancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/services/queue/server.proto",
}
