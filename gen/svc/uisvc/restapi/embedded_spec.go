// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "API for the user interface service; the service that is directly responsible for presenting data to users.\nThis service typically runs at the border, and leverages session cookies or authentication tokens that we generate for users. It also is responsible for handling the act of oauth and user creation through its login hooks.\nuisvc typically talks to the datasvc and other services to accomplish its goal, it does not save anything locally or carry state.\n",
    "title": "uisvc",
    "version": "1.0.0"
  },
  "paths": {
    "/cancel/{run_id}": {
      "post": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Cancel the run by ID; this will actually trickle back and cancel the whole task, since it can no longer succeed in any way.\nPlease keep in mind to stop runs, runners must implement a cancel poller.\n",
        "summary": "Cancel by Run ID",
        "parameters": [
          {
            "type": "integer",
            "description": "The ID of the run to retrieve",
            "name": "run_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        },
        "x-capability": "cancel"
      }
    },
    "/capabilities/{username}/{capability}": {
      "post": {
        "security": [
          {
            "session": []
          },
          {
            "token": []
          }
        ],
        "description": "Add a named capability for a provided user ID. Requires the user have the 'modify:user' capability.",
        "summary": "Add a named capability",
        "parameters": [
          {
            "type": "string",
            "description": "The user ID to add the capability to.\n",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the capability to add.\n",
            "name": "capability",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The capability was successfully added"
          },
          "500": {
            "description": "An error occurred adding. Body has error result.",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        },
        "x-capability": "modify:user"
      },
      "delete": {
        "security": [
          {
            "session": []
          },
          {
            "token": []
          }
        ],
        "description": "Remove a named capability from a provided user ID. Requires the user have the 'modify:user' capability.",
        "summary": "Remove a named capability",
        "parameters": [
          {
            "type": "string",
            "description": "The user ID to remove the capability from.\n",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the capability to remove.\n",
            "name": "capability",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The capability was successfully removed"
          },
          "500": {
            "description": "An error occurred adding. Body has error result.",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        },
        "x-capability": "modify:user"
      }
    },
    "/errors": {
      "get": {
        "security": [
          {
            "session": []
          }
        ],
        "description": "Server retrieves any errors the last call(s) have set for you.",
        "summary": "Retrieve errors",
        "responses": {
          "200": {
            "description": "Any errors returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "../models.yml#/definitions/UserError"
              }
            }
          },
          "500": {
            "description": "An error occurred. Body has error result.",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/log/attach/{id}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "For a given ID, find the log and if it is running, attach to it and start receiving the latest content from it.\n",
        "summary": "Attach to a running log",
        "parameters": [
          {
            "type": "integer",
            "description": "The ID of the run to retrieve the log for.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "101": {
            "description": "Established websocket"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        },
        "x-websocket": "read"
      }
    },
    "/loggedin": {
      "get": {
        "description": "Validate the logged-in status of the user. Validates the session cookie against the internal database.\nIf the user is logged in, a JSON string of \"true\" will be sent; otherwise an oauth redirect url will be passed for calling out to by the client.\n",
        "summary": "Check logged in state",
        "responses": {
          "200": {
            "description": "Either \"true\" or the URL to the oauth challenge.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "An error occurred. Body has error result.",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "description": "Handle the server side of the oauth challenge. It is important to preserve the cookie jar after this call is made, as session cookies are used to manage many of the calls in this API.\n",
        "summary": "Log into the system",
        "parameters": [
          {
            "type": "string",
            "description": "The code github sent back to us with the callback, we use it in the OAuth2 exchange to validate the request.\n",
            "name": "code",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The state (randomized string) we sent with the original link; this is echoed back to us so we can further identify the user.\n",
            "name": "state",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "Redirection to another page indicates success of the login function. Follow the redirection to complete the login process. If the location is \"/\", that means login was successful.\n"
          },
          "500": {
            "description": "An error occurred. Body has error result.",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/logout": {
      "get": {
        "security": [
          {
            "session": []
          }
        ],
        "description": "Conveniently clears session cookies. You will need to login again. Does not clear oauth tokens.\n",
        "summary": "Log out of the system",
        "responses": {
          "302": {
            "description": "Redirection to another page indicates success."
          },
          "500": {
            "description": "An error occurred. Body has error result.",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/repositories/ci/add/{owner}/{repo}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Generates a hook secret and populates the user's repository with it and the hook URL. Returns 200 on success, 500 + error message on failure, or if the repository has already been added to CI.\n",
        "summary": "Add a specific repository to CI.",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo'\n",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repository, the second half of the github repository name such as 'foo' in 'erikh/foo'.\n",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        },
        "x-capability": "modify:ci"
      }
    },
    "/repositories/ci/del/{owner}/{repo}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Will fail if not added to CI already; does not currently clear the hook.\n",
        "summary": "Removes a specific repository from CI.",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo'\n",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repository, the second half of the github repository name such as 'foo' in 'erikh/foo'.\n",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        },
        "x-capability": "modify:ci"
      }
    },
    "/repositories/my": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Returns a types.RepositoryList for all the repos a user has write access to.",
        "summary": "Fetch all the writable repositories for the user.",
        "parameters": [
          {
            "type": "string",
            "description": "search string by which to filter results",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../models.yml#/definitions/RepositoryList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/repositories/sub/add/{owner}/{repo}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Subscribing makes that repo's queue items appear in your home view. Returns 200 on success, 500 + error on failure.\n",
        "summary": "Subscribe to a repository running CI",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo'\n",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo'\n",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/repositories/sub/del/{owner}/{repo}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Unsubscribing removes any existing subscription. Either way, if nothing broke, it returns 200. Otherwise it returns 500 and the error.\n",
        "summary": "Unsubscribe from a repository",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo'\n",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo'\n",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/repositories/subscribed": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Returns a types.RepositoryList of all the repos the user is subscribed to.",
        "summary": "List all subscribed repositories",
        "parameters": [
          {
            "type": "string",
            "description": "search string by which to filter results",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../models.yml#/definitions/RepositoryList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/repositories/visible": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Returns a types.RepositoryList for all the repos a user has view access to.",
        "summary": "Fetch all the repositories the user can view.",
        "parameters": [
          {
            "type": "string",
            "description": "search string by which to filter results",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../models.yml#/definitions/RepositoryList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/run/{run_id}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Retrieve a Run by ID; this will return the full Run object including all relationships.",
        "summary": "Get a run by ID",
        "parameters": [
          {
            "type": "integer",
            "description": "The ID of the run to retrieve",
            "name": "run_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../models.yml#/definitions/Run"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/runs": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "List all the runs, optionally filtering by repository or repository+SHA. Pagination controls are available.\n",
        "summary": "Obtain the run list for the user",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "pagination control: what page to retrieve in the query.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 100,
            "description": "pagination control: how many items counts as a page.",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "description": "optional; the repository name to get the tasks for.",
            "name": "repository",
            "in": "query"
          },
          {
            "type": "string",
            "description": "optional; the sha to get the tasks for.",
            "name": "sha",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../models.yml#/definitions/RunList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/runs/count": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Count the runs, optionally filtering by repository or repository+SHA.\n",
        "summary": "Count the runs",
        "parameters": [
          {
            "type": "string",
            "name": "repository",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sha",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "integer"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/submit": {
      "get": {
        "security": [
          {
            "session": []
          },
          {
            "token": []
          }
        ],
        "description": "This allows a user to push a job instead of pushing to git or filing a pull request to trigger a job. It is available on the tinyCI UI and CLI client.\n",
        "summary": "Perform a manual submission to tinyCI",
        "parameters": [
          {
            "type": "string",
            "description": "the repository owner/repo to be tested.",
            "name": "repository",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "the sha or branch to be tested",
            "name": "sha",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Run all tests instead of relying on diff selection to pick them.",
            "name": "all",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "An error occurred. Body has error result.",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        },
        "x-capability": "submit"
      }
    },
    "/tasks": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "The tasks list returns a list of Task objects that correspond to the query. Each query may contain pagination or filtering rules to limit its contents. It is strongly recommended to look at the \"count\" equivalents for these endpoints so that you can implement pagination more simply.\n",
        "summary": "Obtain the task list optionally filtering by repository and sha.",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "pagination control: what page to retrieve in the query.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 100,
            "description": "pagination control: how many items counts as a page.",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "description": "optional; the repository name to get the tasks for.",
            "name": "repository",
            "in": "query"
          },
          {
            "type": "string",
            "description": "optional; the sha to get the tasks for.",
            "name": "sha",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../models.yml#/definitions/TaskList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/tasks/count": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Perform a full count of tasks that meet the filter criteria (which can be no filter) and return it as integer.\n",
        "summary": "Count the Tasks",
        "parameters": [
          {
            "type": "string",
            "description": "optional; repository for filtering",
            "name": "repository",
            "in": "query"
          },
          {
            "type": "string",
            "description": "optional; sha for filtering",
            "name": "sha",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "integer"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/tasks/runs/{id}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "The queue list only contains: * stuff * other junk\n",
        "summary": "Obtain the run list based on the task ID.",
        "parameters": [
          {
            "type": "integer",
            "description": "the ID of the Task",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 0,
            "description": "pagination control: what page to retrieve in the query.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 100,
            "description": "pagination control: how many items counts as a page.",
            "name": "perPage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../models.yml#/definitions/RunList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/tasks/runs/{id}/count": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Get the count of runs that correspond to the task ID. Returns an integer.\n",
        "summary": "Count the runs corresponding to the task ID.",
        "parameters": [
          {
            "type": "integer",
            "description": "the ID of the Task.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "integer"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/tasks/subscribed": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "This call implements basic pagination over the entire task corpus that intersects with your subscription list. It returns a list of tasks.\n",
        "summary": "Obtain the list of tasks that belong to repositories you are subscribed to.",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "pagination control: what page to retrieve in the query.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 100,
            "description": "pagination control: how many items counts as a page.",
            "name": "perPage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../models.yml#/definitions/TaskList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/token": {
      "get": {
        "security": [
          {
            "session": []
          }
        ],
        "description": "This will allow you unfettered access to the system as your user that you request the token with.\n",
        "summary": "Get a tinyCI access token",
        "responses": {
          "200": {
            "description": "Returns the token which you can pass as a bearer token in headers for further requests as this user.\n",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "An error occurred.",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "token": []
          }
        ],
        "description": "The next GET /token will create a new one. This will just remove it.\n",
        "summary": "Remove and reset your tinyCI access token",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/properties": {
      "get": {
        "security": [
          {
            "session": []
          },
          {
            "token": []
          }
        ],
        "description": "Get information about the current user, such as the username.\n",
        "summary": "Get information about the current user",
        "responses": {
          "200": {
            "description": "An object containing user properties\n"
          },
          "500": {
            "description": "An error occurred. Body has error result.",
            "schema": {
              "$ref": "../models.yml#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "session": {
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    },
    "token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "API for the user interface service; the service that is directly responsible for presenting data to users.\nThis service typically runs at the border, and leverages session cookies or authentication tokens that we generate for users. It also is responsible for handling the act of oauth and user creation through its login hooks.\nuisvc typically talks to the datasvc and other services to accomplish its goal, it does not save anything locally or carry state.\n",
    "title": "uisvc",
    "version": "1.0.0"
  },
  "paths": {
    "/cancel/{run_id}": {
      "post": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Cancel the run by ID; this will actually trickle back and cancel the whole task, since it can no longer succeed in any way.\nPlease keep in mind to stop runs, runners must implement a cancel poller.\n",
        "summary": "Cancel by Run ID",
        "parameters": [
          {
            "type": "integer",
            "description": "The ID of the run to retrieve",
            "name": "run_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-capability": "cancel"
      }
    },
    "/capabilities/{username}/{capability}": {
      "post": {
        "security": [
          {
            "session": []
          },
          {
            "token": []
          }
        ],
        "description": "Add a named capability for a provided user ID. Requires the user have the 'modify:user' capability.",
        "summary": "Add a named capability",
        "parameters": [
          {
            "type": "string",
            "description": "The user ID to add the capability to.\n",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the capability to add.\n",
            "name": "capability",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The capability was successfully added"
          },
          "500": {
            "description": "An error occurred adding. Body has error result.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-capability": "modify:user"
      },
      "delete": {
        "security": [
          {
            "session": []
          },
          {
            "token": []
          }
        ],
        "description": "Remove a named capability from a provided user ID. Requires the user have the 'modify:user' capability.",
        "summary": "Remove a named capability",
        "parameters": [
          {
            "type": "string",
            "description": "The user ID to remove the capability from.\n",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the capability to remove.\n",
            "name": "capability",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The capability was successfully removed"
          },
          "500": {
            "description": "An error occurred adding. Body has error result.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-capability": "modify:user"
      }
    },
    "/errors": {
      "get": {
        "security": [
          {
            "session": []
          }
        ],
        "description": "Server retrieves any errors the last call(s) have set for you.",
        "summary": "Retrieve errors",
        "responses": {
          "200": {
            "description": "Any errors returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/userError"
              }
            }
          },
          "500": {
            "description": "An error occurred. Body has error result.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/log/attach/{id}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "For a given ID, find the log and if it is running, attach to it and start receiving the latest content from it.\n",
        "summary": "Attach to a running log",
        "parameters": [
          {
            "type": "integer",
            "description": "The ID of the run to retrieve the log for.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "101": {
            "description": "Established websocket"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-websocket": "read"
      }
    },
    "/loggedin": {
      "get": {
        "description": "Validate the logged-in status of the user. Validates the session cookie against the internal database.\nIf the user is logged in, a JSON string of \"true\" will be sent; otherwise an oauth redirect url will be passed for calling out to by the client.\n",
        "summary": "Check logged in state",
        "responses": {
          "200": {
            "description": "Either \"true\" or the URL to the oauth challenge.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "An error occurred. Body has error result.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "description": "Handle the server side of the oauth challenge. It is important to preserve the cookie jar after this call is made, as session cookies are used to manage many of the calls in this API.\n",
        "summary": "Log into the system",
        "parameters": [
          {
            "type": "string",
            "description": "The code github sent back to us with the callback, we use it in the OAuth2 exchange to validate the request.\n",
            "name": "code",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The state (randomized string) we sent with the original link; this is echoed back to us so we can further identify the user.\n",
            "name": "state",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "Redirection to another page indicates success of the login function. Follow the redirection to complete the login process. If the location is \"/\", that means login was successful.\n"
          },
          "500": {
            "description": "An error occurred. Body has error result.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/logout": {
      "get": {
        "security": [
          {
            "session": []
          }
        ],
        "description": "Conveniently clears session cookies. You will need to login again. Does not clear oauth tokens.\n",
        "summary": "Log out of the system",
        "responses": {
          "302": {
            "description": "Redirection to another page indicates success."
          },
          "500": {
            "description": "An error occurred. Body has error result.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/repositories/ci/add/{owner}/{repo}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Generates a hook secret and populates the user's repository with it and the hook URL. Returns 200 on success, 500 + error message on failure, or if the repository has already been added to CI.\n",
        "summary": "Add a specific repository to CI.",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo'\n",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repository, the second half of the github repository name such as 'foo' in 'erikh/foo'.\n",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-capability": "modify:ci"
      }
    },
    "/repositories/ci/del/{owner}/{repo}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Will fail if not added to CI already; does not currently clear the hook.\n",
        "summary": "Removes a specific repository from CI.",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo'\n",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repository, the second half of the github repository name such as 'foo' in 'erikh/foo'.\n",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-capability": "modify:ci"
      }
    },
    "/repositories/my": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Returns a types.RepositoryList for all the repos a user has write access to.",
        "summary": "Fetch all the writable repositories for the user.",
        "parameters": [
          {
            "type": "string",
            "description": "search string by which to filter results",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/repositoryList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/repositories/sub/add/{owner}/{repo}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Subscribing makes that repo's queue items appear in your home view. Returns 200 on success, 500 + error on failure.\n",
        "summary": "Subscribe to a repository running CI",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo'\n",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo'\n",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/repositories/sub/del/{owner}/{repo}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Unsubscribing removes any existing subscription. Either way, if nothing broke, it returns 200. Otherwise it returns 500 and the error.\n",
        "summary": "Unsubscribe from a repository",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo'\n",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "owner of the repository, first part of github repository name such as 'erikh' in 'erikh/foo'\n",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/repositories/subscribed": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Returns a types.RepositoryList of all the repos the user is subscribed to.",
        "summary": "List all subscribed repositories",
        "parameters": [
          {
            "type": "string",
            "description": "search string by which to filter results",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/repositoryList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/repositories/visible": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Returns a types.RepositoryList for all the repos a user has view access to.",
        "summary": "Fetch all the repositories the user can view.",
        "parameters": [
          {
            "type": "string",
            "description": "search string by which to filter results",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/repositoryList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/run/{run_id}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Retrieve a Run by ID; this will return the full Run object including all relationships.",
        "summary": "Get a run by ID",
        "parameters": [
          {
            "type": "integer",
            "description": "The ID of the run to retrieve",
            "name": "run_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/run"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/runs": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "List all the runs, optionally filtering by repository or repository+SHA. Pagination controls are available.\n",
        "summary": "Obtain the run list for the user",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "pagination control: what page to retrieve in the query.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 100,
            "description": "pagination control: how many items counts as a page.",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "description": "optional; the repository name to get the tasks for.",
            "name": "repository",
            "in": "query"
          },
          {
            "type": "string",
            "description": "optional; the sha to get the tasks for.",
            "name": "sha",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/runList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/runs/count": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Count the runs, optionally filtering by repository or repository+SHA.\n",
        "summary": "Count the runs",
        "parameters": [
          {
            "type": "string",
            "name": "repository",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sha",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "integer"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/submit": {
      "get": {
        "security": [
          {
            "session": []
          },
          {
            "token": []
          }
        ],
        "description": "This allows a user to push a job instead of pushing to git or filing a pull request to trigger a job. It is available on the tinyCI UI and CLI client.\n",
        "summary": "Perform a manual submission to tinyCI",
        "parameters": [
          {
            "type": "string",
            "description": "the repository owner/repo to be tested.",
            "name": "repository",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "the sha or branch to be tested",
            "name": "sha",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Run all tests instead of relying on diff selection to pick them.",
            "name": "all",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "An error occurred. Body has error result.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-capability": "submit"
      }
    },
    "/tasks": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "The tasks list returns a list of Task objects that correspond to the query. Each query may contain pagination or filtering rules to limit its contents. It is strongly recommended to look at the \"count\" equivalents for these endpoints so that you can implement pagination more simply.\n",
        "summary": "Obtain the task list optionally filtering by repository and sha.",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "pagination control: what page to retrieve in the query.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 100,
            "description": "pagination control: how many items counts as a page.",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "description": "optional; the repository name to get the tasks for.",
            "name": "repository",
            "in": "query"
          },
          {
            "type": "string",
            "description": "optional; the sha to get the tasks for.",
            "name": "sha",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/taskList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/tasks/count": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Perform a full count of tasks that meet the filter criteria (which can be no filter) and return it as integer.\n",
        "summary": "Count the Tasks",
        "parameters": [
          {
            "type": "string",
            "description": "optional; repository for filtering",
            "name": "repository",
            "in": "query"
          },
          {
            "type": "string",
            "description": "optional; sha for filtering",
            "name": "sha",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "integer"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/tasks/runs/{id}": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "The queue list only contains: * stuff * other junk\n",
        "summary": "Obtain the run list based on the task ID.",
        "parameters": [
          {
            "type": "integer",
            "description": "the ID of the Task",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 0,
            "description": "pagination control: what page to retrieve in the query.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 100,
            "description": "pagination control: how many items counts as a page.",
            "name": "perPage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/runList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/tasks/runs/{id}/count": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "Get the count of runs that correspond to the task ID. Returns an integer.\n",
        "summary": "Count the runs corresponding to the task ID.",
        "parameters": [
          {
            "type": "integer",
            "description": "the ID of the Task.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "integer"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/tasks/subscribed": {
      "get": {
        "security": [
          {
            "token": []
          },
          {
            "session": []
          }
        ],
        "description": "This call implements basic pagination over the entire task corpus that intersects with your subscription list. It returns a list of tasks.\n",
        "summary": "Obtain the list of tasks that belong to repositories you are subscribed to.",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "pagination control: what page to retrieve in the query.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 100,
            "description": "pagination control: how many items counts as a page.",
            "name": "perPage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/taskList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/token": {
      "get": {
        "security": [
          {
            "session": []
          }
        ],
        "description": "This will allow you unfettered access to the system as your user that you request the token with.\n",
        "summary": "Get a tinyCI access token",
        "responses": {
          "200": {
            "description": "Returns the token which you can pass as a bearer token in headers for further requests as this user.\n",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "An error occurred.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "token": []
          }
        ],
        "description": "The next GET /token will create a new one. This will just remove it.\n",
        "summary": "Remove and reset your tinyCI access token",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/properties": {
      "get": {
        "security": [
          {
            "session": []
          },
          {
            "token": []
          }
        ],
        "description": "Get information about the current user, such as the username.\n",
        "summary": "Get information about the current user",
        "responses": {
          "200": {
            "description": "An object containing user properties\n"
          },
          "500": {
            "description": "An error occurred. Body has error result.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "log": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "repositoryList": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "auto_created": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "github": {
            "type": "object",
            "additionalProperties": true
          },
          "hook_secret": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "private": {
            "type": "boolean"
          }
        }
      }
    },
    "run": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "finished_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "example": "my-run"
        },
        "settings": {
          "type": "object",
          "properties": {
            "command": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "image": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "associatedProperties": true
            },
            "name": {
              "type": "string"
            },
            "queue": {
              "type": "string"
            },
            "timeout": {
              "type": "integer"
            }
          }
        },
        "started_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "status": {
          "type": "boolean",
          "x-nullable": true
        },
        "task": {
          "type": "object",
          "properties": {
            "base_sha": {
              "type": "string"
            },
            "canceled": {
              "type": "boolean"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "finished_at": {
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "id": {
              "type": "integer"
            },
            "parent": {
              "type": "object",
              "properties": {
                "auto_created": {
                  "type": "boolean"
                },
                "disabled": {
                  "type": "boolean"
                },
                "github": {
                  "type": "object",
                  "additionalProperties": true
                },
                "hook_secret": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "private": {
                  "type": "boolean"
                }
              }
            },
            "path": {
              "type": "string"
            },
            "pull_request_id": {
              "type": "integer"
            },
            "ref": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "ref_name": {
                  "type": "string"
                },
                "repository": {
                  "type": "object",
                  "properties": {
                    "auto_created": {
                      "type": "boolean"
                    },
                    "disabled": {
                      "type": "boolean"
                    },
                    "github": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "hook_secret": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "private": {
                      "type": "boolean"
                    }
                  }
                },
                "sha": {
                  "type": "string"
                }
              }
            },
            "settings": {
              "type": "object",
              "properties": {
                "config": {
                  "type": "object",
                  "properties": {
                    "global_timeout": {
                      "type": "integer"
                    },
                    "override_queue": {
                      "type": "boolean"
                    },
                    "override_timeout": {
                      "type": "boolean"
                    },
                    "queue": {
                      "type": "string"
                    },
                    "workdir": {
                      "type": "string"
                    }
                  }
                },
                "default_image": {
                  "type": "string"
                },
                "default_queue": {
                  "type": "string",
                  "x-nullable": false
                },
                "default_timeout": {
                  "description": "the default timeout; in nanoseconds",
                  "type": "integer"
                },
                "env": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "metadata": {
                  "type": "object"
                },
                "mountpoint": {
                  "type": "string"
                },
                "runs": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "command": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "image": {
                        "type": "string"
                      },
                      "metadata": {
                        "type": "object",
                        "associatedProperties": true
                      },
                      "name": {
                        "type": "string"
                      },
                      "queue": {
                        "type": "string"
                      },
                      "timeout": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "workdir": {
                  "type": "string"
                }
              }
            },
            "started_at": {
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "status": {
              "type": "boolean",
              "x-nullable": true
            }
          }
        }
      }
    },
    "runList": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "example": "my-run"
          },
          "settings": {
            "type": "object",
            "properties": {
              "command": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "image": {
                "type": "string"
              },
              "metadata": {
                "type": "object",
                "associatedProperties": true
              },
              "name": {
                "type": "string"
              },
              "queue": {
                "type": "string"
              },
              "timeout": {
                "type": "integer"
              }
            }
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          "status": {
            "type": "boolean",
            "x-nullable": true
          },
          "task": {
            "type": "object",
            "properties": {
              "base_sha": {
                "type": "string"
              },
              "canceled": {
                "type": "boolean"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "finished_at": {
                "type": "string",
                "format": "date-time",
                "x-nullable": true
              },
              "id": {
                "type": "integer"
              },
              "parent": {
                "type": "object",
                "properties": {
                  "auto_created": {
                    "type": "boolean"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "github": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "hook_secret": {
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "private": {
                    "type": "boolean"
                  }
                }
              },
              "path": {
                "type": "string"
              },
              "pull_request_id": {
                "type": "integer"
              },
              "ref": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "ref_name": {
                    "type": "string"
                  },
                  "repository": {
                    "type": "object",
                    "properties": {
                      "auto_created": {
                        "type": "boolean"
                      },
                      "disabled": {
                        "type": "boolean"
                      },
                      "github": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "hook_secret": {
                        "type": "string"
                      },
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "private": {
                        "type": "boolean"
                      }
                    }
                  },
                  "sha": {
                    "type": "string"
                  }
                }
              },
              "settings": {
                "type": "object",
                "properties": {
                  "config": {
                    "type": "object",
                    "properties": {
                      "global_timeout": {
                        "type": "integer"
                      },
                      "override_queue": {
                        "type": "boolean"
                      },
                      "override_timeout": {
                        "type": "boolean"
                      },
                      "queue": {
                        "type": "string"
                      },
                      "workdir": {
                        "type": "string"
                      }
                    }
                  },
                  "default_image": {
                    "type": "string"
                  },
                  "default_queue": {
                    "type": "string",
                    "x-nullable": false
                  },
                  "default_timeout": {
                    "description": "the default timeout; in nanoseconds",
                    "type": "integer"
                  },
                  "env": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "mountpoint": {
                    "type": "string"
                  },
                  "runs": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "command": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "image": {
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object",
                          "associatedProperties": true
                        },
                        "name": {
                          "type": "string"
                        },
                        "queue": {
                          "type": "string"
                        },
                        "timeout": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  "workdir": {
                    "type": "string"
                  }
                }
              },
              "started_at": {
                "type": "string",
                "format": "date-time",
                "x-nullable": true
              },
              "status": {
                "type": "boolean",
                "x-nullable": true
              }
            }
          }
        }
      }
    },
    "taskList": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "base_sha": {
            "type": "string"
          },
          "canceled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          "id": {
            "type": "integer"
          },
          "parent": {
            "type": "object",
            "properties": {
              "auto_created": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "github": {
                "type": "object",
                "additionalProperties": true
              },
              "hook_secret": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "private": {
                "type": "boolean"
              }
            }
          },
          "path": {
            "type": "string"
          },
          "pull_request_id": {
            "type": "integer"
          },
          "ref": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "ref_name": {
                "type": "string"
              },
              "repository": {
                "type": "object",
                "properties": {
                  "auto_created": {
                    "type": "boolean"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "github": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "hook_secret": {
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "private": {
                    "type": "boolean"
                  }
                }
              },
              "sha": {
                "type": "string"
              }
            }
          },
          "settings": {
            "type": "object",
            "properties": {
              "config": {
                "type": "object",
                "properties": {
                  "global_timeout": {
                    "type": "integer"
                  },
                  "override_queue": {
                    "type": "boolean"
                  },
                  "override_timeout": {
                    "type": "boolean"
                  },
                  "queue": {
                    "type": "string"
                  },
                  "workdir": {
                    "type": "string"
                  }
                }
              },
              "default_image": {
                "type": "string"
              },
              "default_queue": {
                "type": "string",
                "x-nullable": false
              },
              "default_timeout": {
                "description": "the default timeout; in nanoseconds",
                "type": "integer"
              },
              "env": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "metadata": {
                "type": "object"
              },
              "mountpoint": {
                "type": "string"
              },
              "runs": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "command": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "image": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "associatedProperties": true
                    },
                    "name": {
                      "type": "string"
                    },
                    "queue": {
                      "type": "string"
                    },
                    "timeout": {
                      "type": "integer"
                    }
                  }
                }
              },
              "workdir": {
                "type": "string"
              }
            }
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          "status": {
            "type": "boolean",
            "x-nullable": true
          }
        }
      }
    },
    "userError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "example": "achtung, baby!"
        },
        "id": {
          "type": "integer",
          "example": 1
        }
      }
    }
  },
  "securityDefinitions": {
    "session": {
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    },
    "token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
}
