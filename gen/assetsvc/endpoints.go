// Code generated by goa v3.2.6, DO NOT EDIT.
//
// assetsvc endpoints
//
// Command:
// $ goa gen github.com/tinyci/ci-agents/design

package assetsvc

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "assetsvc" service endpoints.
type Endpoints struct {
	PutLog goa.Endpoint
	GetLog goa.Endpoint
}

// PutLogEndpointInput holds both the payload and the server stream of the
// "putLog" method.
type PutLogEndpointInput struct {
	// Stream is the server stream used by the "putLog" method to send data.
	Stream PutLogServerStream
}

// GetLogEndpointInput holds both the payload and the server stream of the
// "getLog" method.
type GetLogEndpointInput struct {
	// Payload is the method payload.
	Payload *GetLogPayload
	// Stream is the server stream used by the "getLog" method to send data.
	Stream GetLogServerStream
}

// NewEndpoints wraps the methods of the "assetsvc" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		PutLog: NewPutLogEndpoint(s),
		GetLog: NewGetLogEndpoint(s),
	}
}

// Use applies the given middleware to all the "assetsvc" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.PutLog = m(e.PutLog)
	e.GetLog = m(e.GetLog)
}

// NewPutLogEndpoint returns an endpoint function that calls the method
// "putLog" of service "assetsvc".
func NewPutLogEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*PutLogEndpointInput)
		return nil, s.PutLog(ctx, ep.Stream)
	}
}

// NewGetLogEndpoint returns an endpoint function that calls the method
// "getLog" of service "assetsvc".
func NewGetLogEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*GetLogEndpointInput)
		return nil, s.GetLog(ctx, ep.Payload, ep.Stream)
	}
}
