// Code generated by goa v3.2.6, DO NOT EDIT.
//
// assetsvc gRPC server
//
// Command:
// $ goa gen github.com/tinyci/ci-agents/design

package server

import (
	"context"

	assetsvc "github.com/tinyci/ci-agents/gen/assetsvc"
	assetsvcpb "github.com/tinyci/ci-agents/gen/grpc/assetsvc/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the assetsvcpb.AssetsvcServer interface.
type Server struct {
	PutLogH goagrpc.StreamHandler
	GetLogH goagrpc.StreamHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// PutLogServerStream implements the assetsvc.PutLogServerStream interface.
type PutLogServerStream struct {
	stream assetsvcpb.Assetsvc_PutLogServer
}

// GetLogServerStream implements the assetsvc.GetLogServerStream interface.
type GetLogServerStream struct {
	stream assetsvcpb.Assetsvc_GetLogServer
}

// New instantiates the server struct with the assetsvc service endpoints.
func New(e *assetsvc.Endpoints, sh goagrpc.StreamHandler) *Server {
	return &Server{
		PutLogH: NewPutLogHandler(e.PutLog, sh),
		GetLogH: NewGetLogHandler(e.GetLog, sh),
	}
}

// NewPutLogHandler creates a gRPC handler which serves the "assetsvc" service
// "putLog" endpoint.
func NewPutLogHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, nil)
	}
	return h
}

// PutLog implements the "PutLog" method in assetsvcpb.AssetsvcServer interface.
func (s *Server) PutLog(stream assetsvcpb.Assetsvc_PutLogServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "putLog")
	ctx = context.WithValue(ctx, goa.ServiceKey, "assetsvc")
	_, err := s.PutLogH.Decode(ctx, nil)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	ep := &assetsvc.PutLogEndpointInput{
		Stream: &PutLogServerStream{stream: stream},
	}
	err = s.PutLogH.Handle(ctx, ep)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	return nil
}

// NewGetLogHandler creates a gRPC handler which serves the "assetsvc" service
// "getLog" endpoint.
func NewGetLogHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, DecodeGetLogRequest)
	}
	return h
}

// GetLog implements the "GetLog" method in assetsvcpb.AssetsvcServer interface.
func (s *Server) GetLog(message *assetsvcpb.GetLogRequest, stream assetsvcpb.Assetsvc_GetLogServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "getLog")
	ctx = context.WithValue(ctx, goa.ServiceKey, "assetsvc")
	p, err := s.GetLogH.Decode(ctx, message)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	ep := &assetsvc.GetLogEndpointInput{
		Stream:  &GetLogServerStream{stream: stream},
		Payload: p.(*assetsvc.GetLogPayload),
	}
	err = s.GetLogH.Handle(ctx, ep)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	return nil
}

// Recv reads instances of "assetsvcpb.PutLogStreamingRequest" from the
// "putLog" endpoint gRPC stream.
func (s *PutLogServerStream) Recv() (*assetsvc.PutLogStreamingPayload, error) {
	var res *assetsvc.PutLogStreamingPayload
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewPutLogStreamingPayload(v), nil
}

func (s *PutLogServerStream) Close() error {
	// synchronize stream
	return s.stream.SendAndClose(&assetsvcpb.PutLogResponse{})
}

// Send streams instances of "assetsvcpb.GetLogResponse" to the "getLog"
// endpoint gRPC stream.
func (s *GetLogServerStream) Send(res *assetsvc.GetLogResult) error {
	v := NewGetLogResponse(res)
	return s.stream.Send(v)
}

func (s *GetLogServerStream) Close() error {
	// nothing to do here
	return nil
}
