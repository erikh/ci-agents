// Code generated by goa v3.2.6, DO NOT EDIT.
//
// assetsvc gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/tinyci/ci-agents/design

package server

import (
	"context"

	assetsvc "github.com/tinyci/ci-agents/gen/assetsvc"
	assetsvcpb "github.com/tinyci/ci-agents/gen/grpc/assetsvc/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodePutLogResponse encodes responses from the "assetsvc" service "putLog"
// endpoint.
func EncodePutLogResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewPutLogResponse()
	return resp, nil
}

// EncodeGetLogResponse encodes responses from the "assetsvc" service "getLog"
// endpoint.
func EncodeGetLogResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*assetsvc.GetLogResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("assetsvc", "getLog", "*assetsvc.GetLogResult", v)
	}
	resp := NewGetLogResponse(result)
	return resp, nil
}

// DecodeGetLogRequest decodes requests sent to "assetsvc" service "getLog"
// endpoint.
func DecodeGetLogRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *assetsvcpb.GetLogRequest
		ok      bool
	)
	{
		if message, ok = v.(*assetsvcpb.GetLogRequest); !ok {
			return nil, goagrpc.ErrInvalidType("assetsvc", "getLog", "*assetsvcpb.GetLogRequest", v)
		}
	}
	var payload *assetsvc.GetLogPayload
	{
		payload = NewGetLogPayload(message)
	}
	return payload, nil
}
