// Code generated by goa v3.2.6, DO NOT EDIT.
//
// assetsvc gRPC server types
//
// Command:
// $ goa gen github.com/tinyci/ci-agents/design

package server

import (
	assetsvc "github.com/tinyci/ci-agents/gen/assetsvc"
	assetsvcpb "github.com/tinyci/ci-agents/gen/grpc/assetsvc/pb"
)

// NewPutLogResponse builds the gRPC response type from the result of the
// "putLog" endpoint of the "assetsvc" service.
func NewPutLogResponse() *assetsvcpb.PutLogResponse {
	message := &assetsvcpb.PutLogResponse{}
	return message
}

func NewPutLogStreamingPayload(v *assetsvcpb.PutLogStreamingRequest) *assetsvc.PutLogStreamingPayload {
	spayload := &assetsvc.PutLogStreamingPayload{
		ID:    v.Id,
		Chunk: v.Chunk,
	}
	return spayload
}

// NewGetLogPayload builds the payload of the "getLog" endpoint of the
// "assetsvc" service from the gRPC request type.
func NewGetLogPayload(message *assetsvcpb.GetLogRequest) *assetsvc.GetLogPayload {
	v := &assetsvc.GetLogPayload{
		ID: message.Id,
	}
	return v
}

// NewGetLogResponse builds the gRPC response type from the result of the
// "getLog" endpoint of the "assetsvc" service.
func NewGetLogResponse(result *assetsvc.GetLogResult) *assetsvcpb.GetLogResponse {
	message := &assetsvcpb.GetLogResponse{
		Chunk: result.Chunk,
	}
	if result.Errors != nil {
		message.Errors = make([]string, len(result.Errors))
		for i, val := range result.Errors {
			message.Errors[i] = val
		}
	}
	return message
}
