// Code generated by goa v3.2.6, DO NOT EDIT.
//
// assetsvc gRPC client
//
// Command:
// $ goa gen github.com/tinyci/ci-agents/design

package client

import (
	"context"

	assetsvc "github.com/tinyci/ci-agents/gen/assetsvc"
	assetsvcpb "github.com/tinyci/ci-agents/gen/grpc/assetsvc/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli assetsvcpb.AssetsvcClient
	opts    []grpc.CallOption
}

// PutLogClientStream implements the assetsvc.PutLogClientStream interface.
type PutLogClientStream struct {
	stream assetsvcpb.Assetsvc_PutLogClient
}

// GetLogClientStream implements the assetsvc.GetLogClientStream interface.
type GetLogClientStream struct {
	stream assetsvcpb.Assetsvc_GetLogClient
}

// NewClient instantiates gRPC client for all the assetsvc service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: assetsvcpb.NewAssetsvcClient(cc),
		opts:    opts,
	}
}

// PutLog calls the "PutLog" function in assetsvcpb.AssetsvcClient interface.
func (c *Client) PutLog() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildPutLogFunc(c.grpccli, c.opts...),
			nil,
			DecodePutLogResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// GetLog calls the "GetLog" function in assetsvcpb.AssetsvcClient interface.
func (c *Client) GetLog() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildGetLogFunc(c.grpccli, c.opts...),
			EncodeGetLogRequest,
			DecodeGetLogResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// Send streams instances of "assetsvcpb.PutLogStreamingRequest" to the
// "putLog" endpoint gRPC stream.
func (s *PutLogClientStream) Send(res *assetsvc.PutLogStreamingPayload) error {
	v := NewPutLogStreamingRequest(res)
	return s.stream.Send(v)
}

func (s *PutLogClientStream) Close() error {
	// synchronize and report any server error
	_, err := s.stream.CloseAndRecv()
	return err
}

// Recv reads instances of "assetsvcpb.GetLogResponse" from the "getLog"
// endpoint gRPC stream.
func (s *GetLogClientStream) Recv() (*assetsvc.GetLogResult, error) {
	var res *assetsvc.GetLogResult
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewGetLogResult(v), nil
}
