// Code generated by goa v3.2.6, DO NOT EDIT.
//
// logsvc gRPC client CLI support package
//
// Command:
// $ goa gen github.com/tinyci/ci-agents/design

package client

import (
	"encoding/json"
	"fmt"

	logsvcpb "github.com/tinyci/ci-agents/gen/grpc/logsvc/pb"
	logsvc "github.com/tinyci/ci-agents/gen/logsvc"
)

// BuildPutPayload builds the payload for the logsvc put endpoint from CLI
// flags.
func BuildPutPayload(logsvcPutMessage string) (*logsvc.PutPayload, error) {
	var err error
	var message logsvcpb.PutRequest
	{
		if logsvcPutMessage != "" {
			err = json.Unmarshal([]byte(logsvcPutMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"at\": 5800664939417079746,\n      \"fields\": {\n         \"Impedit sapiente non iste architecto tenetur.\": \"Porro assumenda.\",\n         \"Necessitatibus quo.\": \"Qui distinctio.\"\n      },\n      \"level\": \"error\",\n      \"message\": \"Non qui.\",\n      \"service\": \"Soluta sequi velit et.\"\n   }'")
			}
		}
	}
	v := &logsvc.PutPayload{
		At:      message.At,
		Level:   message.Level,
		Service: message.Service_,
		Message: message.Message_,
	}
	if message.Fields != nil {
		v.Fields = make(map[string]string, len(message.Fields))
		for key, val := range message.Fields {
			tk := key
			tv := val
			v.Fields[tk] = tv
		}
	}

	return v, nil
}
