// Code generated by goa v3.2.6, DO NOT EDIT.
//
// logsvc gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/tinyci/ci-agents/design

package client

import (
	"context"

	logsvcpb "github.com/tinyci/ci-agents/gen/grpc/logsvc/pb"
	logsvc "github.com/tinyci/ci-agents/gen/logsvc"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildPutFunc builds the remote method to invoke for "logsvc" service "put"
// endpoint.
func BuildPutFunc(grpccli logsvcpb.LogsvcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Put(ctx, reqpb.(*logsvcpb.PutRequest), opts...)
		}
		return grpccli.Put(ctx, &logsvcpb.PutRequest{}, opts...)
	}
}

// EncodePutRequest encodes requests sent to logsvc put endpoint.
func EncodePutRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*logsvc.PutPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("logsvc", "put", "*logsvc.PutPayload", v)
	}
	return NewPutRequest(payload), nil
}
