// Code generated by goa v3.2.6, DO NOT EDIT.
//
// logsvc gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/tinyci/ci-agents/design

package server

import (
	"context"

	logsvcpb "github.com/tinyci/ci-agents/gen/grpc/logsvc/pb"
	logsvc "github.com/tinyci/ci-agents/gen/logsvc"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodePutResponse encodes responses from the "logsvc" service "put" endpoint.
func EncodePutResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewPutResponse()
	return resp, nil
}

// DecodePutRequest decodes requests sent to "logsvc" service "put" endpoint.
func DecodePutRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *logsvcpb.PutRequest
		ok      bool
	)
	{
		if message, ok = v.(*logsvcpb.PutRequest); !ok {
			return nil, goagrpc.ErrInvalidType("logsvc", "put", "*logsvcpb.PutRequest", v)
		}
		if err := ValidatePutRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *logsvc.PutPayload
	{
		payload = NewPutPayload(message)
	}
	return payload, nil
}
