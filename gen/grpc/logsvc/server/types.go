// Code generated by goa v3.2.6, DO NOT EDIT.
//
// logsvc gRPC server types
//
// Command:
// $ goa gen github.com/tinyci/ci-agents/design

package server

import (
	logsvcpb "github.com/tinyci/ci-agents/gen/grpc/logsvc/pb"
	logsvc "github.com/tinyci/ci-agents/gen/logsvc"
	goa "goa.design/goa/v3/pkg"
)

// NewPutPayload builds the payload of the "put" endpoint of the "logsvc"
// service from the gRPC request type.
func NewPutPayload(message *logsvcpb.PutRequest) *logsvc.PutPayload {
	v := &logsvc.PutPayload{
		At:      message.At,
		Level:   message.Level,
		Service: message.Service_,
		Message: message.Message_,
	}
	if message.Fields != nil {
		v.Fields = make(map[string]string, len(message.Fields))
		for key, val := range message.Fields {
			tk := key
			tv := val
			v.Fields[tk] = tv
		}
	}
	return v
}

// NewPutResponse builds the gRPC response type from the result of the "put"
// endpoint of the "logsvc" service.
func NewPutResponse() *logsvcpb.PutResponse {
	message := &logsvcpb.PutResponse{}
	return message
}

// ValidatePutRequest runs the validations defined on PutRequest.
func ValidatePutRequest(message *logsvcpb.PutRequest) (err error) {
	if !(message.Level == "info" || message.Level == "error" || message.Level == "debug") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.level", message.Level, []interface{}{"info", "error", "debug"}))
	}
	return
}
