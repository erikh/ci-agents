// Code generated by goa v3.2.6, DO NOT EDIT.
//
// demo gRPC client CLI support package
//
// Command:
// $ goa gen github.com/tinyci/ci-agents/design

package cli

import (
	"flag"
	"fmt"
	"os"

	assetsvcc "github.com/tinyci/ci-agents/gen/grpc/assetsvc/client"
	logsvcc "github.com/tinyci/ci-agents/gen/grpc/logsvc/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `assetsvc (put-log|get-log)
logsvc put
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` assetsvc put-log` + "\n" +
		os.Args[0] + ` logsvc put --message '{
      "at": 5800664939417079746,
      "fields": {
         "Impedit sapiente non iste architecto tenetur.": "Porro assumenda.",
         "Necessitatibus quo.": "Qui distinctio."
      },
      "level": "error",
      "message": "Non qui.",
      "service": "Soluta sequi velit et."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		assetsvcFlags = flag.NewFlagSet("assetsvc", flag.ContinueOnError)

		assetsvcPutLogFlags = flag.NewFlagSet("put-log", flag.ExitOnError)

		assetsvcGetLogFlags       = flag.NewFlagSet("get-log", flag.ExitOnError)
		assetsvcGetLogMessageFlag = assetsvcGetLogFlags.String("message", "", "")

		logsvcFlags = flag.NewFlagSet("logsvc", flag.ContinueOnError)

		logsvcPutFlags       = flag.NewFlagSet("put", flag.ExitOnError)
		logsvcPutMessageFlag = logsvcPutFlags.String("message", "", "")
	)
	assetsvcFlags.Usage = assetsvcUsage
	assetsvcPutLogFlags.Usage = assetsvcPutLogUsage
	assetsvcGetLogFlags.Usage = assetsvcGetLogUsage

	logsvcFlags.Usage = logsvcUsage
	logsvcPutFlags.Usage = logsvcPutUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "assetsvc":
			svcf = assetsvcFlags
		case "logsvc":
			svcf = logsvcFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "assetsvc":
			switch epn {
			case "put-log":
				epf = assetsvcPutLogFlags

			case "get-log":
				epf = assetsvcGetLogFlags

			}

		case "logsvc":
			switch epn {
			case "put":
				epf = logsvcPutFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "assetsvc":
			c := assetsvcc.NewClient(cc, opts...)
			switch epn {
			case "put-log":
				endpoint = c.PutLog()
				data = nil
			case "get-log":
				endpoint = c.GetLog()
				data, err = assetsvcc.BuildGetLogPayload(*assetsvcGetLogMessageFlag)
			}
		case "logsvc":
			c := logsvcc.NewClient(cc, opts...)
			switch epn {
			case "put":
				endpoint = c.Put()
				data, err = logsvcc.BuildPutPayload(*logsvcPutMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// assetsvcUsage displays the usage of the assetsvc command and its subcommands.
func assetsvcUsage() {
	fmt.Fprintf(os.Stderr, `Asset routing and aggregation service
Usage:
    %s [globalflags] assetsvc COMMAND [flags]

COMMAND:
    put-log: PutLog implements putLog.
    get-log: GetLog implements getLog.

Additional help:
    %s assetsvc COMMAND --help
`, os.Args[0], os.Args[0])
}
func assetsvcPutLogUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] assetsvc put-log

PutLog implements putLog.

Example:
    `+os.Args[0]+` assetsvc put-log
`, os.Args[0])
}

func assetsvcGetLogUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] assetsvc get-log -message JSON

GetLog implements getLog.
    -message JSON: 

Example:
    `+os.Args[0]+` assetsvc get-log --message '{
      "id": 8638009270681567038
   }'
`, os.Args[0])
}

// logsvcUsage displays the usage of the logsvc command and its subcommands.
func logsvcUsage() {
	fmt.Fprintf(os.Stderr, `Log aggregation service
Usage:
    %s [globalflags] logsvc COMMAND [flags]

COMMAND:
    put: Put implements put.

Additional help:
    %s logsvc COMMAND --help
`, os.Args[0], os.Args[0])
}
func logsvcPutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] logsvc put -message JSON

Put implements put.
    -message JSON: 

Example:
    `+os.Args[0]+` logsvc put --message '{
      "at": 5800664939417079746,
      "fields": {
         "Impedit sapiente non iste architecto tenetur.": "Porro assumenda.",
         "Necessitatibus quo.": "Qui distinctio."
      },
      "level": "error",
      "message": "Non qui.",
      "service": "Soluta sequi velit et."
   }'
`, os.Args[0])
}
