// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"reflect"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetLoginParams creates a new GetLoginParams object
// with the default values initialized.
func NewGetLoginParams() *GetLoginParams {
	var ()
	return &GetLoginParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLoginParamsWithTimeout creates a new GetLoginParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLoginParamsWithTimeout(timeout time.Duration) *GetLoginParams {
	var ()
	return &GetLoginParams{

		timeout: timeout,
	}
}

// NewGetLoginParamsWithContext creates a new GetLoginParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLoginParamsWithContext(ctx context.Context) *GetLoginParams {
	var ()
	return &GetLoginParams{

		Context: ctx,
	}
}

// NewGetLoginParamsWithHTTPClient creates a new GetLoginParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLoginParamsWithHTTPClient(client *http.Client) *GetLoginParams {
	var ()
	return &GetLoginParams{
		HTTPClient: client,
	}
}

/*GetLoginParams contains all the parameters to send to the API endpoint
for the get login operation typically these are written to a http.Request
*/
type GetLoginParams struct {

	/*Code
	  The code github sent back to us with the callback, we use it in the OAuth2 exchange to validate the request.


	*/
	Code string
	/*State
	  The state (randomized string) we sent with the original link; this is echoed back to us so we can further identify the user.


	*/
	State string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get login params
func (o *GetLoginParams) WithTimeout(timeout time.Duration) *GetLoginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get login params
func (o *GetLoginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get login params
func (o *GetLoginParams) WithContext(ctx context.Context) *GetLoginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get login params
func (o *GetLoginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get login params
func (o *GetLoginParams) WithHTTPClient(client *http.Client) *GetLoginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get login params
func (o *GetLoginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCode adds the code to the get login params
func (o *GetLoginParams) WithCode(code string) *GetLoginParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the get login params
func (o *GetLoginParams) SetCode(code string) {
	o.Code = code
}

// WithState adds the state to the get login params
func (o *GetLoginParams) WithState(state string) *GetLoginParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get login params
func (o *GetLoginParams) SetState(state string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *GetLoginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	o.HandleQueryParam(r, reg, "code", o.Code, nil)

	o.HandleQueryParam(r, reg, "state", o.State, nil)

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetLoginParams) HandleQueryParam(r runtime.ClientRequest, reg strfmt.Registry, name string, param interface{}, formatter func(interface{}) string) error {
	if (reflect.TypeOf(param).Kind() == reflect.Ptr) && param == nil {
		return nil
	}

	if formatter == nil {
		formatter = func(i interface{}) string { return i.(string) }
	}

	return r.SetQueryParam(name, formatter(param))
}
