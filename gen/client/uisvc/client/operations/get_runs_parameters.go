// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"reflect"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRunsParams creates a new GetRunsParams object
// with the default values initialized.
func NewGetRunsParams() *GetRunsParams {
	var (
		pageDefault    = int64(0)
		perPageDefault = int64(100)
	)
	return &GetRunsParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRunsParamsWithTimeout creates a new GetRunsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRunsParamsWithTimeout(timeout time.Duration) *GetRunsParams {
	var (
		pageDefault    = int64(0)
		perPageDefault = int64(100)
	)
	return &GetRunsParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: timeout,
	}
}

// NewGetRunsParamsWithContext creates a new GetRunsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRunsParamsWithContext(ctx context.Context) *GetRunsParams {
	var (
		pageDefault    = int64(0)
		perPageDefault = int64(100)
	)
	return &GetRunsParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		Context: ctx,
	}
}

// NewGetRunsParamsWithHTTPClient creates a new GetRunsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRunsParamsWithHTTPClient(client *http.Client) *GetRunsParams {
	var (
		pageDefault    = int64(0)
		perPageDefault = int64(100)
	)
	return &GetRunsParams{
		Page:       &pageDefault,
		PerPage:    &perPageDefault,
		HTTPClient: client,
	}
}

/*GetRunsParams contains all the parameters to send to the API endpoint
for the get runs operation typically these are written to a http.Request
*/
type GetRunsParams struct {

	/*Page
	  pagination control: what page to retrieve in the query.

	*/
	Page *int64
	/*PerPage
	  pagination control: how many items counts as a page.

	*/
	PerPage *int64
	/*Repository
	  optional; the repository name to get the tasks for.

	*/
	Repository *string
	/*Sha
	  optional; the sha to get the tasks for.

	*/
	Sha *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get runs params
func (o *GetRunsParams) WithTimeout(timeout time.Duration) *GetRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get runs params
func (o *GetRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get runs params
func (o *GetRunsParams) WithContext(ctx context.Context) *GetRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get runs params
func (o *GetRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get runs params
func (o *GetRunsParams) WithHTTPClient(client *http.Client) *GetRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get runs params
func (o *GetRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPage adds the page to the get runs params
func (o *GetRunsParams) WithPage(page *int64) *GetRunsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get runs params
func (o *GetRunsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the get runs params
func (o *GetRunsParams) WithPerPage(perPage *int64) *GetRunsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get runs params
func (o *GetRunsParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithRepository adds the repository to the get runs params
func (o *GetRunsParams) WithRepository(repository *string) *GetRunsParams {
	o.SetRepository(repository)
	return o
}

// SetRepository adds the repository to the get runs params
func (o *GetRunsParams) SetRepository(repository *string) {
	o.Repository = repository
}

// WithSha adds the sha to the get runs params
func (o *GetRunsParams) WithSha(sha *string) *GetRunsParams {
	o.SetSha(sha)
	return o
}

// SetSha adds the sha to the get runs params
func (o *GetRunsParams) SetSha(sha *string) {
	o.Sha = sha
}

// WriteToRequest writes these params to a swagger request
func (o *GetRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Page != nil {

		o.HandleQueryParam(r, reg, "page", o.Page, func(i interface{}) string { return swag.FormatInt64(i.(int64)) })

	}

	if o.PerPage != nil {

		o.HandleQueryParam(r, reg, "perPage", o.PerPage, func(i interface{}) string { return swag.FormatInt64(i.(int64)) })

	}

	if o.Repository != nil {

		o.HandleQueryParam(r, reg, "repository", o.Repository, nil)

	}

	if o.Sha != nil {

		o.HandleQueryParam(r, reg, "sha", o.Sha, nil)

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRunsParams) HandleQueryParam(r runtime.ClientRequest, reg strfmt.Registry, name string, param interface{}, formatter func(interface{}) string) error {
	if (reflect.TypeOf(param).Kind() == reflect.Ptr) && param == nil {
		return nil
	}

	if formatter == nil {
		formatter = func(i interface{}) string { return i.(string) }
	}

	return r.SetQueryParam(name, formatter(param))
}
