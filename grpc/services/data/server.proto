syntax = "proto3";

package data;

option go_package = "github.com/tinyci/ci-agents/grpc/services/data";

import "github.com/golang/protobuf/ptypes/empty/empty.proto";

import "github.com/tinyci/ci-agents/grpc/types/bool.proto";
import "github.com/tinyci/ci-agents/grpc/types/queue_item.proto";
import "github.com/tinyci/ci-agents/grpc/types/session.proto";
import "github.com/tinyci/ci-agents/grpc/types/repository.proto";
import "github.com/tinyci/ci-agents/grpc/types/ref.proto";
import "github.com/tinyci/ci-agents/grpc/types/run.proto";
import "github.com/tinyci/ci-agents/grpc/types/user.proto";
import "github.com/tinyci/ci-agents/grpc/types/task.proto";
import "github.com/tinyci/ci-agents/grpc/types/id.proto";

// datasvc is the conduit between the other services and the database. Most of
// these calls map either directly or close to the model calls.
service Data {
  // Retrieve User Error
  rpc GetErrors(Name)              returns (types.UserErrors)       {};
  // Add A User Error
  rpc AddError(types.UserError)    returns (google.protobuf.Empty)  {};
  // Delete A User Error
  rpc DeleteError(types.UserError) returns (google.protobuf.Empty)  {};
 
  // Register state with the database.
  rpc OAuthRegisterState(OAuthState) returns (google.protobuf.Empty) {};
  // Validate returned state within the database.
  rpc OAuthValidateState(OAuthState) returns (google.protobuf.Empty) {};

  // QueueCount is the count of the queue
  rpc QueueCount(google.protobuf.Empty)        returns (Count)                  {}; 
  // QueueCountForRepository counts by repo
  rpc QueueCountForRepository(Name)            returns (Count)                  {};
  // QueueListForRepository produces a list for the repo of queue items.
  rpc QueueListForRepository(QueueListRequest) returns (QueueList)              {};
  // QueueAdd adds a new QueueList of items
  rpc QueueAdd(QueueList)                      returns (QueueList)              {};
  // QueueNext retrieves the next item in the queue.
  rpc QueueNext(types.QueueRequest)            returns (types.QueueItem)        {};
  // PutStatus sets the status of the run in the DB.
  rpc PutStatus(types.Status)                  returns (google.protobuf.Empty)  {};
  // SetCancel cancels a run.
  rpc SetCancel(types.IntID)                   returns (google.protobuf.Empty)  {};
  // GetCancel retrieves the canceled state of the run.
  rpc GetCancel(types.IntID)                   returns (types.Status)           {};

  // Given a name and sha, look up the ref.
  rpc GetRefByNameAndSHA(RefPair) returns (types.Ref)             {}; 
  // PutRef saves a ref.
  rpc PutRef(types.Ref)           returns (types.Ref)             {};
  // CancelRefByName cancels by branch or tag name.
  rpc CancelRefByName(RepoRef)    returns (google.protobuf.Empty) {}; 

  // Enables repository for testing in CI
  rpc EnableRepository(RepoUserSelection)       returns (google.protobuf.Empty) {};
  // Disables repository for testing in CI
  rpc DisableRepository(RepoUserSelection)      returns (google.protobuf.Empty) {};
  // Given a JSON list of github responses; save all the repos.
  rpc SaveRepositories(GithubJSON)              returns (google.protobuf.Empty) {};
  // List all Private Repositories for the user.
  rpc PrivateRepositories(NameSearch)           returns (types.RepositoryList)  {};
  // List all Owned Repositories for the user.
  rpc OwnedRepositories(NameSearch)             returns (types.RepositoryList)  {};
  // List all repositories for the user.
  rpc AllRepositories(NameSearch)               returns (types.RepositoryList)  {}; 
  // List all public repositories.
  rpc PublicRepositories(Search)                returns (types.RepositoryList)  {}; 
  // Get a specific repository by name.
  rpc GetRepository(Name)                       returns (types.Repository)      {}; 

  // Count of runs for the given ref pair
  rpc RunCount(RefPair)       returns (Count)         {};
  // List the runs
  rpc RunList(RunListRequest) returns (types.RunList) {};
  // Get a specific Run
  rpc GetRun(types.IntID)     returns (types.Run)     {};
  // Get a specific Run with security details omitted; for UI work.
  rpc GetRunUI(types.IntID)   returns (types.Run)     {};

  // PutSession saves the session.
  rpc PutSession(types.Session)   returns (google.protobuf.Empty) {};
  // LoadSession loads the session.
  rpc LoadSession(types.StringID) returns (types.Session)         {};

  // removes the subscription from the user's account.
  rpc RemoveSubscription(RepoUserSelection) returns (google.protobuf.Empty) {};
  // adds a subscription.
  rpc AddSubscription(RepoUserSelection)    returns (google.protobuf.Empty) {};
  // lists all the subscriptions for the user.
  rpc ListSubscriptions(NameSearch)         returns (types.RepositoryList)  {};

  // Add a task to the db.
  rpc PutTask(types.Task)                                     returns (types.Task)            {}; 
  // List Tasks
  rpc ListTasks(TaskListRequest)                              returns (types.TaskList)        {}; 
  // List tasks only in the user's subscription list.
  rpc ListSubscribedTasksForUser(ListSubscribedTasksRequest)  returns (types.TaskList)        {}; 
  // Count Tasks
  rpc CountTasks(TaskListRequest)                             returns (Count)                 {};
  // cancel a task by pull request ID
  rpc CancelTasksByPR(types.CancelPRRequest)                  returns (google.protobuf.Empty) {}; 

  // get all runs associated with the task.
  rpc RunsForTask(RunsForTaskRequest) returns (types.RunList) {}; 
  // Count all associated runs with the task.
  rpc CountRunsForTask(types.IntID)   returns (Count)         {}; 

  // Get a user by name
  rpc UserByName(Name)                  returns (types.User)            {}; 
  // Update a user -- currently only accepts token changes.
  rpc PatchUser(types.User)             returns (google.protobuf.Empty) {}; 
  // Create a user
  rpc PutUser(types.User)               returns (types.User)            {}; 
  // List all users.
  rpc ListUsers(google.protobuf.Empty)  returns (types.UserList)        {}; 

  // Get a auth token (not oauth)
  rpc GetToken(Name)                returns (types.StringID)        {}; 
  // Delete the auth token
  rpc DeleteToken(Name)             returns (google.protobuf.Empty) {}; 
  // Validate the auth token -- returns the user if successful
  rpc ValidateToken(types.StringID) returns (types.User)            {}; 

  // Returns true if the user has the capability
  rpc HasCapability(CapabilityRequest)    returns (types.Bool)            {};
  // Adds the capability for the user
  rpc AddCapability(CapabilityRequest)    returns (google.protobuf.Empty) {};
  // Removes the capability from the user
  rpc RemoveCapability(CapabilityRequest) returns (google.protobuf.Empty) {};
}

message CapabilityRequest {
  int64  id         = 1; // User ID
  string capability = 2; // name of capability (See model/user.go)
}

message ListSubscribedTasksRequest {
  int64 id      = 1; // User ID
  int64 page    = 2;
  int64 perPage = 3;
}

message RunsForTaskRequest {
  int64   id          = 1; // Task ID
  int64   page        = 2;
  int64   perPage     = 3;
}

message TaskListRequest {
  string  repository  = 1; // Parent or Fork
  string  sha         = 2;
  int64   page        = 3;
  int64   perPage     = 4;
}

message RunListRequest {
  string  repository  = 1; // Parent or Fork
  string  sha         = 2;
  int64   page        = 3;
  int64   perPage     = 4;
}

message RepoUserSelection {
  string username = 1;
  string repoName = 2; // these are in owner/repo format
}

message RepoRef {
  int64   repository = 1;
  string  refName    = 2;
}

message RefPair {
  string repoName = 1; // these are in owner/repo format
  string sha      = 2;
}

message QueueListRequest {
  string  name    = 1; // Repository name in owner/repo format
  int64   page    = 2;
  int64   perPage = 3;
}

message QueueList {
  repeated types.QueueItem items = 1;
}

message Count {
  int64 count = 1;
}

message Name {
  string name = 1;
}

message Search {
  string search = 1;
}

message NameSearch {
	string name = 1;
	string search = 2;
}

message OAuthState {
  string state = 1;
}

message GithubJSON {
  bytes   JSON        = 1;
  string  Username    = 2;
  bool    AutoCreated = 3;
}
