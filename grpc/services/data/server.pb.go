// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/services/data/server.proto

package data

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	types "github.com/tinyci/ci-agents/grpc/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CapabilityRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Capability           string   `protobuf:"bytes,2,opt,name=capability,proto3" json:"capability,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapabilityRequest) Reset()         { *m = CapabilityRequest{} }
func (m *CapabilityRequest) String() string { return proto.CompactTextString(m) }
func (*CapabilityRequest) ProtoMessage()    {}
func (*CapabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{0}
}

func (m *CapabilityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CapabilityRequest.Unmarshal(m, b)
}
func (m *CapabilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CapabilityRequest.Marshal(b, m, deterministic)
}
func (m *CapabilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapabilityRequest.Merge(m, src)
}
func (m *CapabilityRequest) XXX_Size() int {
	return xxx_messageInfo_CapabilityRequest.Size(m)
}
func (m *CapabilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CapabilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CapabilityRequest proto.InternalMessageInfo

func (m *CapabilityRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CapabilityRequest) GetCapability() string {
	if m != nil {
		return m.Capability
	}
	return ""
}

type ListSubscribedTasksRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Page                 int64    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage              int64    `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSubscribedTasksRequest) Reset()         { *m = ListSubscribedTasksRequest{} }
func (m *ListSubscribedTasksRequest) String() string { return proto.CompactTextString(m) }
func (*ListSubscribedTasksRequest) ProtoMessage()    {}
func (*ListSubscribedTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{1}
}

func (m *ListSubscribedTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSubscribedTasksRequest.Unmarshal(m, b)
}
func (m *ListSubscribedTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSubscribedTasksRequest.Marshal(b, m, deterministic)
}
func (m *ListSubscribedTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubscribedTasksRequest.Merge(m, src)
}
func (m *ListSubscribedTasksRequest) XXX_Size() int {
	return xxx_messageInfo_ListSubscribedTasksRequest.Size(m)
}
func (m *ListSubscribedTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubscribedTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubscribedTasksRequest proto.InternalMessageInfo

func (m *ListSubscribedTasksRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListSubscribedTasksRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListSubscribedTasksRequest) GetPerPage() int64 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type RunsForTaskRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Page                 int64    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage              int64    `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunsForTaskRequest) Reset()         { *m = RunsForTaskRequest{} }
func (m *RunsForTaskRequest) String() string { return proto.CompactTextString(m) }
func (*RunsForTaskRequest) ProtoMessage()    {}
func (*RunsForTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{2}
}

func (m *RunsForTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunsForTaskRequest.Unmarshal(m, b)
}
func (m *RunsForTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunsForTaskRequest.Marshal(b, m, deterministic)
}
func (m *RunsForTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunsForTaskRequest.Merge(m, src)
}
func (m *RunsForTaskRequest) XXX_Size() int {
	return xxx_messageInfo_RunsForTaskRequest.Size(m)
}
func (m *RunsForTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunsForTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunsForTaskRequest proto.InternalMessageInfo

func (m *RunsForTaskRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RunsForTaskRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RunsForTaskRequest) GetPerPage() int64 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type TaskListRequest struct {
	Repository           string   `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Sha                  string   `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	Page                 int64    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage              int64    `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskListRequest) Reset()         { *m = TaskListRequest{} }
func (m *TaskListRequest) String() string { return proto.CompactTextString(m) }
func (*TaskListRequest) ProtoMessage()    {}
func (*TaskListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{3}
}

func (m *TaskListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskListRequest.Unmarshal(m, b)
}
func (m *TaskListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskListRequest.Marshal(b, m, deterministic)
}
func (m *TaskListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListRequest.Merge(m, src)
}
func (m *TaskListRequest) XXX_Size() int {
	return xxx_messageInfo_TaskListRequest.Size(m)
}
func (m *TaskListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListRequest proto.InternalMessageInfo

func (m *TaskListRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *TaskListRequest) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

func (m *TaskListRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *TaskListRequest) GetPerPage() int64 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type RunListRequest struct {
	Repository           string   `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Sha                  string   `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	Page                 int64    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage              int64    `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunListRequest) Reset()         { *m = RunListRequest{} }
func (m *RunListRequest) String() string { return proto.CompactTextString(m) }
func (*RunListRequest) ProtoMessage()    {}
func (*RunListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{4}
}

func (m *RunListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunListRequest.Unmarshal(m, b)
}
func (m *RunListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunListRequest.Marshal(b, m, deterministic)
}
func (m *RunListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunListRequest.Merge(m, src)
}
func (m *RunListRequest) XXX_Size() int {
	return xxx_messageInfo_RunListRequest.Size(m)
}
func (m *RunListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunListRequest proto.InternalMessageInfo

func (m *RunListRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *RunListRequest) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

func (m *RunListRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RunListRequest) GetPerPage() int64 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type RepoUserSelection struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	RepoName             string   `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepoUserSelection) Reset()         { *m = RepoUserSelection{} }
func (m *RepoUserSelection) String() string { return proto.CompactTextString(m) }
func (*RepoUserSelection) ProtoMessage()    {}
func (*RepoUserSelection) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{5}
}

func (m *RepoUserSelection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepoUserSelection.Unmarshal(m, b)
}
func (m *RepoUserSelection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepoUserSelection.Marshal(b, m, deterministic)
}
func (m *RepoUserSelection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepoUserSelection.Merge(m, src)
}
func (m *RepoUserSelection) XXX_Size() int {
	return xxx_messageInfo_RepoUserSelection.Size(m)
}
func (m *RepoUserSelection) XXX_DiscardUnknown() {
	xxx_messageInfo_RepoUserSelection.DiscardUnknown(m)
}

var xxx_messageInfo_RepoUserSelection proto.InternalMessageInfo

func (m *RepoUserSelection) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RepoUserSelection) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

type RepoRef struct {
	Repository           int64    `protobuf:"varint,1,opt,name=repository,proto3" json:"repository,omitempty"`
	RefName              string   `protobuf:"bytes,2,opt,name=refName,proto3" json:"refName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepoRef) Reset()         { *m = RepoRef{} }
func (m *RepoRef) String() string { return proto.CompactTextString(m) }
func (*RepoRef) ProtoMessage()    {}
func (*RepoRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{6}
}

func (m *RepoRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepoRef.Unmarshal(m, b)
}
func (m *RepoRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepoRef.Marshal(b, m, deterministic)
}
func (m *RepoRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepoRef.Merge(m, src)
}
func (m *RepoRef) XXX_Size() int {
	return xxx_messageInfo_RepoRef.Size(m)
}
func (m *RepoRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RepoRef.DiscardUnknown(m)
}

var xxx_messageInfo_RepoRef proto.InternalMessageInfo

func (m *RepoRef) GetRepository() int64 {
	if m != nil {
		return m.Repository
	}
	return 0
}

func (m *RepoRef) GetRefName() string {
	if m != nil {
		return m.RefName
	}
	return ""
}

type RefPair struct {
	RepoName             string   `protobuf:"bytes,1,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Sha                  string   `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefPair) Reset()         { *m = RefPair{} }
func (m *RefPair) String() string { return proto.CompactTextString(m) }
func (*RefPair) ProtoMessage()    {}
func (*RefPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{7}
}

func (m *RefPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefPair.Unmarshal(m, b)
}
func (m *RefPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefPair.Marshal(b, m, deterministic)
}
func (m *RefPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefPair.Merge(m, src)
}
func (m *RefPair) XXX_Size() int {
	return xxx_messageInfo_RefPair.Size(m)
}
func (m *RefPair) XXX_DiscardUnknown() {
	xxx_messageInfo_RefPair.DiscardUnknown(m)
}

var xxx_messageInfo_RefPair proto.InternalMessageInfo

func (m *RefPair) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *RefPair) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

type QueueListRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Page                 int64    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage              int64    `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueueListRequest) Reset()         { *m = QueueListRequest{} }
func (m *QueueListRequest) String() string { return proto.CompactTextString(m) }
func (*QueueListRequest) ProtoMessage()    {}
func (*QueueListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{8}
}

func (m *QueueListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueueListRequest.Unmarshal(m, b)
}
func (m *QueueListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueueListRequest.Marshal(b, m, deterministic)
}
func (m *QueueListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueListRequest.Merge(m, src)
}
func (m *QueueListRequest) XXX_Size() int {
	return xxx_messageInfo_QueueListRequest.Size(m)
}
func (m *QueueListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueueListRequest proto.InternalMessageInfo

func (m *QueueListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueueListRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueueListRequest) GetPerPage() int64 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type QueueList struct {
	Items                []*types.QueueItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *QueueList) Reset()         { *m = QueueList{} }
func (m *QueueList) String() string { return proto.CompactTextString(m) }
func (*QueueList) ProtoMessage()    {}
func (*QueueList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{9}
}

func (m *QueueList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueueList.Unmarshal(m, b)
}
func (m *QueueList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueueList.Marshal(b, m, deterministic)
}
func (m *QueueList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueList.Merge(m, src)
}
func (m *QueueList) XXX_Size() int {
	return xxx_messageInfo_QueueList.Size(m)
}
func (m *QueueList) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueList.DiscardUnknown(m)
}

var xxx_messageInfo_QueueList proto.InternalMessageInfo

func (m *QueueList) GetItems() []*types.QueueItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type Count struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Count) Reset()         { *m = Count{} }
func (m *Count) String() string { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()    {}
func (*Count) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{10}
}

func (m *Count) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Count.Unmarshal(m, b)
}
func (m *Count) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Count.Marshal(b, m, deterministic)
}
func (m *Count) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Count.Merge(m, src)
}
func (m *Count) XXX_Size() int {
	return xxx_messageInfo_Count.Size(m)
}
func (m *Count) XXX_DiscardUnknown() {
	xxx_messageInfo_Count.DiscardUnknown(m)
}

var xxx_messageInfo_Count proto.InternalMessageInfo

func (m *Count) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Name struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{11}
}

func (m *Name) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Name.Unmarshal(m, b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Name.Marshal(b, m, deterministic)
}
func (m *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(m, src)
}
func (m *Name) XXX_Size() int {
	return xxx_messageInfo_Name.Size(m)
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Search struct {
	Search               string   `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Search) Reset()         { *m = Search{} }
func (m *Search) String() string { return proto.CompactTextString(m) }
func (*Search) ProtoMessage()    {}
func (*Search) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{12}
}

func (m *Search) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Search.Unmarshal(m, b)
}
func (m *Search) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Search.Marshal(b, m, deterministic)
}
func (m *Search) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Search.Merge(m, src)
}
func (m *Search) XXX_Size() int {
	return xxx_messageInfo_Search.Size(m)
}
func (m *Search) XXX_DiscardUnknown() {
	xxx_messageInfo_Search.DiscardUnknown(m)
}

var xxx_messageInfo_Search proto.InternalMessageInfo

func (m *Search) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

type NameSearch struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Search               string   `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameSearch) Reset()         { *m = NameSearch{} }
func (m *NameSearch) String() string { return proto.CompactTextString(m) }
func (*NameSearch) ProtoMessage()    {}
func (*NameSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{13}
}

func (m *NameSearch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameSearch.Unmarshal(m, b)
}
func (m *NameSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameSearch.Marshal(b, m, deterministic)
}
func (m *NameSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameSearch.Merge(m, src)
}
func (m *NameSearch) XXX_Size() int {
	return xxx_messageInfo_NameSearch.Size(m)
}
func (m *NameSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_NameSearch.DiscardUnknown(m)
}

var xxx_messageInfo_NameSearch proto.InternalMessageInfo

func (m *NameSearch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameSearch) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

type OAuthState struct {
	State                string   `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAuthState) Reset()         { *m = OAuthState{} }
func (m *OAuthState) String() string { return proto.CompactTextString(m) }
func (*OAuthState) ProtoMessage()    {}
func (*OAuthState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{14}
}

func (m *OAuthState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAuthState.Unmarshal(m, b)
}
func (m *OAuthState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAuthState.Marshal(b, m, deterministic)
}
func (m *OAuthState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuthState.Merge(m, src)
}
func (m *OAuthState) XXX_Size() int {
	return xxx_messageInfo_OAuthState.Size(m)
}
func (m *OAuthState) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuthState.DiscardUnknown(m)
}

var xxx_messageInfo_OAuthState proto.InternalMessageInfo

func (m *OAuthState) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type GithubJSON struct {
	JSON                 []byte   `protobuf:"bytes,1,opt,name=JSON,proto3" json:"JSON,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	AutoCreated          bool     `protobuf:"varint,3,opt,name=AutoCreated,proto3" json:"AutoCreated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GithubJSON) Reset()         { *m = GithubJSON{} }
func (m *GithubJSON) String() string { return proto.CompactTextString(m) }
func (*GithubJSON) ProtoMessage()    {}
func (*GithubJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5efbd5ed401f03d, []int{15}
}

func (m *GithubJSON) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GithubJSON.Unmarshal(m, b)
}
func (m *GithubJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GithubJSON.Marshal(b, m, deterministic)
}
func (m *GithubJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GithubJSON.Merge(m, src)
}
func (m *GithubJSON) XXX_Size() int {
	return xxx_messageInfo_GithubJSON.Size(m)
}
func (m *GithubJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_GithubJSON.DiscardUnknown(m)
}

var xxx_messageInfo_GithubJSON proto.InternalMessageInfo

func (m *GithubJSON) GetJSON() []byte {
	if m != nil {
		return m.JSON
	}
	return nil
}

func (m *GithubJSON) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GithubJSON) GetAutoCreated() bool {
	if m != nil {
		return m.AutoCreated
	}
	return false
}

func init() {
	proto.RegisterType((*CapabilityRequest)(nil), "data.CapabilityRequest")
	proto.RegisterType((*ListSubscribedTasksRequest)(nil), "data.ListSubscribedTasksRequest")
	proto.RegisterType((*RunsForTaskRequest)(nil), "data.RunsForTaskRequest")
	proto.RegisterType((*TaskListRequest)(nil), "data.TaskListRequest")
	proto.RegisterType((*RunListRequest)(nil), "data.RunListRequest")
	proto.RegisterType((*RepoUserSelection)(nil), "data.RepoUserSelection")
	proto.RegisterType((*RepoRef)(nil), "data.RepoRef")
	proto.RegisterType((*RefPair)(nil), "data.RefPair")
	proto.RegisterType((*QueueListRequest)(nil), "data.QueueListRequest")
	proto.RegisterType((*QueueList)(nil), "data.QueueList")
	proto.RegisterType((*Count)(nil), "data.Count")
	proto.RegisterType((*Name)(nil), "data.Name")
	proto.RegisterType((*Search)(nil), "data.Search")
	proto.RegisterType((*NameSearch)(nil), "data.NameSearch")
	proto.RegisterType((*OAuthState)(nil), "data.OAuthState")
	proto.RegisterType((*GithubJSON)(nil), "data.GithubJSON")
}

func init() { proto.RegisterFile("grpc/services/data/server.proto", fileDescriptor_e5efbd5ed401f03d) }

var fileDescriptor_e5efbd5ed401f03d = []byte{
	// 1317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x6d, 0x73, 0xd3, 0xc6,
	0x13, 0x77, 0xe2, 0x90, 0xc4, 0x1b, 0x82, 0xed, 0x03, 0x42, 0x46, 0x33, 0x7f, 0xfe, 0x99, 0x9b,
	0x96, 0xa6, 0x9d, 0xd6, 0x0e, 0x84, 0x42, 0x9f, 0x86, 0xa9, 0xe3, 0x3c, 0x90, 0x96, 0x09, 0x46,
	0x86, 0xbe, 0xe0, 0x45, 0x3b, 0x67, 0x69, 0xed, 0x68, 0x50, 0x24, 0xa1, 0x3b, 0xa5, 0xcd, 0xf7,
	0xee, 0x07, 0xe8, 0xdc, 0x83, 0xac, 0x07, 0x3b, 0xc6, 0x86, 0x4e, 0xdf, 0x24, 0xda, 0xbb, 0xfd,
	0xfd, 0x76, 0x6f, 0xb5, 0xbb, 0xb7, 0x32, 0xfc, 0x7f, 0x14, 0x47, 0x4e, 0x9b, 0x63, 0x7c, 0xe9,
	0x39, 0xc8, 0xdb, 0x2e, 0x13, 0x4c, 0x49, 0x18, 0xb7, 0xa2, 0x38, 0x14, 0x21, 0x59, 0x91, 0x4b,
	0xd6, 0xfe, 0xc8, 0x13, 0xe7, 0xc9, 0xa0, 0xe5, 0x84, 0x17, 0xed, 0x51, 0xe8, 0xb3, 0x60, 0xd4,
	0x56, 0xdb, 0x83, 0x64, 0xd8, 0x8e, 0xc4, 0x55, 0x84, 0xbc, 0x8d, 0x17, 0x91, 0xb8, 0xd2, 0x7f,
	0x35, 0xd4, 0x7a, 0x98, 0x03, 0x09, 0x2f, 0xb8, 0x72, 0xbc, 0xb6, 0xe3, 0x7d, 0xc3, 0x46, 0x18,
	0x08, 0xde, 0x56, 0x76, 0x35, 0x72, 0x10, 0x86, 0xbe, 0x81, 0x3c, 0x9d, 0x13, 0xf2, 0x3e, 0xc1,
	0x04, 0xff, 0xf0, 0x04, 0x5e, 0x18, 0xe0, 0xe3, 0x39, 0x81, 0x1c, 0x39, 0xf7, 0xc2, 0x60, 0x41,
	0x73, 0x31, 0x46, 0x21, 0xf7, 0x44, 0x18, 0xa7, 0x47, 0xdb, 0x9b, 0x1b, 0x38, 0x5c, 0x14, 0x91,
	0x04, 0x0b, 0x86, 0x2f, 0xe1, 0xe9, 0xcb, 0x9a, 0x1b, 0x22, 0x18, 0x7f, 0x67, 0x20, 0xed, 0x39,
	0x21, 0x9e, 0xab, 0x01, 0xb4, 0x0b, 0xcd, 0x2e, 0x8b, 0xd8, 0xc0, 0xf3, 0x3d, 0x71, 0x65, 0xe3,
	0xfb, 0x04, 0xb9, 0x20, 0xb7, 0x60, 0xd9, 0x73, 0xb7, 0x97, 0x76, 0x96, 0x76, 0xab, 0xf6, 0xb2,
	0xe7, 0x92, 0xfb, 0x00, 0xce, 0x58, 0x69, 0x7b, 0x79, 0x67, 0x69, 0xb7, 0x66, 0xe7, 0x56, 0xe8,
	0x5b, 0xb0, 0x5e, 0x78, 0x5c, 0xf4, 0x93, 0x01, 0x77, 0x62, 0x6f, 0x80, 0xee, 0x6b, 0xc6, 0xdf,
	0xf1, 0xeb, 0xd8, 0x08, 0xac, 0x44, 0x6c, 0x84, 0x8a, 0xa7, 0x6a, 0xab, 0x67, 0xb2, 0x0d, 0x6b,
	0x11, 0xc6, 0x3d, 0xb9, 0x5c, 0x55, 0xcb, 0xa9, 0x48, 0x6d, 0x20, 0x76, 0x12, 0xf0, 0xe3, 0x30,
	0x96, 0xa4, 0xff, 0x0e, 0xe7, 0x7b, 0xa8, 0x4b, 0x32, 0xe9, 0x73, 0x4a, 0x78, 0x1f, 0x20, 0x4b,
	0x0b, 0x45, 0x5c, 0xb3, 0x73, 0x2b, 0xa4, 0x01, 0x55, 0x7e, 0xce, 0xcc, 0xd9, 0xe5, 0xe3, 0xd8,
	0x64, 0x75, 0xba, 0xc9, 0x95, 0xa2, 0xc9, 0x08, 0x6e, 0xd9, 0x49, 0xf0, 0x5f, 0x5a, 0xfc, 0x15,
	0x9a, 0x36, 0x46, 0xe1, 0x1b, 0x8e, 0x71, 0x1f, 0x7d, 0x74, 0x84, 0x17, 0x06, 0xc4, 0x82, 0x75,
	0x99, 0x60, 0x01, 0xbb, 0x40, 0x63, 0x72, 0x2c, 0xcb, 0x3d, 0x69, 0xfe, 0x4c, 0xee, 0x69, 0xab,
	0x63, 0x99, 0x76, 0x61, 0x4d, 0x92, 0xd9, 0x38, 0x9c, 0xe2, 0x77, 0xb5, 0xe0, 0xf7, 0x36, 0xac,
	0xc5, 0x38, 0xcc, 0xb1, 0xa4, 0x22, 0x7d, 0x2a, 0x49, 0x86, 0x3d, 0xe6, 0xc5, 0x05, 0x5b, 0x4b,
	0x45, 0x5b, 0x93, 0x07, 0xa7, 0xaf, 0xa1, 0xf1, 0x4a, 0xb6, 0x88, 0x7c, 0xf8, 0x08, 0xac, 0xe4,
	0x4e, 0xa1, 0x9e, 0x17, 0xcc, 0x82, 0x7d, 0xa8, 0x8d, 0x59, 0xc9, 0x03, 0xb8, 0x21, 0xfb, 0x0f,
	0xdf, 0x5e, 0xda, 0xa9, 0xee, 0x6e, 0x3c, 0x6a, 0xb4, 0x54, 0x9d, 0xb4, 0x94, 0xc2, 0xa9, 0xc0,
	0x0b, 0x5b, 0x6f, 0xd3, 0xff, 0xc1, 0x8d, 0x6e, 0x98, 0x04, 0x82, 0xdc, 0x81, 0x1b, 0x8e, 0x7c,
	0x30, 0x11, 0xd0, 0x02, 0xb5, 0x60, 0xe5, 0xcc, 0x78, 0x52, 0xf6, 0x8e, 0xee, 0xc0, 0x6a, 0x1f,
	0x59, 0xec, 0x9c, 0x93, 0x2d, 0x58, 0xe5, 0xea, 0xc9, 0xec, 0x1b, 0x89, 0x7e, 0x07, 0x20, 0xd1,
	0x46, 0x6b, 0xda, 0x09, 0x33, 0xe4, 0x72, 0x01, 0x49, 0x01, 0x5e, 0x76, 0x12, 0x71, 0xde, 0x17,
	0x4c, 0xa0, 0xf4, 0x8d, 0xcb, 0x07, 0x03, 0xd5, 0x02, 0xfd, 0x1d, 0xe0, 0x44, 0x75, 0x87, 0x5f,
	0xfa, 0x2f, 0xcf, 0x24, 0xbb, 0xfc, 0xaf, 0x54, 0x6e, 0xda, 0xea, 0x59, 0xbe, 0x95, 0x37, 0x69,
	0x76, 0x98, 0x0c, 0x48, 0x65, 0xb2, 0x03, 0x1b, 0x9d, 0x44, 0x84, 0xdd, 0x18, 0x99, 0x40, 0x57,
	0xc5, 0x72, 0xdd, 0xce, 0x2f, 0x3d, 0xfa, 0xfb, 0x2e, 0xac, 0x1c, 0x32, 0xc1, 0xc8, 0xd7, 0x50,
	0x3b, 0x41, 0x71, 0x14, 0xc7, 0x61, 0xcc, 0x09, 0xb4, 0xe4, 0x95, 0xd3, 0x92, 0xe7, 0xb2, 0x9a,
	0x26, 0xaa, 0x92, 0x54, 0x6f, 0xd3, 0x0a, 0x79, 0x02, 0xeb, 0x1d, 0xd7, 0x55, 0x22, 0x69, 0x94,
	0x15, 0xac, 0xad, 0xd6, 0x28, 0x0c, 0x47, 0x3e, 0xb6, 0xd2, 0x0b, 0xaa, 0x75, 0x24, 0xef, 0x24,
	0x5a, 0x21, 0xdf, 0xc3, 0xc6, 0x21, 0xfa, 0x28, 0x70, 0x71, 0xe8, 0xcf, 0x40, 0x54, 0xb4, 0x6c,
	0x1c, 0x79, 0x5c, 0x60, 0xac, 0xa3, 0xd6, 0xd0, 0x9e, 0x66, 0x71, 0x9c, 0x83, 0xe1, 0x37, 0xe6,
	0x7b, 0x2e, 0x13, 0xb8, 0x38, 0xc3, 0x3e, 0x80, 0x4a, 0x2e, 0x9d, 0x4d, 0xd7, 0xe8, 0x59, 0x1b,
	0x9a, 0x51, 0x29, 0xd1, 0x0a, 0x79, 0x0c, 0xf7, 0x32, 0xd0, 0x71, 0x18, 0xdb, 0x59, 0xd9, 0xe5,
	0xe3, 0x5c, 0x42, 0x75, 0x61, 0x6b, 0x9c, 0xe8, 0x45, 0xd0, 0x96, 0x56, 0x2c, 0x17, 0x97, 0x55,
	0x2f, 0xad, 0xd3, 0x0a, 0x69, 0xc1, 0xba, 0x12, 0x3b, 0xae, 0x4b, 0xca, 0xdb, 0xd3, 0xf4, 0x1f,
	0x9b, 0xea, 0x3a, 0xc3, 0xbf, 0x04, 0xb9, 0x9d, 0x2f, 0xa7, 0xd4, 0xc8, 0x44, 0x8d, 0x69, 0x54,
	0x2f, 0x11, 0x32, 0x76, 0x09, 0x27, 0x9b, 0x46, 0x41, 0x8b, 0x33, 0x63, 0x59, 0xeb, 0xa3, 0xe8,
	0xb2, 0xc0, 0x41, 0x9f, 0xdc, 0x34, 0xa8, 0xd3, 0x40, 0x9c, 0x1e, 0xce, 0x00, 0x7d, 0xa5, 0xb2,
	0x74, 0x2a, 0xa8, 0x68, 0x98, 0x56, 0xc8, 0x43, 0x20, 0x27, 0x28, 0x6c, 0x1c, 0x1e, 0x5c, 0xc9,
	0x00, 0x77, 0x02, 0xb7, 0xff, 0xbc, 0x43, 0x36, 0xf5, 0xa9, 0x4d, 0x4f, 0xb3, 0xc0, 0xa0, 0x6c,
	0x1c, 0xd2, 0x0a, 0xa1, 0xb0, 0xda, 0x4b, 0x24, 0x84, 0xe4, 0xd6, 0x4b, 0x3a, 0x3f, 0x40, 0x5d,
	0xdb, 0x1f, 0x33, 0x67, 0x9c, 0xaa, 0xd9, 0xce, 0x70, 0xff, 0x08, 0x1a, 0x47, 0x01, 0x1b, 0xf8,
	0x98, 0x7b, 0x9d, 0xf7, 0x32, 0x70, 0xa1, 0xed, 0xcf, 0xa0, 0x39, 0x86, 0xe6, 0xa1, 0xc7, 0x3f,
	0x9d, 0xe7, 0x19, 0x34, 0xfa, 0xec, 0x32, 0x23, 0xf1, 0x90, 0xa7, 0xe5, 0x90, 0x35, 0x9d, 0x99,
	0x05, 0x75, 0xbb, 0x17, 0x7b, 0x97, 0x4c, 0x4c, 0xa5, 0xc8, 0xba, 0xa2, 0x75, 0x77, 0x1c, 0xc1,
	0xd4, 0x5d, 0x93, 0x70, 0xcf, 0xa0, 0xf9, 0xf2, 0xcf, 0x00, 0xdd, 0x8f, 0xc5, 0xff, 0x04, 0xf5,
	0x8e, 0xef, 0x7f, 0x2c, 0xfa, 0x47, 0x20, 0xbd, 0x64, 0xe0, 0x7b, 0x4e, 0x81, 0xe0, 0xa6, 0x26,
	0xf8, 0x10, 0x78, 0x0f, 0x36, 0x55, 0x7a, 0x4d, 0x2d, 0xe6, 0xe6, 0x04, 0x8a, 0x56, 0xc8, 0x2e,
	0xac, 0xdb, 0x49, 0xa0, 0x7b, 0x47, 0x29, 0x0d, 0x4b, 0xc5, 0xff, 0x10, 0xd6, 0xcc, 0xe0, 0x41,
	0xee, 0x18, 0xc5, 0xc2, 0x1c, 0x62, 0xdd, 0x4a, 0xf9, 0xf5, 0x32, 0xad, 0x90, 0xcf, 0x60, 0x55,
	0xba, 0x93, 0x04, 0xa5, 0xb2, 0x80, 0x4c, 0x93, 0x56, 0xc8, 0x03, 0x58, 0xd7, 0x5a, 0x6f, 0x4e,
	0x67, 0xea, 0x3d, 0x01, 0x90, 0x25, 0xad, 0x27, 0x75, 0x92, 0x5a, 0x33, 0xf2, 0x8c, 0x8c, 0xd8,
	0x83, 0x8d, 0x17, 0x21, 0x73, 0x53, 0x60, 0x7d, 0x5c, 0x93, 0xb1, 0x17, 0x8c, 0x4e, 0x0f, 0xad,
	0x12, 0x13, 0xad, 0x90, 0x13, 0x20, 0x36, 0x5e, 0x84, 0x97, 0x68, 0x06, 0xd1, 0x48, 0x8d, 0x3c,
	0x1f, 0x91, 0xcc, 0x87, 0x50, 0xef, 0xb8, 0xee, 0xa7, 0xb2, 0x3c, 0x83, 0x66, 0x6e, 0x2a, 0x56,
	0x34, 0x0b, 0xa5, 0xd4, 0xe7, 0xb0, 0xd6, 0x4b, 0x84, 0x1c, 0x54, 0xc9, 0x86, 0xd1, 0x91, 0x82,
	0x95, 0x17, 0x68, 0x85, 0x7c, 0x0b, 0x35, 0x09, 0x50, 0x23, 0x37, 0xb9, 0xab, 0xe9, 0x4b, 0xd3,
	0xad, 0x55, 0xcf, 0x41, 0x0c, 0xfb, 0xab, 0xa9, 0x33, 0xfb, 0x71, 0x18, 0xcb, 0xe3, 0x91, 0x1d,
	0xcd, 0x73, 0xfd, 0x54, 0x3f, 0x8d, 0xf2, 0x11, 0x80, 0xca, 0xba, 0x99, 0xae, 0x4c, 0xdc, 0x4d,
	0xa6, 0x05, 0x2a, 0xd0, 0xc1, 0x55, 0xcf, 0x26, 0x5b, 0x86, 0x59, 0xaf, 0xf7, 0xec, 0x14, 0x39,
	0x73, 0x14, 0xc8, 0x7d, 0x23, 0x90, 0xed, 0x71, 0x9e, 0x97, 0x3e, 0x1b, 0xa6, 0xe4, 0x7a, 0x1b,
	0x1a, 0xca, 0x95, 0x3c, 0xbe, 0x98, 0xcd, 0x25, 0x87, 0xbf, 0x00, 0x90, 0x11, 0x32, 0xed, 0xba,
	0x78, 0xeb, 0x66, 0x13, 0x88, 0x8a, 0x46, 0xad, 0xc7, 0x84, 0x73, 0xae, 0xe2, 0x99, 0xdf, 0x9b,
	0x71, 0x10, 0xfd, 0xca, 0x27, 0x11, 0x25, 0xea, 0x27, 0xfa, 0x95, 0x4b, 0x89, 0x5f, 0x3b, 0x3a,
	0xd4, 0x73, 0x18, 0x73, 0xd8, 0x2f, 0x55, 0xc9, 0xbe, 0x0e, 0xdf, 0x61, 0x50, 0xf0, 0xbc, 0x5c,
	0x5b, 0xea, 0x4a, 0x35, 0xd3, 0xd5, 0xa4, 0xf6, 0xf5, 0xee, 0xb7, 0x61, 0x33, 0x1d, 0x88, 0x34,
	0x6c, 0xa2, 0x68, 0x4b, 0x07, 0x79, 0x0a, 0x9b, 0xcf, 0x19, 0xcf, 0x3e, 0x40, 0xd3, 0x32, 0x9b,
	0xf8, 0x24, 0x1d, 0x03, 0x0f, 0xc2, 0xd0, 0xa7, 0x15, 0x72, 0x00, 0x9b, 0x1d, 0xd7, 0x9d, 0x07,
	0x38, 0xf3, 0x06, 0xd5, 0xed, 0xe2, 0x93, 0x68, 0x0e, 0xf6, 0xde, 0xb6, 0x3e, 0xf8, 0xd1, 0x5d,
	0xf8, 0x45, 0x66, 0xb0, 0xaa, 0x38, 0xf6, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xb1, 0x9b,
	0x2f, 0xae, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataClient interface {
	// Retrieve User Error
	GetErrors(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.UserErrors, error)
	// Add A User Error
	AddError(ctx context.Context, in *types.UserError, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete A User Error
	DeleteError(ctx context.Context, in *types.UserError, opts ...grpc.CallOption) (*empty.Empty, error)
	// Register state with the database.
	OAuthRegisterState(ctx context.Context, in *OAuthState, opts ...grpc.CallOption) (*empty.Empty, error)
	// Validate returned state within the database.
	OAuthValidateState(ctx context.Context, in *OAuthState, opts ...grpc.CallOption) (*empty.Empty, error)
	// QueueCount is the count of the queue
	QueueCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Count, error)
	// QueueCountForRepository counts by repo
	QueueCountForRepository(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Count, error)
	// QueueListForRepository produces a list for the repo of queue items.
	QueueListForRepository(ctx context.Context, in *QueueListRequest, opts ...grpc.CallOption) (*QueueList, error)
	// QueueAdd adds a new QueueList of items
	QueueAdd(ctx context.Context, in *QueueList, opts ...grpc.CallOption) (*QueueList, error)
	// QueueNext retrieves the next item in the queue.
	QueueNext(ctx context.Context, in *types.QueueRequest, opts ...grpc.CallOption) (*types.QueueItem, error)
	// PutStatus sets the status of the run in the DB.
	PutStatus(ctx context.Context, in *types.Status, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetCancel cancels a run.
	SetCancel(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetCancel retrieves the canceled state of the run.
	GetCancel(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Status, error)
	// Given a name and sha, look up the ref.
	GetRefByNameAndSHA(ctx context.Context, in *RefPair, opts ...grpc.CallOption) (*types.Ref, error)
	// PutRef saves a ref.
	PutRef(ctx context.Context, in *types.Ref, opts ...grpc.CallOption) (*types.Ref, error)
	// CancelRefByName cancels by branch or tag name.
	CancelRefByName(ctx context.Context, in *RepoRef, opts ...grpc.CallOption) (*empty.Empty, error)
	// Enables repository for testing in CI
	EnableRepository(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*empty.Empty, error)
	// Disables repository for testing in CI
	DisableRepository(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*empty.Empty, error)
	// Given a JSON list of github responses; save all the repos.
	SaveRepositories(ctx context.Context, in *GithubJSON, opts ...grpc.CallOption) (*empty.Empty, error)
	// List all Private Repositories for the user.
	PrivateRepositories(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error)
	// List all Owned Repositories for the user.
	OwnedRepositories(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error)
	// List all repositories for the user.
	AllRepositories(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error)
	// List all public repositories.
	PublicRepositories(ctx context.Context, in *Search, opts ...grpc.CallOption) (*types.RepositoryList, error)
	// Get a specific repository by name.
	GetRepository(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.Repository, error)
	// Count of runs for the given ref pair
	RunCount(ctx context.Context, in *RefPair, opts ...grpc.CallOption) (*Count, error)
	// List the runs
	RunList(ctx context.Context, in *RunListRequest, opts ...grpc.CallOption) (*types.RunList, error)
	// Get a specific Run
	GetRun(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Run, error)
	// Get a specific Run with security details omitted; for UI work.
	GetRunUI(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Run, error)
	// PutSession saves the session.
	PutSession(ctx context.Context, in *types.Session, opts ...grpc.CallOption) (*empty.Empty, error)
	// LoadSession loads the session.
	LoadSession(ctx context.Context, in *types.StringID, opts ...grpc.CallOption) (*types.Session, error)
	// removes the subscription from the user's account.
	RemoveSubscription(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*empty.Empty, error)
	// adds a subscription.
	AddSubscription(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*empty.Empty, error)
	// lists all the subscriptions for the user.
	ListSubscriptions(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error)
	// Add a task to the db.
	PutTask(ctx context.Context, in *types.Task, opts ...grpc.CallOption) (*types.Task, error)
	// List Tasks
	ListTasks(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*types.TaskList, error)
	// List tasks only in the user's subscription list.
	ListSubscribedTasksForUser(ctx context.Context, in *ListSubscribedTasksRequest, opts ...grpc.CallOption) (*types.TaskList, error)
	// Count Tasks
	CountTasks(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*Count, error)
	// cancel a task by pull request ID
	CancelTasksByPR(ctx context.Context, in *types.CancelPRRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// get all runs associated with the task.
	RunsForTask(ctx context.Context, in *RunsForTaskRequest, opts ...grpc.CallOption) (*types.RunList, error)
	// Count all associated runs with the task.
	CountRunsForTask(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*Count, error)
	// Get a user by name
	UserByName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.User, error)
	// Update a user -- currently only accepts token changes.
	PatchUser(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create a user
	PutUser(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*types.User, error)
	// List all users.
	ListUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*types.UserList, error)
	// Get a auth token (not oauth)
	GetToken(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.StringID, error)
	// Delete the auth token
	DeleteToken(ctx context.Context, in *Name, opts ...grpc.CallOption) (*empty.Empty, error)
	// Validate the auth token -- returns the user if successful
	ValidateToken(ctx context.Context, in *types.StringID, opts ...grpc.CallOption) (*types.User, error)
	// Returns true if the user has the capability
	HasCapability(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*types.Bool, error)
	// Adds the capability for the user
	AddCapability(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Removes the capability from the user
	RemoveCapability(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type dataClient struct {
	cc *grpc.ClientConn
}

func NewDataClient(cc *grpc.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) GetErrors(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.UserErrors, error) {
	out := new(types.UserErrors)
	err := c.cc.Invoke(ctx, "/data.Data/GetErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) AddError(ctx context.Context, in *types.UserError, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/AddError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteError(ctx context.Context, in *types.UserError, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/DeleteError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) OAuthRegisterState(ctx context.Context, in *OAuthState, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/OAuthRegisterState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) OAuthValidateState(ctx context.Context, in *OAuthState, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/OAuthValidateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) QueueCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/data.Data/QueueCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) QueueCountForRepository(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/data.Data/QueueCountForRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) QueueListForRepository(ctx context.Context, in *QueueListRequest, opts ...grpc.CallOption) (*QueueList, error) {
	out := new(QueueList)
	err := c.cc.Invoke(ctx, "/data.Data/QueueListForRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) QueueAdd(ctx context.Context, in *QueueList, opts ...grpc.CallOption) (*QueueList, error) {
	out := new(QueueList)
	err := c.cc.Invoke(ctx, "/data.Data/QueueAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) QueueNext(ctx context.Context, in *types.QueueRequest, opts ...grpc.CallOption) (*types.QueueItem, error) {
	out := new(types.QueueItem)
	err := c.cc.Invoke(ctx, "/data.Data/QueueNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PutStatus(ctx context.Context, in *types.Status, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/PutStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) SetCancel(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/SetCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetCancel(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Status, error) {
	out := new(types.Status)
	err := c.cc.Invoke(ctx, "/data.Data/GetCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetRefByNameAndSHA(ctx context.Context, in *RefPair, opts ...grpc.CallOption) (*types.Ref, error) {
	out := new(types.Ref)
	err := c.cc.Invoke(ctx, "/data.Data/GetRefByNameAndSHA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PutRef(ctx context.Context, in *types.Ref, opts ...grpc.CallOption) (*types.Ref, error) {
	out := new(types.Ref)
	err := c.cc.Invoke(ctx, "/data.Data/PutRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CancelRefByName(ctx context.Context, in *RepoRef, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/CancelRefByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) EnableRepository(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/EnableRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DisableRepository(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/DisableRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) SaveRepositories(ctx context.Context, in *GithubJSON, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/SaveRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PrivateRepositories(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error) {
	out := new(types.RepositoryList)
	err := c.cc.Invoke(ctx, "/data.Data/PrivateRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) OwnedRepositories(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error) {
	out := new(types.RepositoryList)
	err := c.cc.Invoke(ctx, "/data.Data/OwnedRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) AllRepositories(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error) {
	out := new(types.RepositoryList)
	err := c.cc.Invoke(ctx, "/data.Data/AllRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PublicRepositories(ctx context.Context, in *Search, opts ...grpc.CallOption) (*types.RepositoryList, error) {
	out := new(types.RepositoryList)
	err := c.cc.Invoke(ctx, "/data.Data/PublicRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetRepository(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.Repository, error) {
	out := new(types.Repository)
	err := c.cc.Invoke(ctx, "/data.Data/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RunCount(ctx context.Context, in *RefPair, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/data.Data/RunCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RunList(ctx context.Context, in *RunListRequest, opts ...grpc.CallOption) (*types.RunList, error) {
	out := new(types.RunList)
	err := c.cc.Invoke(ctx, "/data.Data/RunList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetRun(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Run, error) {
	out := new(types.Run)
	err := c.cc.Invoke(ctx, "/data.Data/GetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetRunUI(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*types.Run, error) {
	out := new(types.Run)
	err := c.cc.Invoke(ctx, "/data.Data/GetRunUI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PutSession(ctx context.Context, in *types.Session, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/PutSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) LoadSession(ctx context.Context, in *types.StringID, opts ...grpc.CallOption) (*types.Session, error) {
	out := new(types.Session)
	err := c.cc.Invoke(ctx, "/data.Data/LoadSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RemoveSubscription(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/RemoveSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) AddSubscription(ctx context.Context, in *RepoUserSelection, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/AddSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListSubscriptions(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*types.RepositoryList, error) {
	out := new(types.RepositoryList)
	err := c.cc.Invoke(ctx, "/data.Data/ListSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PutTask(ctx context.Context, in *types.Task, opts ...grpc.CallOption) (*types.Task, error) {
	out := new(types.Task)
	err := c.cc.Invoke(ctx, "/data.Data/PutTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTasks(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*types.TaskList, error) {
	out := new(types.TaskList)
	err := c.cc.Invoke(ctx, "/data.Data/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListSubscribedTasksForUser(ctx context.Context, in *ListSubscribedTasksRequest, opts ...grpc.CallOption) (*types.TaskList, error) {
	out := new(types.TaskList)
	err := c.cc.Invoke(ctx, "/data.Data/ListSubscribedTasksForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CountTasks(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/data.Data/CountTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CancelTasksByPR(ctx context.Context, in *types.CancelPRRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/CancelTasksByPR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RunsForTask(ctx context.Context, in *RunsForTaskRequest, opts ...grpc.CallOption) (*types.RunList, error) {
	out := new(types.RunList)
	err := c.cc.Invoke(ctx, "/data.Data/RunsForTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CountRunsForTask(ctx context.Context, in *types.IntID, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/data.Data/CountRunsForTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UserByName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.User, error) {
	out := new(types.User)
	err := c.cc.Invoke(ctx, "/data.Data/UserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PatchUser(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/PatchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PutUser(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*types.User, error) {
	out := new(types.User)
	err := c.cc.Invoke(ctx, "/data.Data/PutUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*types.UserList, error) {
	out := new(types.UserList)
	err := c.cc.Invoke(ctx, "/data.Data/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetToken(ctx context.Context, in *Name, opts ...grpc.CallOption) (*types.StringID, error) {
	out := new(types.StringID)
	err := c.cc.Invoke(ctx, "/data.Data/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteToken(ctx context.Context, in *Name, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ValidateToken(ctx context.Context, in *types.StringID, opts ...grpc.CallOption) (*types.User, error) {
	out := new(types.User)
	err := c.cc.Invoke(ctx, "/data.Data/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) HasCapability(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*types.Bool, error) {
	out := new(types.Bool)
	err := c.cc.Invoke(ctx, "/data.Data/HasCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) AddCapability(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/AddCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RemoveCapability(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/data.Data/RemoveCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
type DataServer interface {
	// Retrieve User Error
	GetErrors(context.Context, *Name) (*types.UserErrors, error)
	// Add A User Error
	AddError(context.Context, *types.UserError) (*empty.Empty, error)
	// Delete A User Error
	DeleteError(context.Context, *types.UserError) (*empty.Empty, error)
	// Register state with the database.
	OAuthRegisterState(context.Context, *OAuthState) (*empty.Empty, error)
	// Validate returned state within the database.
	OAuthValidateState(context.Context, *OAuthState) (*empty.Empty, error)
	// QueueCount is the count of the queue
	QueueCount(context.Context, *empty.Empty) (*Count, error)
	// QueueCountForRepository counts by repo
	QueueCountForRepository(context.Context, *Name) (*Count, error)
	// QueueListForRepository produces a list for the repo of queue items.
	QueueListForRepository(context.Context, *QueueListRequest) (*QueueList, error)
	// QueueAdd adds a new QueueList of items
	QueueAdd(context.Context, *QueueList) (*QueueList, error)
	// QueueNext retrieves the next item in the queue.
	QueueNext(context.Context, *types.QueueRequest) (*types.QueueItem, error)
	// PutStatus sets the status of the run in the DB.
	PutStatus(context.Context, *types.Status) (*empty.Empty, error)
	// SetCancel cancels a run.
	SetCancel(context.Context, *types.IntID) (*empty.Empty, error)
	// GetCancel retrieves the canceled state of the run.
	GetCancel(context.Context, *types.IntID) (*types.Status, error)
	// Given a name and sha, look up the ref.
	GetRefByNameAndSHA(context.Context, *RefPair) (*types.Ref, error)
	// PutRef saves a ref.
	PutRef(context.Context, *types.Ref) (*types.Ref, error)
	// CancelRefByName cancels by branch or tag name.
	CancelRefByName(context.Context, *RepoRef) (*empty.Empty, error)
	// Enables repository for testing in CI
	EnableRepository(context.Context, *RepoUserSelection) (*empty.Empty, error)
	// Disables repository for testing in CI
	DisableRepository(context.Context, *RepoUserSelection) (*empty.Empty, error)
	// Given a JSON list of github responses; save all the repos.
	SaveRepositories(context.Context, *GithubJSON) (*empty.Empty, error)
	// List all Private Repositories for the user.
	PrivateRepositories(context.Context, *NameSearch) (*types.RepositoryList, error)
	// List all Owned Repositories for the user.
	OwnedRepositories(context.Context, *NameSearch) (*types.RepositoryList, error)
	// List all repositories for the user.
	AllRepositories(context.Context, *NameSearch) (*types.RepositoryList, error)
	// List all public repositories.
	PublicRepositories(context.Context, *Search) (*types.RepositoryList, error)
	// Get a specific repository by name.
	GetRepository(context.Context, *Name) (*types.Repository, error)
	// Count of runs for the given ref pair
	RunCount(context.Context, *RefPair) (*Count, error)
	// List the runs
	RunList(context.Context, *RunListRequest) (*types.RunList, error)
	// Get a specific Run
	GetRun(context.Context, *types.IntID) (*types.Run, error)
	// Get a specific Run with security details omitted; for UI work.
	GetRunUI(context.Context, *types.IntID) (*types.Run, error)
	// PutSession saves the session.
	PutSession(context.Context, *types.Session) (*empty.Empty, error)
	// LoadSession loads the session.
	LoadSession(context.Context, *types.StringID) (*types.Session, error)
	// removes the subscription from the user's account.
	RemoveSubscription(context.Context, *RepoUserSelection) (*empty.Empty, error)
	// adds a subscription.
	AddSubscription(context.Context, *RepoUserSelection) (*empty.Empty, error)
	// lists all the subscriptions for the user.
	ListSubscriptions(context.Context, *NameSearch) (*types.RepositoryList, error)
	// Add a task to the db.
	PutTask(context.Context, *types.Task) (*types.Task, error)
	// List Tasks
	ListTasks(context.Context, *TaskListRequest) (*types.TaskList, error)
	// List tasks only in the user's subscription list.
	ListSubscribedTasksForUser(context.Context, *ListSubscribedTasksRequest) (*types.TaskList, error)
	// Count Tasks
	CountTasks(context.Context, *TaskListRequest) (*Count, error)
	// cancel a task by pull request ID
	CancelTasksByPR(context.Context, *types.CancelPRRequest) (*empty.Empty, error)
	// get all runs associated with the task.
	RunsForTask(context.Context, *RunsForTaskRequest) (*types.RunList, error)
	// Count all associated runs with the task.
	CountRunsForTask(context.Context, *types.IntID) (*Count, error)
	// Get a user by name
	UserByName(context.Context, *Name) (*types.User, error)
	// Update a user -- currently only accepts token changes.
	PatchUser(context.Context, *types.User) (*empty.Empty, error)
	// Create a user
	PutUser(context.Context, *types.User) (*types.User, error)
	// List all users.
	ListUsers(context.Context, *empty.Empty) (*types.UserList, error)
	// Get a auth token (not oauth)
	GetToken(context.Context, *Name) (*types.StringID, error)
	// Delete the auth token
	DeleteToken(context.Context, *Name) (*empty.Empty, error)
	// Validate the auth token -- returns the user if successful
	ValidateToken(context.Context, *types.StringID) (*types.User, error)
	// Returns true if the user has the capability
	HasCapability(context.Context, *CapabilityRequest) (*types.Bool, error)
	// Adds the capability for the user
	AddCapability(context.Context, *CapabilityRequest) (*empty.Empty, error)
	// Removes the capability from the user
	RemoveCapability(context.Context, *CapabilityRequest) (*empty.Empty, error)
}

// UnimplementedDataServer can be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (*UnimplementedDataServer) GetErrors(ctx context.Context, req *Name) (*types.UserErrors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrors not implemented")
}
func (*UnimplementedDataServer) AddError(ctx context.Context, req *types.UserError) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddError not implemented")
}
func (*UnimplementedDataServer) DeleteError(ctx context.Context, req *types.UserError) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteError not implemented")
}
func (*UnimplementedDataServer) OAuthRegisterState(ctx context.Context, req *OAuthState) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthRegisterState not implemented")
}
func (*UnimplementedDataServer) OAuthValidateState(ctx context.Context, req *OAuthState) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthValidateState not implemented")
}
func (*UnimplementedDataServer) QueueCount(ctx context.Context, req *empty.Empty) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueCount not implemented")
}
func (*UnimplementedDataServer) QueueCountForRepository(ctx context.Context, req *Name) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueCountForRepository not implemented")
}
func (*UnimplementedDataServer) QueueListForRepository(ctx context.Context, req *QueueListRequest) (*QueueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueListForRepository not implemented")
}
func (*UnimplementedDataServer) QueueAdd(ctx context.Context, req *QueueList) (*QueueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueAdd not implemented")
}
func (*UnimplementedDataServer) QueueNext(ctx context.Context, req *types.QueueRequest) (*types.QueueItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueNext not implemented")
}
func (*UnimplementedDataServer) PutStatus(ctx context.Context, req *types.Status) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutStatus not implemented")
}
func (*UnimplementedDataServer) SetCancel(ctx context.Context, req *types.IntID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCancel not implemented")
}
func (*UnimplementedDataServer) GetCancel(ctx context.Context, req *types.IntID) (*types.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCancel not implemented")
}
func (*UnimplementedDataServer) GetRefByNameAndSHA(ctx context.Context, req *RefPair) (*types.Ref, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefByNameAndSHA not implemented")
}
func (*UnimplementedDataServer) PutRef(ctx context.Context, req *types.Ref) (*types.Ref, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRef not implemented")
}
func (*UnimplementedDataServer) CancelRefByName(ctx context.Context, req *RepoRef) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRefByName not implemented")
}
func (*UnimplementedDataServer) EnableRepository(ctx context.Context, req *RepoUserSelection) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableRepository not implemented")
}
func (*UnimplementedDataServer) DisableRepository(ctx context.Context, req *RepoUserSelection) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRepository not implemented")
}
func (*UnimplementedDataServer) SaveRepositories(ctx context.Context, req *GithubJSON) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRepositories not implemented")
}
func (*UnimplementedDataServer) PrivateRepositories(ctx context.Context, req *NameSearch) (*types.RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateRepositories not implemented")
}
func (*UnimplementedDataServer) OwnedRepositories(ctx context.Context, req *NameSearch) (*types.RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OwnedRepositories not implemented")
}
func (*UnimplementedDataServer) AllRepositories(ctx context.Context, req *NameSearch) (*types.RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllRepositories not implemented")
}
func (*UnimplementedDataServer) PublicRepositories(ctx context.Context, req *Search) (*types.RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicRepositories not implemented")
}
func (*UnimplementedDataServer) GetRepository(ctx context.Context, req *Name) (*types.Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (*UnimplementedDataServer) RunCount(ctx context.Context, req *RefPair) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCount not implemented")
}
func (*UnimplementedDataServer) RunList(ctx context.Context, req *RunListRequest) (*types.RunList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunList not implemented")
}
func (*UnimplementedDataServer) GetRun(ctx context.Context, req *types.IntID) (*types.Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (*UnimplementedDataServer) GetRunUI(ctx context.Context, req *types.IntID) (*types.Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunUI not implemented")
}
func (*UnimplementedDataServer) PutSession(ctx context.Context, req *types.Session) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSession not implemented")
}
func (*UnimplementedDataServer) LoadSession(ctx context.Context, req *types.StringID) (*types.Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSession not implemented")
}
func (*UnimplementedDataServer) RemoveSubscription(ctx context.Context, req *RepoUserSelection) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubscription not implemented")
}
func (*UnimplementedDataServer) AddSubscription(ctx context.Context, req *RepoUserSelection) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscription not implemented")
}
func (*UnimplementedDataServer) ListSubscriptions(ctx context.Context, req *NameSearch) (*types.RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (*UnimplementedDataServer) PutTask(ctx context.Context, req *types.Task) (*types.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTask not implemented")
}
func (*UnimplementedDataServer) ListTasks(ctx context.Context, req *TaskListRequest) (*types.TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (*UnimplementedDataServer) ListSubscribedTasksForUser(ctx context.Context, req *ListSubscribedTasksRequest) (*types.TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribedTasksForUser not implemented")
}
func (*UnimplementedDataServer) CountTasks(ctx context.Context, req *TaskListRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTasks not implemented")
}
func (*UnimplementedDataServer) CancelTasksByPR(ctx context.Context, req *types.CancelPRRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTasksByPR not implemented")
}
func (*UnimplementedDataServer) RunsForTask(ctx context.Context, req *RunsForTaskRequest) (*types.RunList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunsForTask not implemented")
}
func (*UnimplementedDataServer) CountRunsForTask(ctx context.Context, req *types.IntID) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRunsForTask not implemented")
}
func (*UnimplementedDataServer) UserByName(ctx context.Context, req *Name) (*types.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserByName not implemented")
}
func (*UnimplementedDataServer) PatchUser(ctx context.Context, req *types.User) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchUser not implemented")
}
func (*UnimplementedDataServer) PutUser(ctx context.Context, req *types.User) (*types.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUser not implemented")
}
func (*UnimplementedDataServer) ListUsers(ctx context.Context, req *empty.Empty) (*types.UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedDataServer) GetToken(ctx context.Context, req *Name) (*types.StringID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedDataServer) DeleteToken(ctx context.Context, req *Name) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (*UnimplementedDataServer) ValidateToken(ctx context.Context, req *types.StringID) (*types.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (*UnimplementedDataServer) HasCapability(ctx context.Context, req *CapabilityRequest) (*types.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCapability not implemented")
}
func (*UnimplementedDataServer) AddCapability(ctx context.Context, req *CapabilityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCapability not implemented")
}
func (*UnimplementedDataServer) RemoveCapability(ctx context.Context, req *CapabilityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCapability not implemented")
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_GetErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetErrors(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_AddError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UserError)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).AddError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/AddError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).AddError(ctx, req.(*types.UserError))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UserError)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/DeleteError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteError(ctx, req.(*types.UserError))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_OAuthRegisterState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).OAuthRegisterState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/OAuthRegisterState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).OAuthRegisterState(ctx, req.(*OAuthState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_OAuthValidateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).OAuthValidateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/OAuthValidateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).OAuthValidateState(ctx, req.(*OAuthState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_QueueCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).QueueCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/QueueCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).QueueCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_QueueCountForRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).QueueCountForRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/QueueCountForRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).QueueCountForRepository(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_QueueListForRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).QueueListForRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/QueueListForRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).QueueListForRepository(ctx, req.(*QueueListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_QueueAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).QueueAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/QueueAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).QueueAdd(ctx, req.(*QueueList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_QueueNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).QueueNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/QueueNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).QueueNext(ctx, req.(*types.QueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PutStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PutStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PutStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PutStatus(ctx, req.(*types.Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_SetCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).SetCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/SetCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).SetCancel(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetCancel(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetRefByNameAndSHA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetRefByNameAndSHA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetRefByNameAndSHA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetRefByNameAndSHA(ctx, req.(*RefPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PutRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Ref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PutRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PutRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PutRef(ctx, req.(*types.Ref))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CancelRefByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CancelRefByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/CancelRefByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CancelRefByName(ctx, req.(*RepoRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_EnableRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoUserSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).EnableRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/EnableRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).EnableRepository(ctx, req.(*RepoUserSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DisableRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoUserSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DisableRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/DisableRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DisableRepository(ctx, req.(*RepoUserSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_SaveRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GithubJSON)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).SaveRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/SaveRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).SaveRepositories(ctx, req.(*GithubJSON))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PrivateRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PrivateRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PrivateRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PrivateRepositories(ctx, req.(*NameSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_OwnedRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).OwnedRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/OwnedRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).OwnedRepositories(ctx, req.(*NameSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_AllRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).AllRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/AllRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).AllRepositories(ctx, req.(*NameSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PublicRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PublicRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PublicRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PublicRepositories(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetRepository(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RunCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RunCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/RunCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RunCount(ctx, req.(*RefPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RunList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RunList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/RunList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RunList(ctx, req.(*RunListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetRun(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetRunUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetRunUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetRunUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetRunUI(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PutSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PutSession(ctx, req.(*types.Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_LoadSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.StringID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).LoadSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/LoadSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).LoadSession(ctx, req.(*types.StringID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RemoveSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoUserSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RemoveSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/RemoveSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RemoveSubscription(ctx, req.(*RepoUserSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_AddSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoUserSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).AddSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/AddSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).AddSubscription(ctx, req.(*RepoUserSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/ListSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListSubscriptions(ctx, req.(*NameSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PutTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PutTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PutTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PutTask(ctx, req.(*types.Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTasks(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListSubscribedTasksForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscribedTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListSubscribedTasksForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/ListSubscribedTasksForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListSubscribedTasksForUser(ctx, req.(*ListSubscribedTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CountTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CountTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/CountTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CountTasks(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CancelTasksByPR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.CancelPRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CancelTasksByPR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/CancelTasksByPR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CancelTasksByPR(ctx, req.(*types.CancelPRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RunsForTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunsForTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RunsForTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/RunsForTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RunsForTask(ctx, req.(*RunsForTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CountRunsForTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.IntID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CountRunsForTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/CountRunsForTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CountRunsForTask(ctx, req.(*types.IntID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/UserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UserByName(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PatchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PatchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PatchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PatchUser(ctx, req.(*types.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/PutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PutUser(ctx, req.(*types.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetToken(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteToken(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.StringID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ValidateToken(ctx, req.(*types.StringID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_HasCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).HasCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/HasCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).HasCapability(ctx, req.(*CapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_AddCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).AddCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/AddCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).AddCapability(ctx, req.(*CapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RemoveCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RemoveCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/RemoveCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RemoveCapability(ctx, req.(*CapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetErrors",
			Handler:    _Data_GetErrors_Handler,
		},
		{
			MethodName: "AddError",
			Handler:    _Data_AddError_Handler,
		},
		{
			MethodName: "DeleteError",
			Handler:    _Data_DeleteError_Handler,
		},
		{
			MethodName: "OAuthRegisterState",
			Handler:    _Data_OAuthRegisterState_Handler,
		},
		{
			MethodName: "OAuthValidateState",
			Handler:    _Data_OAuthValidateState_Handler,
		},
		{
			MethodName: "QueueCount",
			Handler:    _Data_QueueCount_Handler,
		},
		{
			MethodName: "QueueCountForRepository",
			Handler:    _Data_QueueCountForRepository_Handler,
		},
		{
			MethodName: "QueueListForRepository",
			Handler:    _Data_QueueListForRepository_Handler,
		},
		{
			MethodName: "QueueAdd",
			Handler:    _Data_QueueAdd_Handler,
		},
		{
			MethodName: "QueueNext",
			Handler:    _Data_QueueNext_Handler,
		},
		{
			MethodName: "PutStatus",
			Handler:    _Data_PutStatus_Handler,
		},
		{
			MethodName: "SetCancel",
			Handler:    _Data_SetCancel_Handler,
		},
		{
			MethodName: "GetCancel",
			Handler:    _Data_GetCancel_Handler,
		},
		{
			MethodName: "GetRefByNameAndSHA",
			Handler:    _Data_GetRefByNameAndSHA_Handler,
		},
		{
			MethodName: "PutRef",
			Handler:    _Data_PutRef_Handler,
		},
		{
			MethodName: "CancelRefByName",
			Handler:    _Data_CancelRefByName_Handler,
		},
		{
			MethodName: "EnableRepository",
			Handler:    _Data_EnableRepository_Handler,
		},
		{
			MethodName: "DisableRepository",
			Handler:    _Data_DisableRepository_Handler,
		},
		{
			MethodName: "SaveRepositories",
			Handler:    _Data_SaveRepositories_Handler,
		},
		{
			MethodName: "PrivateRepositories",
			Handler:    _Data_PrivateRepositories_Handler,
		},
		{
			MethodName: "OwnedRepositories",
			Handler:    _Data_OwnedRepositories_Handler,
		},
		{
			MethodName: "AllRepositories",
			Handler:    _Data_AllRepositories_Handler,
		},
		{
			MethodName: "PublicRepositories",
			Handler:    _Data_PublicRepositories_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _Data_GetRepository_Handler,
		},
		{
			MethodName: "RunCount",
			Handler:    _Data_RunCount_Handler,
		},
		{
			MethodName: "RunList",
			Handler:    _Data_RunList_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _Data_GetRun_Handler,
		},
		{
			MethodName: "GetRunUI",
			Handler:    _Data_GetRunUI_Handler,
		},
		{
			MethodName: "PutSession",
			Handler:    _Data_PutSession_Handler,
		},
		{
			MethodName: "LoadSession",
			Handler:    _Data_LoadSession_Handler,
		},
		{
			MethodName: "RemoveSubscription",
			Handler:    _Data_RemoveSubscription_Handler,
		},
		{
			MethodName: "AddSubscription",
			Handler:    _Data_AddSubscription_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _Data_ListSubscriptions_Handler,
		},
		{
			MethodName: "PutTask",
			Handler:    _Data_PutTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _Data_ListTasks_Handler,
		},
		{
			MethodName: "ListSubscribedTasksForUser",
			Handler:    _Data_ListSubscribedTasksForUser_Handler,
		},
		{
			MethodName: "CountTasks",
			Handler:    _Data_CountTasks_Handler,
		},
		{
			MethodName: "CancelTasksByPR",
			Handler:    _Data_CancelTasksByPR_Handler,
		},
		{
			MethodName: "RunsForTask",
			Handler:    _Data_RunsForTask_Handler,
		},
		{
			MethodName: "CountRunsForTask",
			Handler:    _Data_CountRunsForTask_Handler,
		},
		{
			MethodName: "UserByName",
			Handler:    _Data_UserByName_Handler,
		},
		{
			MethodName: "PatchUser",
			Handler:    _Data_PatchUser_Handler,
		},
		{
			MethodName: "PutUser",
			Handler:    _Data_PutUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Data_ListUsers_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Data_GetToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _Data_DeleteToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Data_ValidateToken_Handler,
		},
		{
			MethodName: "HasCapability",
			Handler:    _Data_HasCapability_Handler,
		},
		{
			MethodName: "AddCapability",
			Handler:    _Data_AddCapability_Handler,
		},
		{
			MethodName: "RemoveCapability",
			Handler:    _Data_RemoveCapability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/services/data/server.proto",
}
